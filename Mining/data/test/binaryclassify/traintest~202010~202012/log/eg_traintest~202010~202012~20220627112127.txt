
                   ###################################################################### 加工训练账期近n月基础数据
                    
20220627-11:21:27  开始时间：2022-06-27 11:21:27
20220627-11:21:27  ---- month: 202010
20220627-11:21:27  ---- 参数设置：
                       ---- step: train
                       ---- Info.model_name: 模型示例
                       ---- Info.n_recent: 3
                       ---- Info.Pcase_limit: 1000
                       ---- Info.traintable_ratio: 2
                       ---- Info.Pcumsum_limit: 2
                       ---- Info.timein_count: 500

                   ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220627-11:21:27  检查 kehujingyingbudb.ml_xy_eg_m
20220627-11:21:28      78 列
20220627-11:21:28      202010账期： 15000行
20220627-11:21:28      202009账期： 18000行
20220627-11:21:28      202008账期： 10000行


20220627-11:21:28  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.ml_xy_eg_m  group by flag_eg
20220627-11:21:29      dis_train_total: {'count': 68000, 'Pcount': 8036, 'prop': 0.118}



20220627-11:21:29  ---- 建表语句（限定202010账期当月目标用户）：
                       drop table if exists kehujingyingbudb.mid_eg_model_train_202010;
                       select pg_sleep(5);
                       create  table kehujingyingbudb.mid_eg_model_train_202010 as 
                       select acct_month, user_id, flag_eg ,row_number() over(order by acct_month desc, random()) rnself 
                       from kehujingyingbudb.ml_xy_eg_m
                       where acct_month>=202008 and acct_month<=202010 and user_status='在网-正常' and 
                           phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3 
                        and flag_eg is not null;
20220627-11:21:34      sql执行完毕
20220627-11:21:34  统计kehujingyingbudb.mid_eg_model_train_202010行列数
20220627-11:21:34      行数：{'202009': 15048, '202010': 12449}
                       列数：4


20220627-11:21:34  ---- 建表语句（划分训练/验证数据集）：
                       drop table if exists kehujingyingbudb.mid_eg_user_train_202010;
                       create  table kehujingyingbudb.mid_eg_user_train_202010 as 
                       (select acct_month user_acct_month, 'data_timein' data_use, * from kehujingyingbudb.mid_eg_model_train_202010 where rnself <= 500)
                       union all
                       (select acct_month user_acct_month, 'data_train'  data_use, * from kehujingyingbudb.mid_eg_model_train_202010 where rnself > 500 and flag_eg=1 order by rnself limit 1000)
                       union all
                       (select acct_month user_acct_month, 'data_train'  data_use, * from kehujingyingbudb.mid_eg_model_train_202010 where rnself > 500 and flag_eg=0 order by rnself limit 2000) ;
20220627-11:21:34      sql执行完毕
20220627-11:21:34  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.mid_eg_user_train_202010  group by flag_eg
20220627-11:21:34      dis_train_sample {'count': 3500, 'Pcount': 1080, 'prop': 0.309}



20220627-11:21:34  ---- 关联近n月数据：
                       drop table if exists kehujingyingbudb.mid_eg_recent_train_202010;
                       create  table kehujingyingbudb.mid_eg_recent_train_202010 as
                       select user_acct_month, data_use, acct_month, phone_no_null, phone_no_tm, user_id, dinner_id, account_id, innet_date, innet_months, age, sex, age_add, sex_add, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg, score_flag_eg, score_flag_eg2 
                       from (
                       select a.user_acct_month, a.data_use, b.*
                       from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_timein') a
                       inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202008 and acct_month<=202010) b on a.user_id = b.user_id
                       union all 
                       select a.user_acct_month, a.data_use, b.*
                       from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_train' and acct_month=202008) a
                       inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202006 and acct_month<=202008) b on a.user_id = b.user_id
                       union all
                       select a.user_acct_month, a.data_use, b.*
                       from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_train' and acct_month=202009) a
                       inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202007 and acct_month<=202009) b on a.user_id = b.user_id
                       union all
                       select a.user_acct_month, a.data_use, b.*
                       from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_train' and acct_month=202010) a
                       inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202008 and acct_month<=202010) b on a.user_id = b.user_id
                       ) t;
20220627-11:21:35      sql执行完毕
20220627-11:21:35  统计kehujingyingbudb.mid_eg_recent_train_202010行列数
20220627-11:21:35      9305行，78列

                   --------------------------------- 核验各账期数据量  ---------------------------------------------- 
20220627-11:21:35  sql语句：
                       select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                       from kehujingyingbudb.mid_eg_recent_train_202010 
                       group by user_acct_month, data_use, acct_month, flag_eg 
                       order by user_acct_month, data_use, acct_month, flag_eg

20220627-11:21:35  结果：
                      user_acct_month     data_use  acct_month  flag_eg  count
                   0           202010  data_timein      202008      NaN    324
                   1           202010  data_timein      202009      0.0    420
                   2           202010  data_timein      202009      1.0     80
                   3           202010  data_timein      202010      0.0    420
                   4           202010  data_timein      202010      1.0     80
                   5           202010   data_train      202008      NaN   1981
                   6           202010   data_train      202009      0.0   2000
                   7           202010   data_train      202009      1.0   1000
                   8           202010   data_train      202010      0.0   2000
                   9           202010   data_train      202010      1.0   1000


D:\工作\模型脚本\ModelProject\selfmodule\tablemodule\tablefun.py:900: UserWarning: 下列账期用户量不同，请检查！
                             acct_month  flag_eg  count
user_acct_month data_use                               
202010          data_timein      202008      0.0    324
                data_timein      202009      1.0    500
                data_timein      202010      1.0    500
                data_train       202008      0.0   1981
                data_train       202009      1.0   3000
                data_train       202010      1.0   3000
  warnings.warn(w); time.sleep(seconds)
20220627-11:21:38  
                   ---- 删除中间表
20220627-11:21:38  drop table if exists kehujingyingbudb.mid_eg_model_train_202010;
20220627-11:21:38      sql执行完毕
20220627-11:21:38  drop table if exists kehujingyingbudb.mid_eg_user_train_202010;
20220627-11:21:39      sql执行完毕

20220627-11:21:39  ---- 返回结果表名：kehujingyingbudb.mid_eg_recent_train_202010
20220627-11:21:39  ---- 将Info保存至./binaryclassify/eg/traintest~202010~202012/Info~base_train.pkl

20220627-11:21:39  结束时间：2022-06-27 11:21:39
20220627-11:21:39  耗时：11 s

                   ###################################################################### 探索模型宽表
                    
20220627-11:21:39  开始时间：2022-06-27 11:21:39
20220627-11:21:39  参数设置：
                       stage: explore
                       Info.r_limit: 0.95
                       Info.model_name: 模型示例
                       Info.auto_pair2: False
                       step: train
                       table_in: kehujingyingbudb.mid_eg_recent_train_202010
                       Info.iv_limit: 0.05

20220627-11:21:39  field_base: 92行

20220627-11:21:39  删除7个available_notzd“不可用”字段：['cred_type', 'called_dura', 'days_roam', 'dayvalue_calling_dura', 'dayvalue_gprs_flow', 'dayvalue_user_status', 'dayvalue_phone_no_null']
20220627-11:21:39  field_base: 85行

20220627-11:21:39  删除1个基于“不可用”字段加工的手动衍生_py字段：
                        field_name                 formula
                   54  days_roam_p  days_roam / days_month
20220627-11:21:39  field_base: 84行
20220627-11:21:39  ------------------------- 读取数据: kehujingyingbudb.mid_eg_recent_train_202010 2022-06-27 11:21:39 -------------------------
20220627-11:21:39      src: gp
20220627-11:21:39      condition: data_use='data_train'
20220627-11:21:39      col_need(71): ['user_acct_month', 'data_use', 'acct_month', 'user_id', 'innet_months', 'age', 'age_add', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'score_flag_eg', 'score_flag_eg2', 'innet_date', 'last_stop_date', 'phone_no_null', 'phone_no_tm', 'dinner_id', 'account_id', 'sex', 'sex_add', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220627-11:21:39      col_del: None
20220627-11:21:39      col_char(22): ['acct_month', 'phone_no_null', 'phone_no_tm', 'user_id', 'dinner_id', 'account_id', 'sex', 'sex_add', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220627-11:21:39      col_num(45): ['innet_months', 'age', 'age_add', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'score_flag_eg', 'score_flag_eg2']
20220627-11:21:39      col_date(2): ['innet_date', 'last_stop_date']
20220627-11:21:39      nrows: None
20220627-11:21:39      if_coltolower: True
20220627-11:21:39      kwargs: {}

20220627-11:21:39      读取
20220627-11:21:43      shape: (7981, 71)

20220627-11:21:43  将score_flag_eg2字段类型(object): .astype(float)
20220627-11:21:43  -------------------------读取完毕: (7981, 71) 2022-06-27 11:21:43 -------------------------

20220627-11:21:43  手动衍生_py12个字段: {'monthsaready_last_stop_date': '最后停机时间：已发生时长', 'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_gprs_p': '上网天数占比', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好', 'paste_dinner_innet_months': '主套餐、入网时长：交叉', 'ago_score_flag_eg': '模型示例的分数(历史)', 'ago_score_flag_eg2': '模型示例2的分数(历史)'}
20220627-11:21:43  monthsaready_last_stop_date: current_date - last_stop_date
20220627-11:21:43  monthsremain_last_stop_date: last_stop_date - current_date
20220627-11:21:43  days_gprs_p: days_gprs / days_month
20220627-11:21:43  days_call_p: days_call / days_month
20220627-11:21:43  days_call_p_1: days_call_p + days_gprs
20220627-11:21:43  days_call_p_2: days_call_p_1 + days_gprs
20220627-11:21:43  days_call_p_3: days_call_p_2 + days_gprs
20220627-11:21:43  days_call_p_4: days_call_p_3 + days_gprs
20220627-11:21:43  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220627-11:21:48  paste_dinner_innet_months: (dinner, innet_months)
20220627-11:21:51  ago_score_flag_eg: {'notago_tovalue': 1}
20220627-11:21:52  ago_score_flag_eg2: {'notago_tovalue': 1}
20220627-11:21:52  数据量: (7981, 83)

20220627-11:21:53  检查数据
20220627-11:21:53  各账期数据量分布：
                       202008  data_train    1981
                       202009  data_train    3000
                       202010  data_train    3000
                       dtype: int64
20220627-11:21:53  各账期数据量不一致
20220627-11:21:53  以nan填充缺少账期的记录
20220627-11:21:53      修改后：
                       202008  data_train    3000
                       202009  data_train    3000
                       202010  data_train    3000
                       dtype: int64)
20220627-11:21:53  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！

20220627-11:21:53  字段类型分布: 
                       float64    55
                       object    26
                       datetime64[ns]    2
                       dtype: int64


20220627-11:21:59  填充数值型&类别型字段缺失值
20220627-11:21:59  日期型字段缺失值情况：
                       innet_date    1019
                       last_stop_date    1019
                       dtype: int64

20220627-11:21:59  正负例分布：
                       data_train  202010  0    2000
                       data_train  202010  1    1000
                       dtype: int64

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220627-11:21:59  新数据newdata的shape：(3000, 77)
20220627-11:21:59  数据转换
20220627-11:22:08  转换后shape：(3000, 30)
20220627-11:22:08  从流水线中获取WoeTransformer_DF
20220627-11:22:08  首个数据集，直接返回woe编码结果
20220627-11:22:08  筛选衍生字段的 原始/手动衍生_sql 字段
20220627-11:22:08  数值型字段：有效字段28个，其中当月自动衍生字段27个，近n月自动衍生字段27个
20220627-11:22:08  类别型字段：有效字段2个（强制加入0个）:
20220627-11:22:08      当月自动衍生_py字段2个: ['if_nolimit~是', 'if_5g_dinner~是']
20220627-11:22:08      近n月自动衍生_py字段2个: ['if_nolimit~是', 'if_5g_dinner~是']

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220627-11:22:08  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:08  新数据newdata的shape：(3000, 28)
20220627-11:22:08  数据转换
20220627-11:22:14  转换后shape：(3000, 27)
20220627-11:22:14  从流水线中获取WoeTransformer_DF
20220627-11:22:16  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有0对
20220627-11:22:16      无需剔除
20220627-11:22:16  已有宽表shape：(3000, 30)
20220627-11:22:16  向宽表中加入字段（27个）：['avg__gprs_last_defer', 'avg__call_use', 'avg__calling_cnt', 'avg__days_call_p', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__nos_call', 'avg__gprs_flow_roam', 'avg__dinner_fee', 'avg__age_add', 'avg__gprs_flow_commu', 'avg__gprs_flow_short', 'avg__days_call_p_4', 'avg__call_dura_roam', 'avg__gprs_resource', 'avg__nos_calling_diff', 'avg__calling_diff_cnt', 'avg__calling_diff_dura', 'avg__gprs_flow_5g', 'avg__gprs_now_defer', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_video', 'avg__gprs_flow_game', 'avg__nos_calling', 'avg__gprs_now_rest', 'avg__calling_dura', 'avg__gprs_flow_music']
20220627-11:22:16  从宽表中删除字段（0个）：[]
20220627-11:22:16  目前宽表shape：(3000, 57)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220627-11:22:16  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:16  新数据newdata的shape：(3000, 28)
20220627-11:22:16  数据转换
20220627-11:22:21  转换后shape：(3000, 14)
20220627-11:22:21  从流水线中获取WoeTransformer_DF
20220627-11:22:22  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有2对
20220627-11:22:22      从中二者中剔除字段2个字段:['sep__gprs_flow_game', 'avg__gprs_flow_music']
20220627-11:22:22      其中待新增中剔除1个
20220627-11:22:22      其中原宽表中剔除1个

20220627-11:22:22  已有宽表shape：(3000, 57)
20220627-11:22:22  向宽表中加入字段（13个）：['sep__gprs_resource', 'sep__gprs_flow_video', 'sep__calling_cnt', 'sep__gprs_now_rest', 'sep__gprs_flow_short', 'sep__calling_diff_dura', 'sep__calling_dura', 'sep__gprs_flow_5g', 'sep__calling_diff_cnt', 'sep__nos_calling', 'sep__gprs_flow_music', 'sep__monthsremain_last_stop_date', 'sep__gprs_flow_commu']
20220627-11:22:22  从宽表中删除字段（1个）：['avg__gprs_flow_music']
20220627-11:22:22  目前宽表shape：(3000, 69)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220627-11:22:22  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:22  新数据newdata的shape：(3000, 28)
20220627-11:22:22  数据转换
20220627-11:22:27  转换后shape：(3000, 12)
20220627-11:22:27  从流水线中获取WoeTransformer_DF
20220627-11:22:29  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有8对
20220627-11:22:29      从中二者中剔除字段8个字段:['wave__monthsremain_last_stop_date', 'wave__gprs_resource', 'sep__gprs_flow_video', 'sep__gprs_flow_short', 'sep__gprs_flow_commu', 'wave__gprs_flow_game', 'wave__gprs_flow_5g', 'wave__gprs_flow_music']
20220627-11:22:29      其中待新增中剔除5个
20220627-11:22:29      其中原宽表中剔除3个

20220627-11:22:29  已有宽表shape：(3000, 69)
20220627-11:22:29  向宽表中加入字段（7个）：['wave__calling_diff_cnt', 'wave__gprs_flow_video', 'wave__gprs_flow_commu', 'wave__gprs_flow_short', 'wave__gprs_last_defer', 'wave__call_use', 'wave__gprs_now_rest']
20220627-11:22:29  从宽表中删除字段（3个）：['sep__gprs_flow_video', 'sep__gprs_flow_short', 'sep__gprs_flow_commu']
20220627-11:22:29  目前宽表shape：(3000, 73)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220627-11:22:29  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:29  新数据newdata的shape：(3000, 28)
20220627-11:22:29  数据转换
20220627-11:22:34  转换后shape：(3000, 25)
20220627-11:22:34  从流水线中获取WoeTransformer_DF
20220627-11:22:35  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有15对
20220627-11:22:35      从中二者中剔除字段15个字段:['grow__nos_call', 'grow__gprs_flow_music', 'grow__gprs_flow_commu', 'grow__monthsremain_last_stop_date', 'grow__days_call_p', 'grow__days_call_p_4', 'nos_calling', 'call_dura_roam', 'grow__nos_calling_diff', 'gprs_flow_game', 'gprs_flow_short', 'avg__gprs_now_defer', 'grow__gprs_flow_video', 'grow__gprs_flow_5g', 'grow__dinner_fee']
20220627-11:22:35      其中待新增中剔除10个
20220627-11:22:35      其中原宽表中剔除5个

20220627-11:22:35  已有宽表shape：(3000, 73)
20220627-11:22:35  向宽表中加入字段（15个）：['grow__calling_cnt', 'grow__calling_diff_cnt', 'grow__gprs_flow_busy', 'grow__call_dura_roam', 'grow__gprs_resource', 'grow__arpu', 'grow__gprs_flow_game', 'grow__gprs_now_rest', 'grow__calling_dura', 'grow__nos_calling', 'grow__call_use', 'grow__age_add', 'grow__gprs_now_defer', 'grow__gprs_flow_short', 'grow__gprs_flow_roam']
20220627-11:22:35  从宽表中删除字段（5个）：['nos_calling', 'gprs_flow_short', 'avg__gprs_now_defer', 'gprs_flow_game', 'call_dura_roam']
20220627-11:22:35  目前宽表shape：(3000, 83)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220627-11:22:35  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:35  新数据newdata的shape：(3000, 28)
20220627-11:22:35  数据转换
20220627-11:22:41  转换后shape：(3000, 27)
20220627-11:22:41  从流水线中获取WoeTransformer_DF
20220627-11:22:45  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有7对
20220627-11:22:45      从中二者中剔除字段7个字段:['max__age_add', 'max__gprs_flow_5g', 'max__gprs_flow_game', 'dinner_fee', 'avg__gprs_flow_short', 'max__gprs_now_defer', 'max__gprs_flow_music']
20220627-11:22:45      其中待新增中剔除5个
20220627-11:22:45      其中原宽表中剔除2个

20220627-11:22:45  已有宽表shape：(3000, 83)
20220627-11:22:45  向宽表中加入字段（22个）：['max__dinner_fee', 'max__nos_calling', 'max__calling_diff_dura', 'max__arpu', 'max__gprs_flow_roam', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__calling_cnt', 'max__monthsremain_last_stop_date', 'max__call_use', 'max__gprs_resource', 'max__gprs_flow_short', 'max__gprs_last_defer', 'max__gprs_flow_video', 'max__days_call_p_4', 'max__gprs_flow_commu', 'max__gprs_flow_busy', 'max__nos_calling_diff', 'max__gprs_now_rest', 'max__nos_call', 'max__calling_dura', 'max__days_call_p']
20220627-11:22:45  从宽表中删除字段（2个）：['dinner_fee', 'avg__gprs_flow_short']
20220627-11:22:45  目前宽表shape：(3000, 103)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220627-11:22:45  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:45  新数据newdata的shape：(3000, 28)
20220627-11:22:45  数据转换
20220627-11:22:50  转换后shape：(3000, 18)
20220627-11:22:51  从流水线中获取WoeTransformer_DF
20220627-11:22:54  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有1对
20220627-11:22:54      从中二者中剔除字段1个字段:['min__monthsremain_last_stop_date']
20220627-11:22:54      其中待新增中剔除1个
20220627-11:22:54      其中原宽表中剔除0个

20220627-11:22:54  已有宽表shape：(3000, 103)
20220627-11:22:54  向宽表中加入字段（17个）：['min__nos_calling', 'min__gprs_flow_roam', 'min__gprs_flow_music', 'min__call_use', 'min__gprs_now_rest', 'min__dinner_fee', 'min__gprs_flow_busy', 'min__gprs_resource', 'min__calling_cnt', 'min__gprs_flow_commu', 'min__gprs_flow_video', 'min__calling_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_diff_dura', 'min__arpu', 'min__gprs_flow_short']
20220627-11:22:54  从宽表中删除字段（0个）：[]
20220627-11:22:54  目前宽表shape：(3000, 120)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220627-11:22:54  字段个数：27, 添加字段：['flag_eg']
20220627-11:22:54  新数据newdata的shape：(3000, 28)
20220627-11:22:54  数据转换
20220627-11:22:59  转换后shape：(3000, 21)
20220627-11:22:59  从流水线中获取WoeTransformer_DF
20220627-11:23:04  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有5对
20220627-11:23:04      从中二者中剔除字段5个字段:['std__gprs_flow_game', 'std__gprs_flow_5g', 'std__gprs_flow_short', 'std__gprs_flow_music', 'max__gprs_flow_video']
20220627-11:23:04      其中待新增中剔除4个
20220627-11:23:04      其中原宽表中剔除1个

20220627-11:23:04  已有宽表shape：(3000, 120)
20220627-11:23:04  向宽表中加入字段（17个）：['std__gprs_flow_video', 'std__gprs_flow_commu', 'std__nos_calling', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__calling_diff_dura', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_resource', 'std__calling_dura', 'std__call_dura_roam', 'std__gprs_now_rest', 'std__nos_calling_diff', 'std__arpu', 'std__gprs_flow_busy', 'std__dinner_fee', 'std__calling_diff_cnt']
20220627-11:23:04  从宽表中删除字段（1个）：['max__gprs_flow_video']
20220627-11:23:04  目前宽表shape：(3000, 136)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220627-11:23:04  ('more0cnt', '近3月大于0的月份数')
20220627-11:23:04  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220627-11:23:04  新数据newdata的shape：(3000, 55)
20220627-11:23:04  数据转换
20220627-11:23:11  转换后shape：(3000, 20)
20220627-11:23:11  从流水线中获取WoeTransformer_DF
20220627-11:23:12  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有9对
20220627-11:23:12      从中二者中剔除字段9个字段:['moreq25cnt__gprs_flow_game', 'more0cnt__monthsremain_last_stop_date', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__call_use', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__gprs_flow_video', 'more0cnt__nos_calling']
20220627-11:23:12      其中待新增中剔除9个
20220627-11:23:12      其中原宽表中剔除0个

20220627-11:23:12  已有宽表shape：(3000, 136)
20220627-11:23:12  向宽表中加入字段（11个）：['moreq25cnt__calling_cnt', 'moreq25cnt__dinner_fee', 'more0cnt__calling_dura', 'moreq25cnt__nos_calling', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__calling_dura', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_roam', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__gprs_resource']
20220627-11:23:12  从宽表中删除字段（0个）：[]
20220627-11:23:12  目前宽表shape：(3000, 147)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220627-11:23:12  字段个数：2, 添加字段：['flag_eg']
20220627-11:23:12  新数据newdata的shape：(3000, 3)
20220627-11:23:12  数据转换
20220627-11:23:15  转换后shape：(3000, 2)
20220627-11:23:15  从流水线中获取WoeTransformer_DF
20220627-11:23:15  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有2对
20220627-11:23:15      从中二者中剔除字段2个字段:['if_nolimit~是', 'if_5g_dinner~是']
20220627-11:23:15      其中待新增中剔除0个
20220627-11:23:15      其中原宽表中剔除2个

20220627-11:23:15  已有宽表shape：(3000, 147)
20220627-11:23:15  向宽表中加入字段（2个）：['valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
20220627-11:23:15  从宽表中删除字段（2个）：['if_nolimit~是', 'if_5g_dinner~是']
20220627-11:23:15  目前宽表shape：(3000, 147)

                   ----------------------------------------- 汇总最终宽表 
20220627-11:23:15  计算字段之间的相关性系数
20220627-11:23:15  
                       count    10731.0
                       mean    0.256
                       std    0.174
                       min    0.0
                       25%    0.134
                       50%    0.206
                       75%    0.335
                       max    0.947
                       dtype: float64

20220627-11:23:15  iv分布：
                       count    147.0
                       mean    0.167
                       std    0.141
                       min    0.051
                       25%    0.07
                       50%    0.105
                       75%    0.24
                       max    0.727
                       dtype: float64

20220627-11:23:16  woe_accum(累计)概览：                                          value    0    1       woe  weight  woe_weight  ALL
                       grow__gprs_flow_commu       (0.021492, inf]  188  349  1.311777  0.2550    0.334503  537
                       gprs_flow_commu                  (8.5, inf]  188  349  1.311777  0.2550    0.334503  537
                       sep__gprs_flow_video   (0.016857, 1.726426]  199  339  1.225842  0.2395    0.293589  538
                       max__gprs_flow_commu            (28.5, inf]  230  391  1.223775  0.2760    0.337762  621
                       std__gprs_flow_roam    (274748.609375, inf]  190  323  1.223775  0.2280    0.279021  513

20220627-11:23:16  最终宽表字段列表col_all:
20220627-11:23:16      len(col_all): 147
20220627-11:23:16      补充5个的字段（must_remain=是）：{'greatest_gprs_app', 'gprs_flow_short', 'account_id', 'gprs_flow_game', 'user_status'}
20220627-11:23:16      len(col_all): 152
20220627-11:23:16      补充账期、数据集名称、用户标识等，目标字段(Info.col_mark、Info.col_target)
20220627-11:23:16      len(col_all): 157

20220627-11:23:16      补充4个的字段（col_mark、col_target、condition、dict_sortscore、col_out）：{'last_stop_date', 'phone_no_null', 'sms_cnt', 'call_fee_local'}
20220627-11:23:16      len(col_all): 161
20220627-11:23:16  整理宽表数据字典
                   宽表数据字典概览 (161, 16):
                        是否宽表字段       field_name         comment dtype_db dtype_classify     field_src                                       table available available_notzd available_zd  \
                                  是  user_acct_month  观察期最后账期      NaN         类别型  手动衍生_sql                                         NaN       NaN             NaN          NaN   
                                  是         data_use      数据集名称      NaN         类别型  手动衍生_sql                                         NaN       NaN             NaN          NaN   
                                  是       acct_month            账期   bigint         类别型  手动衍生_sql  kehujingyingbudb.ml_feature_info_yw_user_m       NaN             NaN          NaN   
                                  是    phone_no_null        手机号码  numeric         类别型          原始  kehujingyingbudb.ml_feature_info_yw_user_m       NaN             NaN          NaN   
                                  是          user_id        手机号id     text         类别型          原始  kehujingyingbudb.ml_feature_info_yw_user_m       NaN             NaN          NaN   
                   
                        formula          remark must_remain into_model is_cause        base_init  
                            NaN             NaN         NaN        NaN      NaN  user_acct_month  
                            NaN             NaN         NaN        NaN      NaN         data_use  
                            NaN             NaN         NaN        NaN       否       acct_month  
                            NaN  不参与自动衍生         NaN       删除       否    phone_no_null  
                            NaN             NaN         NaN        NaN       否          user_id  

20220627-11:23:16  保存Info至：./binaryclassify/eg/traintest~202010~202012/Info~tabexp.pkl
20220627-11:23:16  结束时间：2022-06-27 11:23:16
20220627-11:23:16  耗时：97 s


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  convert=self.convert_dtype,


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  convert=self.convert_dtype,


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: opera_pair_fun paste时存在非类别型字段，请确认: ['innet_months']
  convert=self.convert_dtype,


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: field_base中未包括下列字段，但实际数据 多出：{'data_use', 'user_acct_month'}
  convert=self.convert_dtype,


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: field_base中未规定下列字段数据类型，请确认默认类型是否正确：{'data_use': 'object', 'user_acct_month': 'object'}
  convert=self.convert_dtype,


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(3000), 添加unique_limit_actual：len(X)*0.99=2970
  convert=self.convert_dtype,


D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     NumStrSpliter 数据中未出现非数值型字段！
  convert=self.convert_dtype,
20220627-11:27:11  
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 导入包、模块 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20220627-11:27:11  D:\工作\模型脚本\ModelProject
20220627-11:27:11  D:\工作\模型脚本\ModelProject
20220627-11:27:11  
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 模型信息_动态 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20220627-11:27:12  将excel粘贴的长字符串转为DataFrame
20220627-11:27:12      eval: trainproc_ratiolist
20220627-11:27:12  删除model_name以#开头的模型信息：['# 模型示例2', '# 流失预警模型_移网', '# 转融合模型_单C', '# 副卡加装模型_移网', '# 套餐高迁模型', '# 流量月包加装模型', '# 终端换机模型', '# 加定向流量包模型', '# 5G加包模型', '# 视频彩铃潜客模型']

20220627-11:27:12  将excel粘贴的长字符串转为DataFrame
20220627-11:27:12      eval: col_out
20220627-11:27:12      eval: dict_sortscore
20220627-11:27:12  
                   转换、检查、纠正field_base
20220627-11:27:12  
                   ------------------------------------------------------------ s_yw_fake ------------------------------------------------------------
20220627-11:27:12  field_base: 96行
20220627-11:27:12  将excel粘贴的长字符串转为DataFrame
20220627-11:27:12      eval: tableXday_desc
20220627-11:27:12      eval: tableXscore_desc
20220627-11:27:12  删除2个available“不可用”字段：['gprs_flow_tnet', 'days_outside']
20220627-11:27:12  field_base: 94行

20220627-11:27:12  删除1个基于“不可用”字段加工的手动衍生_py字段：
                           field_name                    formula
                   58  days_outside_p  days_outside / days_month
20220627-11:27:12  field_base: 93行
20220627-11:27:12  删除1个基于“不可用”字段加工的自动衍生_py字段：['valuecnt__days_outside_p~1']
20220627-11:27:12  field_base: 92行


D:\工作\模型脚本\ModelProject\selfmodule\tablemodule\tablefun.py:113: UserWarning: 确定下列时长类字段的renmark是否限制 ‘不参与近n月自动衍生’：
                     field_name                   comment remark
14  monthsaready_last_stop_date  最后停机时间：已发生时长    NaN
15  monthsremain_last_stop_date    最后停机时间：剩余时长    NaN
  warnings.warn(s)
20220627-11:27:12  模型示例
20220627-11:27:12  ------------------------------------------------------------------------------------------------------------------------                    

20220627-11:27:12  infos中不包括freq_limit， 统一赋值为默认值：0.95
20220627-11:27:12  infos中不包括unique_limit， 统一赋值为默认值：5000
20220627-11:27:12  infos中不包括valuecount_limit， 统一赋值为默认值：50
20220627-11:27:12  infos中不包括random_state， 统一赋值为默认值：None
20220627-11:27:12  infos中不包括n_recent， 统一赋值为默认值：3
20220627-11:27:12  将excel粘贴的长字符串转为DataFrame
20220627-11:27:12      eval: trainproc_ratiolist
20220627-11:27:12  保留model_name以#开头的模型信息，并替换掉#字符

20220627-11:27:12  将excel粘贴的长字符串转为DataFrame
20220627-11:27:12      eval: col_out
20220627-11:27:12      eval: dict_sortscore
20220627-11:27:12  
                   转换、检查、纠正field_base
20220627-11:27:12  
                   ------------------------------------------------------------ s_yw_fake ------------------------------------------------------------
20220627-11:27:12  field_base: 96行
20220627-11:27:12  将excel粘贴的长字符串转为DataFrame
20220627-11:27:12      eval: tableXday_desc
20220627-11:27:12      eval: tableXscore_desc
20220627-11:27:12  删除2个available“不可用”字段：['gprs_flow_tnet', 'days_outside']
20220627-11:27:12  field_base: 94行

20220627-11:27:12  删除1个基于“不可用”字段加工的手动衍生_py字段：
                           field_name                    formula
                   58  days_outside_p  days_outside / days_month
20220627-11:27:12  field_base: 93行
20220627-11:27:12  删除1个基于“不可用”字段加工的自动衍生_py字段：['valuecnt__days_outside_p~1']
20220627-11:27:12  field_base: 92行


D:\工作\模型脚本\ModelProject\selfmodule\tablemodule\tablefun.py:113: UserWarning: 确定下列时长类字段的renmark是否限制 ‘不参与近n月自动衍生’：
                     field_name                   comment remark
14  monthsaready_last_stop_date  最后停机时间：已发生时长    NaN
15  monthsremain_last_stop_date    最后停机时间：剩余时长    NaN
  warnings.warn(s)
20220627-11:27:12  模型示例
20220627-11:27:12  模型示例2
20220627-11:27:12  
                   ------------------------------------------------------------ s_yw_team ------------------------------------------------------------
20220627-11:27:13  field_base: 374行
20220627-11:27:13  将excel粘贴的长字符串转为DataFrame
20220627-11:27:13      eval: tableXday_desc
20220627-11:27:13      eval: tableXscore_desc
20220627-11:27:13  删除81个available“不可用”字段：['dev_channel_name_teamzk', 'age_teamzk', 'sex_teamzk', 'stop_times_teamadd', 'resent_stop_date_teammax', 'is_real_name_teamzk', 'family_form_ersj_teamzk', 'family_form_skzj_teamzk', 'family_form_unknown_teamzk', 'family_prop_child_teamzk', 'family_prop_elder_teamzk', 'family_prop_unknown_teamzk', 'family_type_teamzk', 'comp_wf_num_teamzk', 'comp_kj_num_teamzk', 'track_eff_date_teamzk', 'track_exp_date_teamzk', 'pack_month_flow_num_m_teamadd', 'pack_month_flow_sum_m_teamadd', 'pack_month_flow_exp_date_teamzk', 'pack_directed_num_m_teamadd', 'pack_directed_sum_m_teamadd', 'pack_directed_exp_date_teamzk', 'pack_5g_internet_free_num_m_teamadd', 'pack_5g_internet_exp_date_teamzk', 'pack_spcl_free_num_m_teamadd', 'pack_spcl_exp_date_teamzk', 'pack_spcl_6_month_teammax', 'point_teamzk', 'star_teamzk', 'basic_credit_teamzk', 'quota_teamzk', 'is_lh_teamzk', 'lh_type_teamzk', 'is_bxl_teamzk', 'bxl_deal_times_teamzk', 'is_deal_bxl_teamzk', 'pack_bxl_num_teamzk', 'owe_flag_teamzk', 'owe_charge_teamadd', 'owe_times_teamadd', 'last_owe_month_teammax', 'last_owe_charge_teamzk', 'owe_charge_acct_teamadd', 'payment_fee_teamzk', 'balance_teamadd', 'flux_fee_teamadd', 'sms_fee_teamadd', 'ram_teamzk', 'main_camera_teamzk', 'ram_1_teamzk', 'main_camera_1_teamzk', 'ram_2_teamzk', 'main_camera_2_teamzk', 'roam_out_dur_teamadd', 'roam_out_days_teammax', 'ct_calling_dur_teamadd', 'ct_cnt_teamadd', 'ct_calling_cnt_teamadd', 'wj_calling_dur_teamadd', 'wj_cnt_teamadd', 'wj_calling_cnt_teamadd', 'jwq_num_teamadd', 'jwq_ct_num_teamadd', 'jwq_wj_num_teamadd', 'jwq_calling_num_teamadd', 'jwq_ct_calling_num_teamadd', 'jwq_wj_calling_num_teamadd', 'jwq_called_num_teamadd', 'jwq_ct_called_num_teamadd', 'jwq_wj_called_num_teamadd', 'last_to_acct_flux_teamzk', 'acct_to_next_flux_teamadd', 'int_flux_teamadd', 'int_flux_days_teammax', 'normal_flux_teamadd', 'normal_flux_days_teammax', 'night_flux_teamadd', 'night_flux_days_teammax', 'self_scs_tsbz_cnt_teamadd', 'call_turn_cnt_teamadd']
20220627-11:27:13  field_base: 293行

20220627-11:27:13  删除19个基于“不可用”字段加工的手动衍生_py字段：
                                                         field_name                                            formula
                   19         monthsaready_resent_stop_date_teammax            current_date - resent_stop_date_teammax
                   75            monthsaready_track_eff_date_teamzk               current_date - track_eff_date_teamzk
                   77            monthsremain_track_exp_date_teamzk               track_exp_date_teamzk - current_date
                   105              monthsremain_pack_spcl_exp_date           pack_spcl_exp_date_teamzk - current_date
                   123          monthsaready_last_owe_month_teammax              current_date - last_owe_month_teammax
                   133                               arpu_teamadd_p                     arpu_teamadd / balance_teamadd
                   223                      roam_out_days_teammax_p                 roam_out_days_teammax / days_month
                   261                      int_flux_days_teammax_p                 int_flux_days_teammax / days_month
                   266                   normal_flux_days_teammax_p              normal_flux_days_teammax / days_month
                   269                    night_flux_days_teammax_p               night_flux_days_teammax / days_month
                   276                       mbl_out_flow_teamadd_p            flux_fee_teamadd / mbl_out_flow_teamadd
                   288  add_prodspecfluw_packflowsum_lasttoacctflux  prod_spec_fluw_teamzk + pack_flow_sum_teamadd ...
                   291                         data_flux_teamadd_p3  data_flux_teamadd / add_prodspecfluw_packflows...
                   332           spec_pre025_comp_wf_num_teamzk_sub  spec_pre025_comp_wf_num_teamzk - comp_wf_num_t...
                   333            spec_pre05_comp_wf_num_teamzk_sub  spec_pre05_comp_wf_num_teamzk - comp_wf_num_te...
                   334              spec_max_comp_wf_num_teamzk_sub   spec_max_comp_wf_num_teamzk - comp_wf_num_teamzk
                   338           spec_pre025_comp_kj_num_teamzk_sub  spec_pre025_comp_kj_num_teamzk - comp_kj_num_t...
                   339            spec_pre05_comp_kj_num_teamzk_sub  spec_pre05_comp_kj_num_teamzk - comp_kj_num_te...
                   340              spec_max_comp_kj_num_teamzk_sub   spec_max_comp_kj_num_teamzk - comp_kj_num_teamzk
20220627-11:27:13  field_base: 274行
20220627-11:27:13  流失预警模型_移网
20220627-11:27:13  转融合模型_单C
20220627-11:27:13  副卡加装模型_移网
20220627-11:27:13  套餐高迁模型
20220627-11:27:13  流量月包加装模型
20220627-11:27:13  终端换机模型
20220627-11:27:13  加定向流量包模型
20220627-11:27:13  5G加包模型
20220627-11:27:13  视频彩铃潜客模型
20220627-11:27:13  ------------------------------------------------------------------------------------------------------------------------                    

20220627-11:27:13  infos中不包括freq_limit， 统一赋值为默认值：0.95
20220627-11:27:13  infos中不包括unique_limit， 统一赋值为默认值：5000
20220627-11:27:13  infos中不包括valuecount_limit， 统一赋值为默认值：50
20220627-11:27:13  infos中不包括random_state， 统一赋值为默认值：None
20220627-11:27:13  infos中不包括n_recent， 统一赋值为默认值：3
20220627-11:27:21  
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 模型宽表探索 & 训练集、测试集加工 & 训练测试过程 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20220627-11:27:21  ################################################################################ 模型示例 ################################################################################
20220627-11:27:21  日志文件：./binaryclassify/eg/traintest~202010~202012/log/eg_traintest~202010~202012~20220627112721.txt

                                      ###################################################################### 加工训练账期近n月基础数据
                                       
20220627-11:27:21  20220627-11:27:21  开始时间：2022-06-27 11:27:21
20220627-11:27:21  20220627-11:27:21  ---- month: 202010
20220627-11:27:21  20220627-11:27:21  ---- 参数设置：
                                          ---- step: train
                                          ---- Info.model_name: 模型示例
                                          ---- Info.n_recent: 3
                                          ---- Info.Pcase_limit: 1000
                                          ---- Info.traintable_ratio: 2
                                          ---- Info.Pcumsum_limit: 2
                                          ---- Info.timein_count: 500

                                      ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220627-11:27:21  20220627-11:27:21  检查 kehujingyingbudb.ml_xy_eg_m
20220627-11:27:21  20220627-11:27:21      78 列
20220627-11:27:22  20220627-11:27:22      202010账期： 15000行
20220627-11:27:22  20220627-11:27:22      202009账期： 18000行
20220627-11:27:22  20220627-11:27:22      202008账期： 10000行


20220627-11:27:22  20220627-11:27:22  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.ml_xy_eg_m  group by flag_eg
20220627-11:27:22  20220627-11:27:22      dis_train_total: {'count': 68000, 'Pcount': 8036, 'prop': 0.118}



20220627-11:27:22  20220627-11:27:22  ---- 建表语句（限定202010账期当月目标用户）：
                                          drop table if exists kehujingyingbudb.mid_eg_model_train_202010;
                                          select pg_sleep(5);
                                          create  table kehujingyingbudb.mid_eg_model_train_202010 as 
                                          select acct_month, user_id, flag_eg ,row_number() over(order by acct_month desc, random()) rnself 
                                          from kehujingyingbudb.ml_xy_eg_m
                                          where acct_month>=202008 and acct_month<=202010 and user_status='在网-正常' and 
                                              phone_no_null is null and
                                              last_stop_date is not null and
                                              innet_months >= 3 
                                           and flag_eg is not null;
20220627-11:27:27  20220627-11:27:27      sql执行完毕
20220627-11:27:27  20220627-11:27:27  统计kehujingyingbudb.mid_eg_model_train_202010行列数
20220627-11:27:27  20220627-11:27:27      行数：{'202009': 15048, '202010': 12449}
                                          列数：4


20220627-11:27:27  20220627-11:27:27  ---- 建表语句（划分训练/验证数据集）：
                                          drop table if exists kehujingyingbudb.mid_eg_user_train_202010;
                                          create  table kehujingyingbudb.mid_eg_user_train_202010 as 
                                          (select acct_month user_acct_month, 'data_timein' data_use, * from kehujingyingbudb.mid_eg_model_train_202010 where rnself <= 500)
                                          union all
                                          (select acct_month user_acct_month, 'data_train'  data_use, * from kehujingyingbudb.mid_eg_model_train_202010 where rnself > 500 and flag_eg=1 order by rnself limit 1000)
                                          union all
                                          (select acct_month user_acct_month, 'data_train'  data_use, * from kehujingyingbudb.mid_eg_model_train_202010 where rnself > 500 and flag_eg=0 order by rnself limit 2000) ;
20220627-11:27:27  20220627-11:27:27      sql执行完毕
20220627-11:27:27  20220627-11:27:27  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.mid_eg_user_train_202010  group by flag_eg
20220627-11:27:27  20220627-11:27:27      dis_train_sample {'count': 3500, 'Pcount': 1073, 'prop': 0.307}



20220627-11:27:27  20220627-11:27:27  ---- 关联近n月数据：
                                          drop table if exists kehujingyingbudb.mid_eg_recent_train_202010;
                                          create  table kehujingyingbudb.mid_eg_recent_train_202010 as
                                          select user_acct_month, data_use, acct_month, phone_no_null, phone_no_tm, user_id, dinner_id, account_id, innet_date, innet_months, age, sex, age_add, sex_add, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg, score_flag_eg, score_flag_eg2 
                                          from (
                                          select a.user_acct_month, a.data_use, b.*
                                          from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_timein') a
                                          inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202008 and acct_month<=202010) b on a.user_id = b.user_id
                                          union all 
                                          select a.user_acct_month, a.data_use, b.*
                                          from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_train' and acct_month=202008) a
                                          inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202006 and acct_month<=202008) b on a.user_id = b.user_id
                                          union all
                                          select a.user_acct_month, a.data_use, b.*
                                          from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_train' and acct_month=202009) a
                                          inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202007 and acct_month<=202009) b on a.user_id = b.user_id
                                          union all
                                          select a.user_acct_month, a.data_use, b.*
                                          from (select * from kehujingyingbudb.mid_eg_user_train_202010 where data_use='data_train' and acct_month=202010) a
                                          inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202008 and acct_month<=202010) b on a.user_id = b.user_id
                                          ) t;
20220627-11:27:28  20220627-11:27:28      sql执行完毕
20220627-11:27:28  20220627-11:27:28  统计kehujingyingbudb.mid_eg_recent_train_202010行列数
20220627-11:27:28  20220627-11:27:28      9298行，78列

                                      --------------------------------- 核验各账期数据量  ---------------------------------------------- 
20220627-11:27:28  20220627-11:27:28  sql语句：
                                          select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                                          from kehujingyingbudb.mid_eg_recent_train_202010 
                                          group by user_acct_month, data_use, acct_month, flag_eg 
                                          order by user_acct_month, data_use, acct_month, flag_eg

20220627-11:27:28  20220627-11:27:28  结果：
                                         user_acct_month     data_use  acct_month  flag_eg  count
                                      0           202010  data_timein      202008      NaN    318
                                      1           202010  data_timein      202009      0.0    427
                                      2           202010  data_timein      202009      1.0     73
                                      3           202010  data_timein      202010      0.0    427
                                      4           202010  data_timein      202010      1.0     73
                                      5           202010   data_train      202008      NaN   1980
                                      6           202010   data_train      202009      0.0   2000
                                      7           202010   data_train      202009      1.0   1000
                                      8           202010   data_train      202010      0.0   2000
                                      9           202010   data_train      202010      1.0   1000




D:\工作\模型脚本\ModelProject\selfmodule\tablemodule\tablefun.py:900: UserWarning: 下列账期用户量不同，请检查！
                             acct_month  flag_eg  count
user_acct_month data_use                               
202010          data_timein      202008      0.0    318
                data_timein      202009      1.0    500
                data_timein      202010      1.0    500
                data_train       202008      0.0   1980
                data_train       202009      1.0   3000
                data_train       202010      1.0   3000
  warnings.warn(w); time.sleep(seconds)
20220627-11:27:31  20220627-11:27:31  
                                      ---- 删除中间表
20220627-11:27:31  20220627-11:27:31  drop table if exists kehujingyingbudb.mid_eg_model_train_202010;
20220627-11:27:31  20220627-11:27:31      sql执行完毕
20220627-11:27:31  20220627-11:27:31  drop table if exists kehujingyingbudb.mid_eg_user_train_202010;
20220627-11:27:31  20220627-11:27:31      sql执行完毕

20220627-11:27:31  20220627-11:27:31  ---- 返回结果表名：kehujingyingbudb.mid_eg_recent_train_202010
20220627-11:27:31  20220627-11:27:31  ---- 将Info保存至./binaryclassify/eg/traintest~202010~202012/Info~base_train.pkl

20220627-11:27:31  20220627-11:27:31  结束时间：2022-06-27 11:27:31
20220627-11:27:31  20220627-11:27:31  耗时：10 s

                                      ###################################################################### 探索模型宽表
                                       
20220627-11:27:31  20220627-11:27:31  开始时间：2022-06-27 11:27:31
20220627-11:27:31  20220627-11:27:31  参数设置：
                                          stage: explore
                                          Info.r_limit: 0.95
                                          Info.model_name: 模型示例
                                          Info.auto_pair2: False
                                          step: train
                                          table_in: kehujingyingbudb.mid_eg_recent_train_202010
                                          Info.iv_limit: 0.05

20220627-11:27:31  20220627-11:27:31  field_base: 92行

20220627-11:27:31  20220627-11:27:31  删除7个available_notzd“不可用”字段：['cred_type', 'called_dura', 'days_roam', 'dayvalue_calling_dura', 'dayvalue_gprs_flow', 'dayvalue_user_status', 'dayvalue_phone_no_null']
20220627-11:27:31  20220627-11:27:31  field_base: 85行

20220627-11:27:31  20220627-11:27:31  删除1个基于“不可用”字段加工的手动衍生_py字段：
                                           field_name                 formula
                                      54  days_roam_p  days_roam / days_month
20220627-11:27:31  20220627-11:27:31  field_base: 84行
20220627-11:27:31  20220627-11:27:31  ------------------------- 读取数据: kehujingyingbudb.mid_eg_recent_train_202010 2022-06-27 11:27:31 -------------------------
20220627-11:27:31  20220627-11:27:31      src: gp
20220627-11:27:31  20220627-11:27:31      condition: data_use='data_train'
20220627-11:27:31  20220627-11:27:31      col_need(71): ['user_acct_month', 'data_use', 'acct_month', 'user_id', 'innet_months', 'age', 'age_add', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'score_flag_eg', 'score_flag_eg2', 'innet_date', 'last_stop_date', 'phone_no_null', 'phone_no_tm', 'dinner_id', 'account_id', 'sex', 'sex_add', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220627-11:27:31  20220627-11:27:31      col_del: None
20220627-11:27:31  20220627-11:27:31      col_char(22): ['acct_month', 'phone_no_null', 'phone_no_tm', 'user_id', 'dinner_id', 'account_id', 'sex', 'sex_add', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220627-11:27:31  20220627-11:27:31      col_num(45): ['innet_months', 'age', 'age_add', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'score_flag_eg', 'score_flag_eg2']
20220627-11:27:31  20220627-11:27:31      col_date(2): ['innet_date', 'last_stop_date']
20220627-11:27:31  20220627-11:27:31      nrows: None
20220627-11:27:31  20220627-11:27:31      if_coltolower: True
20220627-11:27:31  20220627-11:27:31      kwargs: {}

20220627-11:27:32  20220627-11:27:32      读取
20220627-11:27:35  20220627-11:27:35      shape: (7980, 71)

20220627-11:27:35  20220627-11:27:35  将score_flag_eg2字段类型(object): .astype(float)
20220627-11:27:35  20220627-11:27:35  -------------------------读取完毕: (7980, 71) 2022-06-27 11:27:35 -------------------------

20220627-11:27:35  20220627-11:27:35  手动衍生_py12个字段: {'monthsaready_last_stop_date': '最后停机时间：已发生时长', 'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_gprs_p': '上网天数占比', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好', 'paste_dinner_innet_months': '主套餐、入网时长：交叉', 'ago_score_flag_eg': '模型示例的分数(历史)', 'ago_score_flag_eg2': '模型示例2的分数(历史)'}
20220627-11:27:35  20220627-11:27:35  monthsaready_last_stop_date: current_date - last_stop_date
20220627-11:27:35  20220627-11:27:35  monthsremain_last_stop_date: last_stop_date - current_date
20220627-11:27:35  20220627-11:27:35  days_gprs_p: days_gprs / days_month
20220627-11:27:35  20220627-11:27:35  days_call_p: days_call / days_month
20220627-11:27:35  20220627-11:27:35  days_call_p_1: days_call_p + days_gprs
20220627-11:27:35  20220627-11:27:35  days_call_p_2: days_call_p_1 + days_gprs
20220627-11:27:35  20220627-11:27:35  days_call_p_3: days_call_p_2 + days_gprs
20220627-11:27:35  20220627-11:27:35  days_call_p_4: days_call_p_3 + days_gprs
20220627-11:27:35  20220627-11:27:35  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220627-11:27:37  20220627-11:27:37  paste_dinner_innet_months: (dinner, innet_months)
20220627-11:27:40  20220627-11:27:40  ago_score_flag_eg: {'notago_tovalue': 1}
20220627-11:27:40  20220627-11:27:40  ago_score_flag_eg2: {'notago_tovalue': 1}
20220627-11:27:40  20220627-11:27:40  数据量: (7980, 83)

20220627-11:27:40  20220627-11:27:40  检查数据
20220627-11:27:40  20220627-11:27:40  各账期数据量分布：
                                          202008  data_train    1980
                                          202009  data_train    3000
                                          202010  data_train    3000
                                          dtype: int64
20220627-11:27:40  20220627-11:27:40  各账期数据量不一致
20220627-11:27:40  20220627-11:27:40  以nan填充缺少账期的记录
20220627-11:27:41  20220627-11:27:41      修改后：
                                          202008  data_train    3000
                                          202009  data_train    3000
                                          202010  data_train    3000
                                          dtype: int64)
20220627-11:27:41  20220627-11:27:41  
                                      diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！

20220627-11:27:41  20220627-11:27:41  字段类型分布: 
                                          float64    55
                                          object    26
                                          datetime64[ns]    2
                                          dtype: int64


20220627-11:27:47  20220627-11:27:47  填充数值型&类别型字段缺失值
20220627-11:27:47  20220627-11:27:47  日期型字段缺失值情况：
                                          innet_date    1020
                                          last_stop_date    1020
                                          dtype: int64

20220627-11:27:47  20220627-11:27:47  正负例分布：
                                          data_train  202010  0    2000
                                          data_train  202010  1    1000
                                          dtype: int64

                                      ----------------------------------------- 当月 数值型&类别型 原始数据 
20220627-11:27:47  20220627-11:27:47  新数据newdata的shape：(3000, 77)
20220627-11:27:47  20220627-11:27:47  数据转换
20220627-11:27:55  20220627-11:27:55  转换后shape：(3000, 28)
20220627-11:27:55  20220627-11:27:55  从流水线中获取WoeTransformer_DF
20220627-11:27:55  20220627-11:27:55  首个数据集，直接返回woe编码结果
20220627-11:27:55  20220627-11:27:55  筛选衍生字段的 原始/手动衍生_sql 字段
20220627-11:27:55  20220627-11:27:55  数值型字段：有效字段24个，其中当月自动衍生字段23个，近n月自动衍生字段24个
20220627-11:27:55  20220627-11:27:55  类别型字段：有效字段4个（强制加入0个）:
20220627-11:27:55  20220627-11:27:55      当月自动衍生_py字段4个: ['sex_add~女', 'sex_add~男', 'if_nolimit~是', 'if_5g_dinner~是']
20220627-11:27:55  20220627-11:27:55      近n月自动衍生_py字段4个: ['sex_add~女', 'sex_add~男', 'if_nolimit~是', 'if_5g_dinner~是']

                                      ----------------------------------------- 近n月 数值型 近3月均值 
20220627-11:27:55  20220627-11:27:55  字段个数：24, 添加字段：['flag_eg']
20220627-11:27:55  20220627-11:27:55  新数据newdata的shape：(3000, 25)
20220627-11:27:55  20220627-11:27:55  数据转换
20220627-11:28:01  20220627-11:28:01  转换后shape：(3000, 23)
20220627-11:28:01  20220627-11:28:01  从流水线中获取WoeTransformer_DF
20220627-11:28:02  20220627-11:28:02  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有0对
20220627-11:28:02  20220627-11:28:02      无需剔除
20220627-11:28:02  20220627-11:28:02  已有宽表shape：(3000, 28)
20220627-11:28:02  20220627-11:28:02  向宽表中加入字段（23个）：['avg__gprs_last_defer', 'avg__call_use', 'avg__calling_cnt', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__nos_call', 'avg__gprs_flow_roam', 'avg__dinner_fee', 'avg__gprs_flow_commu', 'avg__gprs_flow_short', 'avg__call_dura_roam', 'avg__gprs_resource', 'avg__nos_calling_diff', 'avg__calling_diff_cnt', 'avg__calling_diff_dura', 'avg__gprs_flow_5g', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__gprs_flow_game', 'avg__nos_calling', 'avg__gprs_now_rest', 'avg__calling_dura', 'avg__gprs_flow_music']
20220627-11:28:02  20220627-11:28:02  从宽表中删除字段（0个）：[]
20220627-11:28:02  20220627-11:28:02  目前宽表shape：(3000, 51)

                                      ----------------------------------------- 近n月 数值型 近3月离散系数 
20220627-11:28:02  20220627-11:28:02  字段个数：24, 添加字段：['flag_eg']
20220627-11:28:02  20220627-11:28:02  新数据newdata的shape：(3000, 25)
20220627-11:28:02  20220627-11:28:02  数据转换
20220627-11:28:07  20220627-11:28:07  转换后shape：(3000, 11)
20220627-11:28:07  20220627-11:28:07  从流水线中获取WoeTransformer_DF
20220627-11:28:08  20220627-11:28:08  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有1对
20220627-11:28:08  20220627-11:28:08      从中二者中剔除字段1个字段:['sep__gprs_flow_game']
20220627-11:28:08  20220627-11:28:08      其中待新增中剔除1个
20220627-11:28:08  20220627-11:28:08      其中原宽表中剔除0个

20220627-11:28:08  20220627-11:28:08  已有宽表shape：(3000, 51)
20220627-11:28:08  20220627-11:28:08  向宽表中加入字段（10个）：['sep__gprs_flow_video', 'sep__gprs_flow_short', 'sep__gprs_now_rest', 'sep__calling_diff_dura', 'sep__calling_dura', 'sep__gprs_flow_5g', 'sep__calling_diff_cnt', 'sep__nos_calling', 'sep__gprs_flow_music', 'sep__gprs_flow_commu']
20220627-11:28:08  20220627-11:28:08  从宽表中删除字段（0个）：[]
20220627-11:28:08  20220627-11:28:08  目前宽表shape：(3000, 61)

                                      ----------------------------------------- 近n月 数值型 近3月波动性 
20220627-11:28:08  20220627-11:28:08  字段个数：24, 添加字段：['flag_eg']
20220627-11:28:08  20220627-11:28:08  新数据newdata的shape：(3000, 25)
20220627-11:28:08  20220627-11:28:08  数据转换
20220627-11:28:12  20220627-11:28:12  转换后shape：(3000, 7)
20220627-11:28:12  20220627-11:28:12  从流水线中获取WoeTransformer_DF
20220627-11:28:13  20220627-11:28:13  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有5对
20220627-11:28:13  20220627-11:28:13      从中二者中剔除字段5个字段:['wave__gprs_flow_game', 'wave__gprs_flow_5g', 'wave__gprs_flow_commu', 'sep__gprs_flow_short', 'sep__gprs_flow_video']
20220627-11:28:13  20220627-11:28:13      其中待新增中剔除3个
20220627-11:28:13  20220627-11:28:13      其中原宽表中剔除2个

20220627-11:28:13  20220627-11:28:13  已有宽表shape：(3000, 61)
20220627-11:28:13  20220627-11:28:13  向宽表中加入字段（4个）：['wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_now_rest', 'wave__gprs_flow_video']
20220627-11:28:13  20220627-11:28:13  从宽表中删除字段（2个）：['sep__gprs_flow_video', 'sep__gprs_flow_short']
20220627-11:28:13  20220627-11:28:13  目前宽表shape：(3000, 63)

                                      ----------------------------------------- 近n月 数值型 近3月成长率 
20220627-11:28:13  20220627-11:28:13  字段个数：24, 添加字段：['flag_eg']
20220627-11:28:13  20220627-11:28:13  新数据newdata的shape：(3000, 25)
20220627-11:28:13  20220627-11:28:13  数据转换
20220627-11:28:18  20220627-11:28:18  转换后shape：(3000, 15)
20220627-11:28:18  20220627-11:28:18  从流水线中获取WoeTransformer_DF
20220627-11:28:19  20220627-11:28:19  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有8对
20220627-11:28:19  20220627-11:28:19      从中二者中剔除字段8个字段:['grow__call_dura_roam', 'grow__gprs_flow_short', 'grow__gprs_flow_music', 'grow__nos_calling_diff', 'gprs_flow_game', 'grow__arpu', 'avg__gprs_now_defer', 'grow__gprs_flow_commu']
20220627-11:28:19  20220627-11:28:19      其中待新增中剔除6个
20220627-11:28:19  20220627-11:28:19      其中原宽表中剔除2个

20220627-11:28:19  20220627-11:28:19  已有宽表shape：(3000, 63)
20220627-11:28:19  20220627-11:28:19  向宽表中加入字段（9个）：['grow__calling_diff_dura', 'grow__gprs_flow_5g', 'grow__gprs_resource', 'grow__gprs_flow_game', 'grow__gprs_now_rest', 'grow__call_use', 'grow__gprs_now_defer', 'grow__gprs_flow_video', 'grow__gprs_flow_roam']
20220627-11:28:19  20220627-11:28:19  从宽表中删除字段（2个）：['gprs_flow_game', 'avg__gprs_now_defer']
20220627-11:28:19  20220627-11:28:19  目前宽表shape：(3000, 70)

                                      ----------------------------------------- 近n月 数值型 近3月最大值 
20220627-11:28:19  20220627-11:28:19  字段个数：24, 添加字段：['flag_eg']
20220627-11:28:19  20220627-11:28:19  新数据newdata的shape：(3000, 25)
20220627-11:28:19  20220627-11:28:19  数据转换
20220627-11:28:24  20220627-11:28:24  转换后shape：(3000, 24)
20220627-11:28:24  20220627-11:28:24  从流水线中获取WoeTransformer_DF
20220627-11:28:27  20220627-11:28:27  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有6对
20220627-11:28:27  20220627-11:28:27      从中二者中剔除字段6个字段:['max__days_call_p_4', 'max__gprs_flow_game', 'dinner_fee', 'avg__gprs_flow_5g', 'max__gprs_flow_video', 'call_use']
20220627-11:28:27  20220627-11:28:27      其中待新增中剔除3个
20220627-11:28:27  20220627-11:28:27      其中原宽表中剔除3个

20220627-11:28:27  20220627-11:28:27  已有宽表shape：(3000, 70)
20220627-11:28:27  20220627-11:28:27  向宽表中加入字段（21个）：['max__dinner_fee', 'max__nos_calling', 'max__calling_diff_dura', 'max__arpu', 'max__gprs_flow_roam', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__gprs_flow_music', 'max__calling_cnt', 'max__call_use', 'max__gprs_flow_5g', 'max__gprs_now_defer', 'max__gprs_resource', 'max__gprs_flow_short', 'max__gprs_last_defer', 'max__gprs_flow_commu', 'max__gprs_flow_busy', 'max__nos_calling_diff', 'max__gprs_now_rest', 'max__nos_call', 'max__calling_dura']
20220627-11:28:27  20220627-11:28:27  从宽表中删除字段（3个）：['call_use', 'dinner_fee', 'avg__gprs_flow_5g']
20220627-11:28:27  20220627-11:28:27  目前宽表shape：(3000, 88)

                                      ----------------------------------------- 近n月 数值型 近3月最小值 
20220627-11:28:27  20220627-11:28:27  字段个数：24, 添加字段：['flag_eg']
20220627-11:28:27  20220627-11:28:27  新数据newdata的shape：(3000, 25)
20220627-11:28:27  20220627-11:28:27  数据转换
20220627-11:28:32  20220627-11:28:32  转换后shape：(3000, 16)
20220627-11:28:32  20220627-11:28:32  从流水线中获取WoeTransformer_DF
20220627-11:28:35  20220627-11:28:35  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有0对
20220627-11:28:35  20220627-11:28:35      无需剔除
20220627-11:28:35  20220627-11:28:35  已有宽表shape：(3000, 88)
20220627-11:28:35  20220627-11:28:35  向宽表中加入字段（16个）：['min__nos_calling', 'min__gprs_flow_roam', 'min__gprs_flow_music', 'min__call_use', 'min__gprs_now_rest', 'min__dinner_fee', 'min__gprs_flow_busy', 'min__gprs_resource', 'min__gprs_flow_commu', 'min__calling_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__arpu', 'min__gprs_flow_short']
20220627-11:28:35  20220627-11:28:35  从宽表中删除字段（0个）：[]
20220627-11:28:35  20220627-11:28:35  目前宽表shape：(3000, 104)

                                      ----------------------------------------- 近n月 数值型 近3月标准差 
20220627-11:28:35  20220627-11:28:35  字段个数：24, 添加字段：['flag_eg']
20220627-11:28:35  20220627-11:28:35  新数据newdata的shape：(3000, 25)
20220627-11:28:35  20220627-11:28:35  数据转换
20220627-11:28:40  20220627-11:28:40  转换后shape：(3000, 22)
20220627-11:28:40  20220627-11:28:40  从流水线中获取WoeTransformer_DF
20220627-11:28:44  20220627-11:28:44  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有5对
20220627-11:28:44  20220627-11:28:44      从中二者中剔除字段5个字段:['std__gprs_flow_music', 'std__gprs_flow_game', 'std__gprs_flow_5g', 'max__gprs_flow_roam', 'std__gprs_flow_short']
20220627-11:28:44  20220627-11:28:44      其中待新增中剔除4个
20220627-11:28:44  20220627-11:28:44      其中原宽表中剔除1个

20220627-11:28:44  20220627-11:28:44  已有宽表shape：(3000, 104)
20220627-11:28:44  20220627-11:28:44  向宽表中加入字段（18个）：['std__gprs_flow_video', 'std__gprs_flow_commu', 'std__nos_calling', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__calling_diff_dura', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_resource', 'std__calling_dura', 'std__call_dura_roam', 'std__nos_call', 'std__gprs_now_rest', 'std__nos_calling_diff', 'std__arpu', 'std__gprs_flow_busy', 'std__dinner_fee', 'std__calling_diff_cnt']
20220627-11:28:44  20220627-11:28:44  从宽表中删除字段（1个）：['max__gprs_flow_roam']
20220627-11:28:44  20220627-11:28:44  目前宽表shape：(3000, 121)

                                      ----------------------------------------- 近n月 数值型 大于x的月份数 
20220627-11:28:44  20220627-11:28:44  ('more0cnt', '近3月大于0的月份数')
20220627-11:28:44  20220627-11:28:44  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220627-11:28:44  20220627-11:28:44  新数据newdata的shape：(3000, 49)
20220627-11:28:44  20220627-11:28:44  数据转换
20220627-11:28:50  20220627-11:28:50  转换后shape：(3000, 12)
20220627-11:28:50  20220627-11:28:50  从流水线中获取WoeTransformer_DF
20220627-11:28:51  20220627-11:28:51  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有3对
20220627-11:28:51  20220627-11:28:51      从中二者中剔除字段3个字段:['moreq25cnt__gprs_flow_game', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__calling_diff_cnt']
20220627-11:28:51  20220627-11:28:51      其中待新增中剔除3个
20220627-11:28:51  20220627-11:28:51      其中原宽表中剔除0个

20220627-11:28:51  20220627-11:28:51  已有宽表shape：(3000, 121)
20220627-11:28:51  20220627-11:28:51  向宽表中加入字段（9个）：['moreq25cnt__gprs_flow_commu', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__arpu', 'more0cnt__calling_dura', 'moreq25cnt__gprs_resource']
20220627-11:28:51  20220627-11:28:51  从宽表中删除字段（0个）：[]
20220627-11:28:51  20220627-11:28:51  目前宽表shape：(3000, 130)

                                      ----------------------------------------- 近n月 类别型 取某值的月份数 
20220627-11:28:51  20220627-11:28:51  字段个数：4, 添加字段：['flag_eg']
20220627-11:28:51  20220627-11:28:51  新数据newdata的shape：(3000, 5)
20220627-11:28:51  20220627-11:28:51  数据转换
20220627-11:28:54  20220627-11:28:54  转换后shape：(3000, 4)
20220627-11:28:55  20220627-11:28:55  从流水线中获取WoeTransformer_DF
20220627-11:28:55  20220627-11:28:55  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有4对
20220627-11:28:55  20220627-11:28:55      从中二者中剔除字段4个字段:['valuecnt__sex_add~女', 'valuecnt__sex_add~男', 'if_nolimit~是', 'if_5g_dinner~是']
20220627-11:28:55  20220627-11:28:55      其中待新增中剔除2个
20220627-11:28:55  20220627-11:28:55      其中原宽表中剔除2个

20220627-11:28:55  20220627-11:28:55  已有宽表shape：(3000, 130)
20220627-11:28:55  20220627-11:28:55  向宽表中加入字段（2个）：['valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
20220627-11:28:55  20220627-11:28:55  从宽表中删除字段（2个）：['if_nolimit~是', 'if_5g_dinner~是']
20220627-11:28:55  20220627-11:28:55  目前宽表shape：(3000, 130)

                                      ----------------------------------------- 汇总最终宽表 
20220627-11:28:55  20220627-11:28:55  计算字段之间的相关性系数
20220627-11:28:55  20220627-11:28:55  
                                          count    8385.0
                                          mean    0.278
                                          std    0.18
                                          min    0.0
                                          25%    0.153
                                          50%    0.232
                                          75%    0.344
                                          max    0.95
                                          dtype: float64

20220627-11:28:55  20220627-11:28:55  iv分布：
                                          count    130.0
                                          mean    0.164
                                          std    0.119
                                          min    0.05
                                          25%    0.074
                                          50%    0.112
                                          75%    0.227
                                          max    0.614
                                          dtype: float64

20220627-11:28:55  20220627-11:28:55  woe_accum(累计)概览：                                                value    0    1       woe  weight  woe_weight  ALL
                                          max__gprs_flow_busy              (3405328.0, inf]  197  383  1.357978  0.2845    0.386345  580
                                          std__gprs_flow_busy              (1905993.0, inf]  180  336  1.317301  0.2460    0.324056  516
                                          more0cnt__gprs_flow_video              (1.5, inf]  214  329  1.123229  0.2220    0.249357  543
                                          moreq25cnt__gprs_flow_video            (1.5, inf]  214  329  1.123229  0.2220    0.249357  543
                                          std__gprs_flow_roam          (186468.835938, inf]  222  319  1.055661  0.2080    0.219577  541

20220627-11:28:55  20220627-11:28:55  最终宽表字段列表col_all:
20220627-11:28:55  20220627-11:28:55      len(col_all): 130
20220627-11:28:55  20220627-11:28:55      补充4个的字段（must_remain=是）：{'gprs_flow_game', 'user_status', 'greatest_gprs_app', 'account_id'}
20220627-11:28:55  20220627-11:28:55      len(col_all): 134
20220627-11:28:55  20220627-11:28:55      补充账期、数据集名称、用户标识等，目标字段(Info.col_mark、Info.col_target)
20220627-11:28:55  20220627-11:28:55      len(col_all): 139

20220627-11:28:55  20220627-11:28:55      补充5个的字段（col_mark、col_target、condition、dict_sortscore、col_out）：{'phone_no_null', 'sms_cnt', 'call_fee_local', 'innet_months', 'last_stop_date'}
20220627-11:28:55  20220627-11:28:55      len(col_all): 144
20220627-11:28:55  20220627-11:28:55  整理宽表数据字典
20220627-11:28:55  20220627-11:28:55  宽表数据字典概览 (144, 16):
                                           是否宽表字段       field_name         comment dtype_db dtype_classify     field_src                                       table available available_notzd available_zd formula          remark must_remain into_model is_cause        base_init
                                                     是  user_acct_month  观察期最后账期      NaN         类别型  手动衍生_sql                                         NaN       NaN             NaN          NaN     NaN             NaN         NaN        NaN      NaN  user_acct_month
                                                     是         data_use      数据集名称      NaN         类别型  手动衍生_sql                                         NaN       NaN             NaN          NaN     NaN             NaN         NaN        NaN      NaN         data_use
                                                     是       acct_month            账期   bigint         类别型  手动衍生_sql  kehujingyingbudb.ml_feature_info_yw_user_m       NaN             NaN          NaN     NaN             NaN         NaN        NaN       否       acct_month
                                                     是    phone_no_null        手机号码  numeric         类别型          原始  kehujingyingbudb.ml_feature_info_yw_user_m       NaN             NaN          NaN     NaN  不参与自动衍生         NaN       删除       否    phone_no_null
                                                     是          user_id        手机号id     text         类别型          原始  kehujingyingbudb.ml_feature_info_yw_user_m       NaN             NaN          NaN     NaN             NaN         NaN        NaN       否          user_id

20220627-11:28:55  20220627-11:28:55  保存Info至：./binaryclassify/eg/traintest~202010~202012/Info~tabexp.pkl
20220627-11:28:55  20220627-11:28:55  结束时间：2022-06-27 11:28:55
20220627-11:28:55  20220627-11:28:55  耗时：83 s




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: opera_pair_fun paste时存在非类别型字段，请确认: ['innet_months']
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: field_base中未包括下列字段，但实际数据 多出：{'data_use', 'user_acct_month'}
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: field_base中未规定下列字段数据类型，请确认默认类型是否正确：{'data_use': 'object', 'user_acct_month': 'object'}
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(3000), 添加unique_limit_actual：len(X)*0.99=2970
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     NumStrSpliter 数据中未出现非数值型字段！
  convert=self.convert_dtype,

                                      ###################################################################### 训练集加工
                                       
20220627-11:28:55  20220627-11:28:55  开始时间：2022-06-27 11:28:55
20220627-11:28:55  20220627-11:28:55  参数设置：
                                          stage: create
                                          Info.r_limit: 0.95
                                          Info.model_name: 模型示例
                                          Info.auto_pair2: False
                                          step: train
                                          table_in: kehujingyingbudb.mid_eg_recent_train_202010
                                          Info.iv_limit: 0.05

20220627-11:28:58  20220627-11:28:58  ------------------------- 读取数据: kehujingyingbudb.mid_eg_recent_train_202010 2022-06-27 11:28:58 -------------------------
20220627-11:28:58  20220627-11:28:58      src: gp
20220627-11:28:58  20220627-11:28:58      condition: None
20220627-11:28:58  20220627-11:28:58      col_need(40): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'innet_months', 'sex_add', 'user_status', 'last_stop_date', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'if_nolimit', 'if_5g_dinner', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'flag_eg']
20220627-11:28:58  20220627-11:28:58      col_del: None
20220627-11:28:58  20220627-11:28:58      col_char(11): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'sex_add', 'user_status', 'if_nolimit', 'if_5g_dinner', 'flag_eg']
20220627-11:28:58  20220627-11:28:58      col_num(28): ['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220627-11:28:58  20220627-11:28:58      col_date(1): ['last_stop_date']
20220627-11:28:58  20220627-11:28:58      nrows: None
20220627-11:28:58  20220627-11:28:58      if_coltolower: True
20220627-11:28:58  20220627-11:28:58      kwargs: {}

20220627-11:28:58  20220627-11:28:58      读取
20220627-11:29:01  20220627-11:29:01      shape: (9298, 40)

20220627-11:29:01  20220627-11:29:01  -------------------------读取完毕: (9298, 40) 2022-06-27 11:29:01 -------------------------

20220627-11:29:01  20220627-11:29:01  手动衍生_py6个字段: {'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好'}
20220627-11:29:01  20220627-11:29:01  days_call_p: days_call / days_month
20220627-11:29:01  20220627-11:29:01  days_call_p_1: days_call_p + days_gprs
20220627-11:29:01  20220627-11:29:01  days_call_p_2: days_call_p_1 + days_gprs
20220627-11:29:01  20220627-11:29:01  days_call_p_3: days_call_p_2 + days_gprs
20220627-11:29:01  20220627-11:29:01  days_call_p_4: days_call_p_3 + days_gprs
20220627-11:29:01  20220627-11:29:01  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220627-11:29:03  20220627-11:29:03  数据量: (9298, 46)

20220627-11:29:03  20220627-11:29:03  检查数据
20220627-11:29:03  20220627-11:29:03  各账期数据量分布：
                                          202008  data_timein    318
                                          202008  data_train    1980
                                          202009  data_timein    500
                                          202009  data_train    3000
                                          202010  data_timein    500
                                          202010  data_train    3000
                                          dtype: int64
20220627-11:29:03  20220627-11:29:03  各账期数据量不一致
20220627-11:29:03  20220627-11:29:03  以nan填充缺少账期的记录
20220627-11:29:03  20220627-11:29:03      修改后：
                                          202008  data_timein    500
                                          202008  data_train    3000
                                          202009  data_timein    500
                                          202009  data_train    3000
                                          202010  data_timein    500
                                          202010  data_train    3000
                                          dtype: int64)
20220627-11:29:03  20220627-11:29:03  
                                      diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！


20220627-11:29:03  20220627-11:29:03  填充数值型&类别型字段缺失值
20220627-11:29:03  20220627-11:29:03  日期型字段缺失值情况：
                                          last_stop_date    1202
                                          dtype: int64

20220627-11:29:03  20220627-11:29:03  正负例分布：
                                          data_timein  202010  0    427
                                          data_timein  202010  1    73
                                          data_train  202010  0    2000
                                          data_train  202010  1    1000
                                          dtype: int64

                                      ----------------------------------------- 当月 类别型 onthot 
20220627-11:29:03  20220627-11:29:03  ['sex_add~女', 'sex_add~男']

                                      ----------------------------------------- 当月 数值型&类别型 原始数据 
20220627-11:29:03  20220627-11:29:03  (3500, 37)
20220627-11:29:03  20220627-11:29:03  筛选衍生字段的 原始/手动衍生_sql 字段

                                      ----------------------------------------- 近n月 数值型 近3月均值 
20220627-11:29:03  20220627-11:29:03  字段个数：21, 添加字段：None
20220627-11:29:03  20220627-11:29:03  (3500, 58)

                                      ----------------------------------------- 近n月 数值型 近3月离散系数 
20220627-11:29:03  20220627-11:29:03  字段个数：8, 添加字段：None
20220627-11:29:03  20220627-11:29:03  (3500, 66)

                                      ----------------------------------------- 近n月 数值型 近3月波动性 
20220627-11:29:03  20220627-11:29:03  字段个数：4, 添加字段：None
20220627-11:29:04  20220627-11:29:04  (3500, 70)

                                      ----------------------------------------- 近n月 数值型 近3月成长率 
20220627-11:29:04  20220627-11:29:04  字段个数：9, 添加字段：None
20220627-11:29:04  20220627-11:29:04  (3500, 79)

                                      ----------------------------------------- 近n月 数值型 近3月最大值 
20220627-11:29:04  20220627-11:29:04  字段个数：20, 添加字段：None
20220627-11:29:04  20220627-11:29:04  (3500, 99)

                                      ----------------------------------------- 近n月 数值型 近3月最小值 
20220627-11:29:04  20220627-11:29:04  字段个数：16, 添加字段：None
20220627-11:29:04  20220627-11:29:04  (3500, 115)

                                      ----------------------------------------- 近n月 数值型 近3月标准差 
20220627-11:29:04  20220627-11:29:04  字段个数：18, 添加字段：None
20220627-11:29:04  20220627-11:29:04  (3500, 133)

                                      ----------------------------------------- 近n月 数值型 大于x的月份数 
20220627-11:29:04  20220627-11:29:04  ('more0cnt', '近3月大于0的月份数')
20220627-11:29:04  20220627-11:29:04  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220627-11:29:04  20220627-11:29:04  (3500, 142)

                                      ----------------------------------------- 近n月 类别型 取某值的月份数 
20220627-11:29:04  20220627-11:29:04  字段个数：2, 添加字段：None
20220627-11:29:04  20220627-11:29:04  (3500, 144)

                                      ----------------------------------------- 汇总最终宽表 
20220627-11:29:04  20220627-11:29:04  table.shape:(3500, 144)

20220627-11:29:04  20220627-11:29:04  保存宽表结果至：./binaryclassify/eg/traintest~202010~202012/train_data~202010.csv

20220627-11:29:04  20220627-11:29:04  计算字段之间的相关性系数
20220627-11:29:04  20220627-11:29:04  
                                          count    8385.0
                                          mean    0.183
                                          std    0.203
                                          min    0.0
                                          25%    0.045
                                          50%    0.114
                                          75%    0.235
                                          max    1.0
                                          dtype: float64


                                      ------------------------------- 计算宽表字段psi ------------------------------------ 
20220627-11:29:04  20220627-11:29:04  训练集 data_train
                                       
                                       20220627-11:29:04  20220627-11:29:04  my toolmodule.dataprep.PsiTransformer_DF fit
                                       20220627-11:29:04  20220627-11:29:04      开始时间：2022-06-27 11:29:04
                                       20220627-11:29:04  20220627-11:29:04      data in : (3000, 134)
                                       20220627-11:29:04  20220627-11:29:04      首次从X获取id_X属性 1582003323064
                                       20220627-11:29:04  20220627-11:29:04      fit轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=False, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                                       20220627-11:29:04  20220627-11:29:04      输入数据中包括131个数值型字段，先对其进行mdlp分箱：['gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
                                       20220627-11:29:04  20220627-11:29:04      ---------------------------Psi: Mdlp_dt_DF start -------------------------------
                                                                                 
                                                                                 20220627-11:29:04  20220627-11:29:04  my toolmodule.dataprep.Mdlp_dt_DF fit_transform
                                                                                 20220627-11:29:04  20220627-11:29:04      开始时间：2022-06-27 11:29:04
                                                                                 20220627-11:29:04  20220627-11:29:04      data in : (3000, 131)
                                                                                     
                                                                                     20220627-11:29:04  20220627-11:29:04  my toolmodule.dataprep.Mdlp_dt_DF fit
                                                                                     20220627-11:29:04  20220627-11:29:04      开始时间：2022-06-27 11:29:04
                                                                                     20220627-11:29:04  20220627-11:29:04      data in : (3000, 131)
                                                                                     20220627-11:29:04  20220627-11:29:04      首次从X获取id_X属性 1582070364200
                                                                                     20220627-11:29:04  20220627-11:29:04      fit轨迹：Mdlp_dt_DF(bin_uplimit=None, if_del=False, min_binsize=30, precision=6, , trans_na_error=True)
                                                                                     20220627-11:29:10  20220627-11:29:10      提取未离散的1字段名（无有效切点）：['grow__gprs_now_rest']
                                                                                     20220627-11:29:10  20220627-11:29:10      结束时间：2022-06-27 11:29:10 耗时(5s)
                                                                                     
                                                                                     20220627-11:29:10  20220627-11:29:10  my toolmodule.dataprep.Mdlp_dt_DF transform
                                                                                     20220627-11:29:10  20220627-11:29:10      开始时间：2022-06-27 11:29:10
                                                                                     20220627-11:29:10  20220627-11:29:10      data in : (3000, 131)
                                                                                     20220627-11:29:10  20220627-11:29:10      self已带有id_X属性 1582070364200
                                                                                     20220627-11:29:10  20220627-11:29:10      首次从X获取id_X_new属性 1582070364200
                                                                                     20220627-11:29:10  20220627-11:29:10      未剔除1个字段：['grow__gprs_now_rest']
                                                                                     20220627-11:29:12  20220627-11:29:12      data out: (3000, 131)
                                                                                     20220627-11:29:12  20220627-11:29:12      transform轨迹：Mdlp_dt_DF(bin_uplimit=None, if_del=False, min_binsize=30, precision=6, , trans_na_error=True)
                                                                                     20220627-11:29:12  20220627-11:29:12      结束时间：2022-06-27 11:29:12 耗时(1s)
                                                                                 
                                                                                 20220627-11:29:12  20220627-11:29:12      my toolmodule.dataprep.Mdlp_dt_DF fit_transform 结束时间：2022-06-27 11:29:12 耗时(7s)
                                       20220627-11:29:12  20220627-11:29:12      ---------------------------Psi: Mdlp_dt_DF end -------------------------------
                                       20220627-11:29:12  20220627-11:29:12      合并离散后的数值字段 与 类别字段：(3000, 134)
                                       20220627-11:29:12  20220627-11:29:12      data_train（初次） 统计频数（区分正负例）：self.col_pop_PN_old_
                                       20220627-11:29:13  20220627-11:29:13      不统计频数（不区分正负例）：训练数据经过抽样，非原始比例，如有需要可自行修改
                                       20220627-11:29:13  20220627-11:29:13      结束时间：2022-06-27 11:29:13 耗时(8s)


20220627-11:29:13  20220627-11:29:13  时间内验证集 data_timein
                                       
                                       20220627-11:29:13  20220627-11:29:13  my toolmodule.dataprep.PsiTransformer_DF transform
                                       20220627-11:29:13  20220627-11:29:13      开始时间：2022-06-27 11:29:13
                                       20220627-11:29:13  20220627-11:29:13      data in : (500, 143)
                                       20220627-11:29:13  20220627-11:29:13      self已带有id_X属性 1582003323064
                                       20220627-11:29:13  20220627-11:29:13      首次从X获取id_X_new属性 1582030842288
                                       20220627-11:29:13  20220627-11:29:13      data in2: (500, 134)
                                       20220627-11:29:13  20220627-11:29:13      对131个数值字段进行分箱：['gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
                                       20220627-11:29:14  20220627-11:29:14      data_timein（初次） 统计频数（不区分正负例）：self.col_pop_all_old_
                                       20220627-11:29:14  20220627-11:29:14      data_timein 计算稳定度（区分正负例）：self.col_psi_PN_
                                       20220627-11:29:27  20220627-11:29:27      data out: (500, 134)
                                       20220627-11:29:27  20220627-11:29:27      transform轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=False, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                                       20220627-11:29:27  20220627-11:29:27      结束时间：2022-06-27 11:29:27 耗时(13s)


20220627-11:29:27  20220627-11:29:27  保存Info至：./binaryclassify/eg/traintest~202010~202012/Info~tabcre_train.pkl
20220627-11:29:27  20220627-11:29:27  结束时间：2022-06-27 11:29:27
20220627-11:29:27  20220627-11:29:27  耗时：31 s




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: stage取值为create时,r_limit, iv_limit参数无效，将被忽略
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例)-正例（1） ['account_id']字段多出371个取值, .head(5):
                      old  new
field      value              
account_id 102150966  NaN  1.0
           102225221  NaN  1.0
           102242668  NaN  1.0
           102299477  NaN  1.0
           103727067  NaN  1.0
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例)-负例（0） ['account_id']字段多出371个取值, .head(5):
                      old  new
field      value              
account_id 102150966  NaN  1.0
           102225221  NaN  1.0
           102242668  NaN  1.0
           102299477  NaN  1.0
           103727067  NaN  1.0
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例) ，3个字段稳定性>=psi_limit（0.1）：
account_id              0.250900
gprs_last_defer         0.182698
min__gprs_last_defer    0.140204
dtype: float64
  convert=self.convert_dtype,

                                      ###################################################################### 加工测试账期近n月基础数据
                                       
20220627-11:29:27  20220627-11:29:27  开始时间：2022-06-27 11:29:27
20220627-11:29:27  20220627-11:29:27  ---- month: 202012
20220627-11:29:27  20220627-11:29:27  ---- 参数设置：
                                          ---- step: test
                                          ---- Info.model_name: 模型示例
                                          ---- Info.n_recent: 3
                                          ---- Info.timeout_limit: 1000
20220627-11:29:27  20220627-11:29:27  ---- field_base中acct_month字段为数值型，Info.Pcase参数取值为<class 'int'>，将Info.Pcase纠正为数值型

                                      ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220627-11:29:27  20220627-11:29:27  检查 kehujingyingbudb.ml_xy_eg_m
20220627-11:29:27  20220627-11:29:27      78 列
20220627-11:29:27  20220627-11:29:27      202012账期： 15000行
20220627-11:29:27  20220627-11:29:27      202011账期： 10000行
20220627-11:29:27  20220627-11:29:27      202010账期： 15000行


20220627-11:29:27  20220627-11:29:27  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.ml_xy_eg_m  group by flag_eg
20220627-11:29:27  20220627-11:29:27      dis_test_total: {'count': 68000, 'Pcount': 8036, 'prop': 0.118}

20220627-11:29:27  20220627-11:29:27  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.ml_xy_eg_m where acct_month=202012 and user_status='在网-正常' and 
                                          phone_no_null is null and
                                          last_stop_date is not null and
                                          innet_months >= 3 
                                       and flag_eg is not null group by flag_eg
20220627-11:29:27  20220627-11:29:27      dis_test_model {'count': 12449, 'Pcount': 1832, 'prop': 0.147}

20220627-11:29:27  20220627-11:29:27      Info无dis_train_model，无法对比dis_train_model与dis_test_model的正例占比变动幅度



20220627-11:29:27  20220627-11:29:27  ---- 建表语句：
                                          drop table if exists kehujingyingbudb.mid_eg_user_test_202012;
                                          create  table kehujingyingbudb.mid_eg_user_test_202012 as 
                                          select acct_month user_acct_month, 'data_timeout' data_use, * from kehujingyingbudb.ml_xy_eg_m 
                                          where acct_month=202012 and user_status='在网-正常' and 
                                              phone_no_null is null and
                                              last_stop_date is not null and
                                              innet_months >= 3 
                                           and flag_eg is not null
                                          order by rn limit 1000;
20220627-11:29:28  20220627-11:29:28      sql执行完毕
20220627-11:29:28  20220627-11:29:28  正负例分布：select cast(flag_eg as text) flag_eg, count(1) from kehujingyingbudb.mid_eg_user_test_202012  group by flag_eg
20220627-11:29:28  20220627-11:29:28      dis_test_sample {'count': 1000, 'Pcount': 149, 'prop': 0.149}

20220627-11:29:28  20220627-11:29:28      dis_test_sample 较 dis_test_model 正例占比 变动幅度1.36054% (0.149 较 0.147)



20220627-11:29:28  20220627-11:29:28  ---- 关联近n月数据：
                                          drop table if exists kehujingyingbudb.mid_eg_recent_test_202012;
                                          create  table kehujingyingbudb.mid_eg_recent_test_202012 as
                                          select user_acct_month, data_use, acct_month, phone_no_null, phone_no_tm, user_id, dinner_id, account_id, innet_date, innet_months, age, sex, age_add, sex_add, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg, score_flag_eg, score_flag_eg2 
                                          from (
                                          select a.user_acct_month, a.data_use, b.*
                                          from (select * from kehujingyingbudb.mid_eg_user_test_202012 where data_use='data_timeout') a
                                          inner join (select * from kehujingyingbudb.ml_xy_eg_m where acct_month>=202010 and acct_month<=202012) b on a.user_id = b.user_id
                                          ) t;
20220627-11:29:28  20220627-11:29:28      sql执行完毕
20220627-11:29:28  20220627-11:29:28  统计kehujingyingbudb.mid_eg_recent_test_202012行列数
20220627-11:29:28  20220627-11:29:28      2636行，78列

                                      --------------------------------- 核验各账期数据量  ---------------------------------------------- 
20220627-11:29:28  20220627-11:29:28  sql语句：
                                          select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                                          from kehujingyingbudb.mid_eg_recent_test_202012 
                                          group by user_acct_month, data_use, acct_month, flag_eg 
                                          order by user_acct_month, data_use, acct_month, flag_eg

20220627-11:29:28  20220627-11:29:28  结果：
                                         user_acct_month      data_use  acct_month  flag_eg  count
                                      0           202012  data_timeout      202010        0    851
                                      1           202012  data_timeout      202010        1    149
                                      2           202012  data_timeout      202011        0    547
                                      3           202012  data_timeout      202011        1     89
                                      4           202012  data_timeout      202012        0    851
                                      5           202012  data_timeout      202012        1    149




D:\工作\模型脚本\ModelProject\selfmodule\tablemodule\tablefun.py:900: UserWarning: 下列账期用户量不同，请检查！
                              acct_month  flag_eg  count
user_acct_month data_use                                
202012          data_timeout      202010        1   1000
                data_timeout      202011        1    636
                data_timeout      202012        1   1000
  warnings.warn(w); time.sleep(seconds)
20220627-11:29:31  20220627-11:29:31  
                                      ---- 删除中间表
20220627-11:29:31  20220627-11:29:31  drop table if exists kehujingyingbudb.mid_eg_user_test_202012;
20220627-11:29:31  20220627-11:29:31      sql执行完毕

20220627-11:29:31  20220627-11:29:31  ---- 返回结果表名：kehujingyingbudb.mid_eg_recent_test_202012
20220627-11:29:31  20220627-11:29:31  ---- 将Info保存至./binaryclassify/eg/traintest~202010~202012/Info~base_test.pkl

20220627-11:29:31  20220627-11:29:31  结束时间：2022-06-27 11:29:31
20220627-11:29:31  20220627-11:29:31  耗时：4 s
                                      ###################################################################### 测试集加工
                                       
20220627-11:29:31  20220627-11:29:31  开始时间：2022-06-27 11:29:31
20220627-11:29:31  20220627-11:29:31  参数设置：
                                          step: test
                                          table_in: kehujingyingbudb.mid_eg_recent_test_202012
                                          stage: create
                                          Info.r_limit: 0.95
                                          Info.model_name: 模型示例
                                          Info.auto_pair2: False
                                          Info.iv_limit: 0.05

20220627-11:29:35  20220627-11:29:35  ------------------------- 读取数据: kehujingyingbudb.mid_eg_recent_test_202012 2022-06-27 11:29:35 -------------------------
20220627-11:29:35  20220627-11:29:35      src: gp
20220627-11:29:35  20220627-11:29:35      condition: None
20220627-11:29:35  20220627-11:29:35      col_need(40): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'innet_months', 'sex_add', 'user_status', 'last_stop_date', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'if_nolimit', 'if_5g_dinner', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'flag_eg']
20220627-11:29:35  20220627-11:29:35      col_del: None
20220627-11:29:35  20220627-11:29:35      col_char(11): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'sex_add', 'user_status', 'if_nolimit', 'if_5g_dinner', 'flag_eg']
20220627-11:29:35  20220627-11:29:35      col_num(28): ['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220627-11:29:35  20220627-11:29:35      col_date(1): ['last_stop_date']
20220627-11:29:35  20220627-11:29:35      nrows: None
20220627-11:29:35  20220627-11:29:35      if_coltolower: True
20220627-11:29:35  20220627-11:29:35      kwargs: {}

20220627-11:29:35  20220627-11:29:35      读取
20220627-11:29:35  20220627-11:29:35      shape: (2636, 40)

20220627-11:29:35  20220627-11:29:35  -------------------------读取完毕: (2636, 40) 2022-06-27 11:29:35 -------------------------

20220627-11:29:35  20220627-11:29:35  手动衍生_py6个字段: {'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好'}
20220627-11:29:35  20220627-11:29:35  days_call_p: days_call / days_month
20220627-11:29:35  20220627-11:29:35  days_call_p_1: days_call_p + days_gprs
20220627-11:29:35  20220627-11:29:35  days_call_p_2: days_call_p_1 + days_gprs
20220627-11:29:35  20220627-11:29:35  days_call_p_3: days_call_p_2 + days_gprs
20220627-11:29:35  20220627-11:29:35  days_call_p_4: days_call_p_3 + days_gprs
20220627-11:29:35  20220627-11:29:35  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220627-11:29:36  20220627-11:29:36  数据量: (2636, 46)

20220627-11:29:36  20220627-11:29:36  检查数据
20220627-11:29:36  20220627-11:29:36  各账期数据量分布：
                                          202010  data_timeout    1000
                                          202011  data_timeout    636
                                          202012  data_timeout    1000
                                          dtype: int64
20220627-11:29:36  20220627-11:29:36  各账期数据量不一致
20220627-11:29:36  20220627-11:29:36  以nan填充缺少账期的记录
20220627-11:29:36  20220627-11:29:36      修改后：
                                          202010  data_timeout    1000
                                          202011  data_timeout    1000
                                          202012  data_timeout    1000
                                          dtype: int64)
20220627-11:29:36  20220627-11:29:36  
                                      diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！


20220627-11:29:36  20220627-11:29:36  填充数值型&类别型字段缺失值
20220627-11:29:36  20220627-11:29:36  日期型字段缺失值情况：
                                          last_stop_date    364
                                          dtype: int64

20220627-11:29:36  20220627-11:29:36  正负例分布：
                                          data_timeout  202012  0    851
                                          data_timeout  202012  1    149
                                          dtype: int64

                                      ----------------------------------------- 当月 类别型 onthot 
20220627-11:29:36  20220627-11:29:36  ['sex_add~女', 'sex_add~男']

                                      ----------------------------------------- 当月 数值型&类别型 原始数据 
20220627-11:29:36  20220627-11:29:36  (1000, 37)
20220627-11:29:36  20220627-11:29:36  筛选衍生字段的 原始/手动衍生_sql 字段

                                      ----------------------------------------- 近n月 数值型 近3月均值 
20220627-11:29:36  20220627-11:29:36  字段个数：21, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 58)

                                      ----------------------------------------- 近n月 数值型 近3月离散系数 
20220627-11:29:36  20220627-11:29:36  字段个数：8, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 66)

                                      ----------------------------------------- 近n月 数值型 近3月波动性 
20220627-11:29:36  20220627-11:29:36  字段个数：4, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 70)

                                      ----------------------------------------- 近n月 数值型 近3月成长率 
20220627-11:29:36  20220627-11:29:36  字段个数：9, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 79)

                                      ----------------------------------------- 近n月 数值型 近3月最大值 
20220627-11:29:36  20220627-11:29:36  字段个数：20, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 99)

                                      ----------------------------------------- 近n月 数值型 近3月最小值 
20220627-11:29:36  20220627-11:29:36  字段个数：16, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 115)

                                      ----------------------------------------- 近n月 数值型 近3月标准差 
20220627-11:29:36  20220627-11:29:36  字段个数：18, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 133)

                                      ----------------------------------------- 近n月 数值型 大于x的月份数 
20220627-11:29:36  20220627-11:29:36  ('more0cnt', '近3月大于0的月份数')
20220627-11:29:36  20220627-11:29:36  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220627-11:29:36  20220627-11:29:36  (1000, 142)

                                      ----------------------------------------- 近n月 类别型 取某值的月份数 
20220627-11:29:36  20220627-11:29:36  字段个数：2, 添加字段：None
20220627-11:29:36  20220627-11:29:36  (1000, 144)

                                      ----------------------------------------- 汇总最终宽表 
20220627-11:29:36  20220627-11:29:36  table.shape:(1000, 144)

20220627-11:29:36  20220627-11:29:36  保存宽表结果至：./binaryclassify/eg/traintest~202010~202012/test_data~202012.csv

20220627-11:29:37  20220627-11:29:37  计算字段之间的相关性系数
20220627-11:29:37  20220627-11:29:37  
                                          count    8385.0
                                          mean    0.189
                                          std    0.211
                                          min    0.0
                                          25%    0.044
                                          50%    0.113
                                          75%    0.248
                                          max    1.0
                                          dtype: float64


                                      ------------------------------- 计算宽表字段psi ------------------------------------ 
                                       
                                       20220627-11:29:37  20220627-11:29:37  my toolmodule.dataprep.PsiTransformer_DF transform
                                       20220627-11:29:37  20220627-11:29:37      开始时间：2022-06-27 11:29:37
                                       20220627-11:29:37  20220627-11:29:37      data in : (1000, 144)
                                       20220627-11:29:37  20220627-11:29:37      self已带有id_X属性 1582003323064
                                       20220627-11:29:37  20220627-11:29:37      首次从X获取id_X_new属性 1582003352408
                                       20220627-11:29:37  20220627-11:29:37      data in2: (1000, 134)
                                       20220627-11:29:37  20220627-11:29:37      对131个数值字段进行分箱：['gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
                                       20220627-11:29:37  20220627-11:29:37      timedata_timeout 计算稳定度（不区分正负例）：self.col_psi_all_
                                       20220627-11:29:44  20220627-11:29:44      data_timeout 计算稳定度（区分正负例）：self.col_psi_PN_
                                       20220627-11:29:57  20220627-11:29:57      data out: (1000, 134)
                                       20220627-11:29:57  20220627-11:29:57      transform轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=False, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                                       20220627-11:29:57  20220627-11:29:57      结束时间：2022-06-27 11:29:57 耗时(20s)
20220627-11:29:57  20220627-11:29:57  保存Psi至：./binaryclassify/eg/traintest~202010~202012/test_Psi~202010~202012.pkl
20220627-11:29:57  20220627-11:29:57  保存dis_exam至：./binaryclassify/eg/traintest~202010~202012/test_dis_exam~202012.pkl
20220627-11:29:57  20220627-11:29:57  结束时间：2022-06-27 11:29:57
20220627-11:29:57  20220627-11:29:57  耗时：25 s




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: stage取值为create时,r_limit, iv_limit参数无效，将被忽略
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer timedata_timeout 计算稳定性(不区分正负例) ['account_id']字段多出732个取值, .head(5):
                      old  new
field      value              
account_id 102196712  NaN  1.0
           102197121  NaN  1.0
           102300686  NaN  1.0
           103604981  NaN  1.0
           103676343  NaN  1.0
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，8个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_defer     0.657437
wave__gprs_flow_video    0.242474
wave__gprs_flow_short    0.185478
sep__gprs_flow_commu     0.151892
grow__gprs_flow_roam     0.136028
wave__gprs_flow_music    0.121354
sep__gprs_flow_music     0.117897
sep__nos_calling         0.105581
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例)-正例（1） ['account_id']字段多出575个取值, .head(5):
                      old  new
field      value              
account_id 102196712  NaN  1.0
           102197121  NaN  1.0
           102300686  NaN  1.0
           103676343  NaN  1.0
           103679195  NaN  1.0
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例)-负例（0） ['account_id']字段多出575个取值, .head(5):
                      old  new
field      value              
account_id 102196712  NaN  1.0
           102197121  NaN  1.0
           102300686  NaN  1.0
           103676343  NaN  1.0
           103679195  NaN  1.0
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例) ，8个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_defer     0.610006
sep__gprs_flow_commu     0.309719
wave__gprs_flow_video    0.252842
wave__gprs_flow_short    0.251709
wave__gprs_flow_music    0.193795
account_id               0.176378
sep__gprs_flow_music     0.171049
sep__nos_calling         0.132904
dtype: float64
  convert=self.convert_dtype,

                                      ###################################################################### 创建数据处理流水线、算法序列
                                       
20220627-11:29:57  20220627-11:29:57  创建数据转换流水线1




D:\工作\模型脚本\ModelProject\selfmodule\toolmodule\dataprep.py:9: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  import time




D:\工作\模型脚本\ModelProject\selfmodule\toolmodule\dataprep.py:9: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  import time
20220627-11:29:57  20220627-11:29:57  创建数据转换流水线2
20220627-11:29:57  20220627-11:29:57  创建数据转换流水线3
20220627-11:29:57  20220627-11:29:57  创建算法序列

                                      ###################################################################### 训练测试过程
                                       
20220627-11:29:57  20220627-11:29:57  开始时间：2022-06-27 11:29:57
20220627-11:29:57  20220627-11:29:57  模型名称：模型示例
20220627-11:29:57  20220627-11:29:57  参数设置：
                                          Info.model_name: 模型示例
                                          Info.trainproc_ratiolist: [1, 2, 10]
                                          field_comment: (144, 16)
                                          Info.freq_limit: 0.95
                                          Info.unique_limit: 5000
                                          Info.iv_limit: 0.05
                                          Info.r_limit: 0.95
                                          Info.random_state: None
20220627-11:29:57  20220627-11:29:57  mark: ~202010~202012
20220627-11:29:57  20220627-11:29:57  目标字段：flag_eg; 正负例取值：1、0
20220627-11:29:57  20220627-11:29:57  field_comment.shape: (144, 16)
20220627-11:29:57  20220627-11:29:57      len(col_need): 144
20220627-11:29:57  20220627-11:29:57      删除field_comment中into_model取值为‘删除’的3个字段：['phone_no_null', 'last_stop_date', 'flag_eg']
20220627-11:29:57  20220627-11:29:57      len(col_need): 144
20220627-11:29:57  20220627-11:29:57      删除Info.col_del中的1个字段：{'user_acct_month'}
20220627-11:29:57  20220627-11:29:57      len(col_need): 143

20220627-11:29:57  20220627-11:29:57      删除Info.supply_other、col_mark中的5个字段：{'phone_no_null', 'sms_cnt', 'call_fee_local', 'innet_months', 'last_stop_date'}
20220627-11:29:57  20220627-11:29:57      len(col_need): 138

20220627-11:29:57  20220627-11:29:57  ------------------------- 读取数据: ./binaryclassify/eg/traintest~202010~202012/train_data~202010.csv 2022-06-27 11:29:57 -------------------------
20220627-11:29:57  20220627-11:29:57      src: file
20220627-11:29:57  20220627-11:29:57      condition: None
20220627-11:29:57  20220627-11:29:57      col_need(138): ['data_use', 'acct_month', 'user_id', 'account_id', 'user_status', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'flag_eg']
20220627-11:29:57  20220627-11:29:57      col_del: None
20220627-11:29:57  20220627-11:29:57      col_char(9): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'user_status', 'greatest_gprs_app', 'flag_eg']
20220627-11:29:57  20220627-11:29:57      col_num(134): ['innet_months', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
20220627-11:29:57  20220627-11:29:57      col_date: None
20220627-11:29:57  20220627-11:29:57      nrows: None
20220627-11:29:57  20220627-11:29:57      if_coltolower: False
20220627-11:29:57  20220627-11:29:57      kwargs: {}

20220627-11:29:57  20220627-11:29:57      读取
20220627-11:29:58  20220627-11:29:58  -------------------------读取完毕: (3500, 138) 2022-06-27 11:29:58 -------------------------

20220627-11:29:58  20220627-11:29:58  ------------------------- 读取数据: ./binaryclassify/eg/traintest~202010~202012/test_data~202012.csv 2022-06-27 11:29:58 -------------------------
20220627-11:29:58  20220627-11:29:58      src: file
20220627-11:29:58  20220627-11:29:58      condition: None
20220627-11:29:58  20220627-11:29:58      col_need(138): ['data_use', 'acct_month', 'user_id', 'account_id', 'user_status', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'flag_eg']
20220627-11:29:58  20220627-11:29:58      col_del: None
20220627-11:29:58  20220627-11:29:58      col_char(9): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'user_status', 'greatest_gprs_app', 'flag_eg']
20220627-11:29:58  20220627-11:29:58      col_num(134): ['innet_months', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'sex_add~女', 'sex_add~男', 'avg__call_use', 'avg__gprs_flow_game', 'avg__calling_diff_dura', 'avg__gprs_now_rest', 'avg__gprs_flow_commu', 'avg__gprs_flow_roam', 'avg__calling_cnt', 'avg__gprs_resource', 'avg__calling_diff_cnt', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__gprs_flow_busy', 'avg__arpu', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__nos_calling', 'avg__gprs_flow_short', 'avg__dinner_fee', 'avg__gprs_flow_video', 'avg__calling_dura', 'avg__nos_call', 'sep__calling_diff_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_commu', 'sep__calling_diff_cnt', 'sep__gprs_flow_5g', 'sep__gprs_flow_music', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_now_rest', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__gprs_flow_video', 'grow__call_use', 'grow__gprs_flow_game', 'grow__calling_diff_dura', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_resource', 'grow__gprs_flow_5g', 'grow__gprs_flow_video', 'grow__gprs_now_defer', 'max__call_use', 'max__calling_diff_dura', 'max__gprs_now_rest', 'max__gprs_flow_commu', 'max__calling_cnt', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__call_dura_roam', 'max__nos_calling_diff', 'max__gprs_flow_5g', 'max__gprs_flow_busy', 'max__arpu', 'max__gprs_last_defer', 'max__gprs_flow_music', 'max__nos_calling', 'max__gprs_flow_short', 'max__dinner_fee', 'max__calling_dura', 'max__gprs_now_defer', 'max__nos_call', 'min__call_use', 'min__calling_diff_dura', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__gprs_flow_roam', 'min__gprs_resource', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__arpu', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__nos_calling', 'min__gprs_flow_short', 'min__dinner_fee', 'min__gprs_flow_video', 'min__calling_dura', 'std__call_use', 'std__calling_diff_dura', 'std__gprs_now_rest', 'std__gprs_flow_commu', 'std__gprs_flow_roam', 'std__calling_cnt', 'std__gprs_resource', 'std__calling_diff_cnt', 'std__call_dura_roam', 'std__nos_calling_diff', 'std__gprs_flow_busy', 'std__arpu', 'std__gprs_last_defer', 'std__nos_calling', 'std__dinner_fee', 'std__gprs_flow_video', 'std__calling_dura', 'std__nos_call', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_resource', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__gprs_flow_video', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是']
20220627-11:29:58  20220627-11:29:58      col_date: None
20220627-11:29:58  20220627-11:29:58      nrows: None
20220627-11:29:58  20220627-11:29:58      if_coltolower: False
20220627-11:29:58  20220627-11:29:58      kwargs: {}

20220627-11:29:58  20220627-11:29:58      读取
20220627-11:29:58  20220627-11:29:58  -------------------------读取完毕: (1000, 138) 2022-06-27 11:29:58 -------------------------

20220627-11:29:58  20220627-11:29:58  合并训练、测试数据
20220627-11:29:58  20220627-11:29:58  data.shape: (4500, 138)

20220627-11:29:58  20220627-11:29:58  数据分布：
                                          202010  data_timein  0    427
                                          202010  data_timein  1    73
                                          202010  data_train  0    2000
                                          202010  data_train  1    1000
                                          202012  data_timeout  0    851
                                          202012  data_timeout  1    149
                                          dtype: int64

20220627-11:29:58  20220627-11:29:58  数据集整合：
20220627-11:29:58  20220627-11:29:58  -------------------------- train --------------------------
20220627-11:29:58  20220627-11:29:58  校验账期:                                       20220627-11:29:58  20220627-11:29:58      通过
20220627-11:29:58  20220627-11:29:58  trainproc_ratiolist：[1, 2, 10]
20220627-11:29:58  20220627-11:29:58  正负例实际比例最高：1:2.0，将trainproc_ratiolist纠正为:[1, 2]
20220627-11:29:58  20220627-11:29:58  随机抽样 1:1
20220627-11:29:58  20220627-11:29:58      正例样本：1000
20220627-11:29:58  20220627-11:29:58      负例样本：2000
20220627-11:29:58  20220627-11:29:58          从负例中随机抽取1000（1000*1）
20220627-11:29:58  20220627-11:29:58  随机抽样 1:2
20220627-11:29:58  20220627-11:29:58      正例样本：1000
20220627-11:29:58  20220627-11:29:58      负例样本：2000
20220627-11:29:58  20220627-11:29:58          从负例中随机抽取2000（1000*2）
20220627-11:29:58  20220627-11:29:58  -------------------------- timein --------------------------
20220627-11:29:58  20220627-11:29:58  校验账期:                                       20220627-11:29:58  20220627-11:29:58      通过
20220627-11:29:58  20220627-11:29:58  -------------------------- timeout --------------------------
20220627-11:29:58  20220627-11:29:58  校验账期:                                       20220627-11:29:58  20220627-11:29:58      通过
20220627-11:29:58  20220627-11:29:58  具备data_timeout数据集，以其测试效果评估模型

20220627-11:29:58  20220627-11:29:58  遍历不同的抽样比例、数据预处理流水线、算法 进行训练测试:

20220627-11:29:58  20220627-11:29:58  ------------------------------------------ 抽样比例：ratio_1_1 ------------------------------------------

20220627-11:29:58  20220627-11:29:58  ------------------------- 流水线：pipeline1 -------------------------
20220627-11:29:58  20220627-11:29:58  train_X: (2000, 136)
20220627-11:30:29  20220627-11:30:29  转换完毕，进入模型(X+Y)：(1000, 109)

20220627-11:30:29  20220627-11:30:29  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220627-11:30:29  20220627-11:30:29  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          6      60.0%       4.0%        4.0
                                                   5.0%       50         23      46.0%      15.4%        3.1
                                                  10.0%      100         42      42.0%      28.2%        2.8
                                                  20.0%      200         65      32.5%      43.6%        2.2
                                                  30.0%      300         86      28.7%      57.7%        1.9
                                                  40.0%      400        104      26.0%      69.8%        1.7
                                                  50.0%      500        115      23.0%      77.2%        1.5
                                                  60.0%      600        124      20.7%      83.2%        1.4
                                                  70.0%      700        133      19.0%      89.3%        1.3
                                                  80.0%      800        138      17.2%      92.6%        1.2
                                                  90.0%      900        147      16.3%      98.7%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:29  20220627-11:30:29  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220627-11:30:29  20220627-11:30:29  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          6      60.0%       4.0%        4.0
                                                   5.0%       50         25      50.0%      16.8%        3.4
                                                  10.0%      100         40      40.0%      26.8%        2.7
                                                  20.0%      200         67      33.5%      45.0%        2.2
                                                  30.0%      300         91      30.3%      61.1%        2.0
                                                  40.0%      400        105      26.2%      70.5%        1.8
                                                  50.0%      500        115      23.0%      77.2%        1.5
                                                  60.0%      600        126      21.0%      84.6%        1.4
                                                  70.0%      700        135      19.3%      90.6%        1.3
                                                  80.0%      800        141      17.6%      94.6%        1.2
                                                  90.0%      900        144      16.0%      96.6%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:29  20220627-11:30:29  训练测试 XGBClassifier_DF - 默认参数
20220627-11:30:31  20220627-11:30:31  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          7      70.0%       4.7%        4.7
                                                   5.0%       50         20      40.0%      13.4%        2.7
                                                  10.0%      100         44      44.0%      29.5%        3.0
                                                  20.0%      200         80      40.0%      53.7%        2.7
                                                  30.0%      300         95      31.7%      63.8%        2.1
                                                  40.1%      401        106      26.4%      71.1%        1.8
                                                  50.5%      505        117      23.2%      78.5%        1.6
                                                  60.0%      600        124      20.7%      83.2%        1.4
                                                  70.1%      701        131      18.7%      87.9%        1.3
                                                  80.0%      800        136      17.0%      91.3%        1.1
                                                  90.0%      900        142      15.8%      95.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:31  20220627-11:30:31  训练测试 RandomForestClassifier_DF - 默认参数
20220627-11:30:31  20220627-11:30:31  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   4.1%       41         26      63.4%      17.4%        4.3
                                                   7.9%       79         39      49.4%      26.2%        3.3
                                                  13.4%      134         55      41.0%      36.9%        2.8
                                                  20.5%      205         71      34.6%      47.7%        2.3
                                                  30.0%      300         89      29.7%      59.7%        2.0
                                                  40.3%      403        103      25.6%      69.1%        1.7
                                                  56.5%      565        119      21.1%      79.9%        1.4
                                                  60.1%      601        121      20.1%      81.2%        1.4
                                                  71.0%      710        134      18.9%      89.9%        1.3
                                                  82.2%      822        141      17.2%      94.6%        1.2
                                                  93.5%      935        146      15.6%      98.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:31  20220627-11:30:31  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:30:32  20220627-11:30:32  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:32  20220627-11:30:32  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:30:32  20220627-11:30:32  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:32  20220627-11:30:32  训练测试 LogisticRegression_DF - solver='liblinear'
20220627-11:30:33  20220627-11:30:33  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          5      50.0%       3.4%        3.4
                                                   5.0%       50         20      40.0%      13.4%        2.7
                                                  10.0%      100         40      40.0%      26.8%        2.7
                                                  20.0%      200         64      32.0%      43.0%        2.1
                                                  30.0%      300         81      27.0%      54.4%        1.8
                                                  40.0%      400         95      23.8%      63.8%        1.6
                                                  50.0%      500        111      22.2%      74.5%        1.5
                                                  60.2%      602        124      20.6%      83.2%        1.4
                                                  70.0%      700        129      18.4%      86.6%        1.2
                                                  80.5%      805        137      17.0%      91.9%        1.1
                                                  90.0%      900        143      15.9%      96.0%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:30:33  20220627-11:30:33  ------------------------- 流水线：pipeline2 -------------------------
20220627-11:30:33  20220627-11:30:33  train_X: (2000, 136)
20220627-11:31:03  20220627-11:31:03  转换完毕，进入模型(X+Y)：(1000, 109)

20220627-11:31:03  20220627-11:31:03  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220627-11:31:04  20220627-11:31:04  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          4      40.0%       2.7%        2.7
                                                   5.0%       50         21      42.0%      14.1%        2.8
                                                  10.0%      100         41      41.0%      27.5%        2.8
                                                  20.0%      200         67      33.5%      45.0%        2.2
                                                  30.0%      300         85      28.3%      57.0%        1.9
                                                  40.0%      400        106      26.5%      71.1%        1.8
                                                  50.0%      500        127      25.4%      85.2%        1.7
                                                  60.0%      600        137      22.8%      91.9%        1.5
                                                  70.0%      700        139      19.9%      93.3%        1.3
                                                  80.0%      800        144      18.0%      96.6%        1.2
                                                  90.0%      900        148      16.4%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:04  20220627-11:31:04  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220627-11:31:04  20220627-11:31:04  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          6      60.0%       4.0%        4.0
                                                   5.0%       50         23      46.0%      15.4%        3.1
                                                  10.0%      100         42      42.0%      28.2%        2.8
                                                  20.0%      200         78      39.0%      52.3%        2.6
                                                  30.0%      300         97      32.3%      65.1%        2.2
                                                  40.0%      400        110      27.5%      73.8%        1.8
                                                  50.0%      500        124      24.8%      83.2%        1.7
                                                  60.0%      600        131      21.8%      87.9%        1.5
                                                  70.0%      700        135      19.3%      90.6%        1.3
                                                  80.0%      800        142      17.8%      95.3%        1.2
                                                  90.0%      900        148      16.4%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:04  20220627-11:31:04  训练测试 XGBClassifier_DF - 默认参数
20220627-11:31:05  20220627-11:31:05  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          6      60.0%       4.0%        4.0
                                                   5.0%       50         25      50.0%      16.8%        3.4
                                                  10.0%      100         46      46.0%      30.9%        3.1
                                                  20.0%      200         79      39.5%      53.0%        2.7
                                                  30.0%      300         99      33.0%      66.4%        2.2
                                                  40.0%      400        114      28.5%      76.5%        1.9
                                                  50.0%      500        125      25.0%      83.9%        1.7
                                                  60.0%      600        130      21.7%      87.2%        1.5
                                                  70.0%      700        137      19.6%      91.9%        1.3
                                                  80.0%      800        145      18.1%      97.3%        1.2
                                                  90.0%      900        149      16.6%     100.0%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:05  20220627-11:31:05  训练测试 RandomForestClassifier_DF - 默认参数
20220627-11:31:05  20220627-11:31:05  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   2.2%       22         11      50.0%       7.4%        3.4
                                                   7.3%       73         37      50.7%      24.8%        3.4
                                                  12.7%      127         59      46.5%      39.6%        3.1
                                                  29.2%      292        100      34.2%      67.1%        2.3
                                                  42.6%      426        114      26.8%      76.5%        1.8
                                                  42.6%      426        114      26.8%      76.5%        1.8
                                                  59.8%      598        129      21.6%      86.6%        1.4
                                                  76.6%      766        141      18.4%      94.6%        1.2
                                                  76.6%      766        141      18.4%      94.6%        1.2
                                                  89.6%      896        147      16.4%      98.7%        1.1
                                                  97.4%      974        149      15.3%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:05  20220627-11:31:05  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:31:06  20220627-11:31:06  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:06  20220627-11:31:06  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:31:06  20220627-11:31:06  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                   0.0%        0          0       nan%       0.0%        NaN
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                   0.0%        0          0       nan%       0.0%        NaN
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:06  20220627-11:31:06  训练测试 LogisticRegression_DF - solver='liblinear'
20220627-11:31:07  20220627-11:31:07  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          8      80.0%       5.4%        5.4
                                                   5.0%       50         22      44.0%      14.8%        3.0
                                                  10.0%      100         37      37.0%      24.8%        2.5
                                                  20.0%      200         62      31.0%      41.6%        2.1
                                                  30.0%      300         79      26.3%      53.0%        1.8
                                                  40.0%      400        101      25.2%      67.8%        1.7
                                                  50.0%      500        115      23.0%      77.2%        1.5
                                                  60.0%      600        126      21.0%      84.6%        1.4
                                                  70.0%      700        135      19.3%      90.6%        1.3
                                                  80.0%      800        141      17.6%      94.6%        1.2
                                                  90.0%      900        145      16.1%      97.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:07  20220627-11:31:07  ------------------------------------------ 抽样比例：ratio_1_2 ------------------------------------------

20220627-11:31:07  20220627-11:31:07  ------------------------- 流水线：pipeline1 -------------------------
20220627-11:31:07  20220627-11:31:07  train_X: (3000, 136)
20220627-11:31:41  20220627-11:31:41  转换完毕，进入模型(X+Y)：(1000, 124)

20220627-11:31:41  20220627-11:31:41  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220627-11:31:42  20220627-11:31:42  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          5      50.0%       3.4%        3.4
                                                   5.0%       50         23      46.0%      15.4%        3.1
                                                  10.0%      100         41      41.0%      27.5%        2.8
                                                  20.0%      200         66      33.0%      44.3%        2.2
                                                  30.0%      300         92      30.7%      61.7%        2.1
                                                  40.0%      400        108      27.0%      72.5%        1.8
                                                  50.0%      500        119      23.8%      79.9%        1.6
                                                  60.0%      600        129      21.5%      86.6%        1.4
                                                  70.0%      700        137      19.6%      91.9%        1.3
                                                  80.0%      800        145      18.1%      97.3%        1.2
                                                  90.0%      900        148      16.4%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:42  20220627-11:31:42  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220627-11:31:42  20220627-11:31:42  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          4      40.0%       2.7%        2.7
                                                   5.0%       50         26      52.0%      17.4%        3.5
                                                  10.0%      100         50      50.0%      33.6%        3.4
                                                  20.0%      200         81      40.5%      54.4%        2.7
                                                  30.0%      300         99      33.0%      66.4%        2.2
                                                  40.0%      400        112      28.0%      75.2%        1.9
                                                  50.0%      500        122      24.4%      81.9%        1.6
                                                  60.0%      600        131      21.8%      87.9%        1.5
                                                  70.0%      700        140      20.0%      94.0%        1.3
                                                  80.0%      800        145      18.1%      97.3%        1.2
                                                  90.9%      909        148      16.3%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:42  20220627-11:31:42  训练测试 XGBClassifier_DF - 默认参数
20220627-11:31:43  20220627-11:31:43  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          7      70.0%       4.7%        4.7
                                                   5.0%       50         28      56.0%      18.8%        3.8
                                                  10.0%      100         53      53.0%      35.6%        3.6
                                                  20.0%      200         87      43.5%      58.4%        2.9
                                                  30.1%      301        105      34.9%      70.5%        2.3
                                                  40.0%      400        116      29.0%      77.9%        1.9
                                                  50.1%      501        121      24.2%      81.2%        1.6
                                                  60.0%      600        125      20.8%      83.9%        1.4
                                                  70.0%      700        127      18.1%      85.2%        1.2
                                                  80.0%      800        133      16.6%      89.3%        1.1
                                                  90.0%      900        139      15.4%      93.3%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:43  20220627-11:31:43  训练测试 RandomForestClassifier_DF - 默认参数
20220627-11:31:43  20220627-11:31:43  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.1%       11          9      81.8%       6.0%        5.5
                                                   6.7%       67         39      58.2%      26.2%        3.9
                                                  11.5%      115         57      49.6%      38.3%        3.3
                                                  20.0%      200         76      38.0%      51.0%        2.6
                                                  39.9%      399        114      28.6%      76.5%        1.9
                                                  40.4%      404        114      28.2%      76.5%        1.9
                                                  52.7%      527        126      23.9%      84.6%        1.6
                                                  68.7%      687        135      19.7%      90.6%        1.3
                                                  70.0%      700        135      19.3%      90.6%        1.3
                                                  84.9%      849        143      16.8%      96.0%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:43  20220627-11:31:43  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:31:44  20220627-11:31:44  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:44  20220627-11:31:44  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:31:45  20220627-11:31:45  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:45  20220627-11:31:45  训练测试 LogisticRegression_DF - solver='liblinear'
20220627-11:31:45  20220627-11:31:45  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          4      40.0%       2.7%        2.7
                                                   5.0%       50         23      46.0%      15.4%        3.1
                                                  10.0%      100         42      42.0%      28.2%        2.8
                                                  20.0%      200         64      32.0%      43.0%        2.1
                                                  30.0%      300         80      26.7%      53.7%        1.8
                                                  40.0%      400         98      24.5%      65.8%        1.6
                                                  50.0%      500        111      22.2%      74.5%        1.5
                                                  60.1%      601        122      20.3%      81.9%        1.4
                                                  70.0%      700        132      18.9%      88.6%        1.3
                                                  80.0%      800        138      17.2%      92.6%        1.2
                                                  90.0%      900        143      15.9%      96.0%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:31:45  20220627-11:31:45  ------------------------- 流水线：pipeline2 -------------------------
20220627-11:31:45  20220627-11:31:45  train_X: (3000, 136)
20220627-11:32:29  20220627-11:32:29  转换完毕，进入模型(X+Y)：(1000, 124)

20220627-11:32:29  20220627-11:32:29  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220627-11:32:29  20220627-11:32:29  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          6      60.0%       4.0%        4.0
                                                   5.0%       50         26      52.0%      17.4%        3.5
                                                  10.0%      100         42      42.0%      28.2%        2.8
                                                  20.0%      200         71      35.5%      47.7%        2.4
                                                  30.0%      300         91      30.3%      61.1%        2.0
                                                  40.0%      400        110      27.5%      73.8%        1.8
                                                  50.0%      500        123      24.6%      82.6%        1.7
                                                  60.0%      600        131      21.8%      87.9%        1.5
                                                  70.0%      700        139      19.9%      93.3%        1.3
                                                  80.0%      800        145      18.1%      97.3%        1.2
                                                  90.0%      900        148      16.4%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:29  20220627-11:32:29  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220627-11:32:30  20220627-11:32:30  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          8      80.0%       5.4%        5.4
                                                   5.0%       50         26      52.0%      17.4%        3.5
                                                  10.0%      100         54      54.0%      36.2%        3.6
                                                  20.0%      200         91      45.5%      61.1%        3.1
                                                  30.0%      300        110      36.7%      73.8%        2.5
                                                  40.0%      400        120      30.0%      80.5%        2.0
                                                  50.0%      500        123      24.6%      82.6%        1.7
                                                  60.0%      600        132      22.0%      88.6%        1.5
                                                  70.0%      700        139      19.9%      93.3%        1.3
                                                  80.0%      800        142      17.8%      95.3%        1.2
                                                  90.0%      900        148      16.4%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:30  20220627-11:32:30  训练测试 XGBClassifier_DF - 默认参数
20220627-11:32:32  20220627-11:32:32  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          7      70.0%       4.7%        4.7
                                                   5.0%       50         32      64.0%      21.5%        4.3
                                                  10.0%      100         59      59.0%      39.6%        4.0
                                                  20.0%      200         93      46.5%      62.4%        3.1
                                                  30.0%      300        107      35.7%      71.8%        2.4
                                                  40.0%      400        118      29.5%      79.2%        2.0
                                                  50.0%      500        125      25.0%      83.9%        1.7
                                                  60.0%      600        129      21.5%      86.6%        1.4
                                                  70.0%      700        137      19.6%      91.9%        1.3
                                                  80.0%      800        143      17.9%      96.0%        1.2
                                                  90.0%      900        147      16.3%      98.7%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:32  20220627-11:32:32  训练测试 RandomForestClassifier_DF - 默认参数
20220627-11:32:32  20220627-11:32:32  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.1%       11          9      81.8%       6.0%        5.5
                                                   6.8%       68         43      63.2%      28.9%        4.2
                                                  11.0%      110         58      52.7%      38.9%        3.5
                                                  27.5%      275         96      34.9%      64.4%        2.3
                                                  39.1%      391        110      28.1%      73.8%        1.9
                                                  55.4%      554        126      22.7%      84.6%        1.5
                                                  55.4%      554        126      22.7%      84.6%        1.5
                                                  73.2%      732        140      19.1%      94.0%        1.3
                                                  73.2%      732        140      19.1%      94.0%        1.3
                                                  90.2%      902        148      16.4%      99.3%        1.1
                                                  90.2%      902        148      16.4%      99.3%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:32  20220627-11:32:32  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:32:33  20220627-11:32:33  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:33  20220627-11:32:33  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220627-11:32:33  20220627-11:32:33  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:33  20220627-11:32:33  训练测试 LogisticRegression_DF - solver='liblinear'
20220627-11:32:34  20220627-11:32:34  data_timeout测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          6      60.0%       4.0%        4.0
                                                   5.0%       50         25      50.0%      16.8%        3.4
                                                  10.0%      100         37      37.0%      24.8%        2.5
                                                  20.0%      200         59      29.5%      39.6%        2.0
                                                  30.0%      300         80      26.7%      53.7%        1.8
                                                  40.0%      400        104      26.0%      69.8%        1.7
                                                  50.0%      500        113      22.6%      75.8%        1.5
                                                  60.0%      600        127      21.2%      85.2%        1.4
                                                  70.0%      700        134      19.1%      89.9%        1.3
                                                  80.0%      800        139      17.4%      93.3%        1.2
                                                  90.0%      900        144      16.0%      96.6%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:34  20220627-11:32:34  确定最佳模型
20220627-11:32:34  20220627-11:32:34  剔除无效模型 21 个：ratio_1_1 | pipeline1 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                                              [查准率非递减]
                                      ratio_1_1 | pipeline1 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_1 | pipeline1 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_1 | pipeline1 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                               [查准率非递减]
                                      ratio_1_1 | pipeline2 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0            [查准率非递减, 分数区分度弱]
                                      ratio_1_1 | pipeline2 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                                  [查准率非递减]
                                      ratio_1_1 | pipeline2 | RandomForestClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                       [查准率非递减, 分数取值集中]
                                      ratio_1_1 | pipeline2 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_1 | pipeline2 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                       [分数取值集中(唯一值), 分数区分度弱]
                                      ratio_1_1 | pipeline2 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                               [查准率非递减]
                                      ratio_1_2 | pipeline1 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0                          [查准率非递减]
                                      ratio_1_2 | pipeline1 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                                  [查准率非递减]
                                      ratio_1_2 | pipeline1 | RandomForestClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                                     [查准率非递减]
                                      ratio_1_2 | pipeline1 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_2 | pipeline1 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_2 | pipeline1 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                               [查准率非递减]
                                      ratio_1_2 | pipeline2 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                                  [查准率非递减]
                                      ratio_1_2 | pipeline2 | RandomForestClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                                     [分数取值集中]
                                      ratio_1_2 | pipeline2 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_2 | pipeline2 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                                      ratio_1_2 | pipeline2 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                               [查准率非递减]
                                      Name: if_weak, dtype: object
20220627-11:32:34  20220627-11:32:34  最佳模型是：ratio_1_2 | pipeline2 | XGBClassifier_DF - 默认参数

20220627-11:32:34  20220627-11:32:34  data_train的测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       30         30     100.0%       3.0%        3.0
                                                   5.0%      150        150     100.0%      15.0%        3.0
                                                  10.0%      300        300     100.0%      30.0%        3.0
                                                  20.0%      600        600     100.0%      60.0%        3.0
                                                  30.0%      900        900     100.0%      90.0%        3.0
                                                  40.0%     1200       1000      83.3%     100.0%        2.5
                                                  50.0%     1500       1000      66.7%     100.0%        2.0
                                                  60.0%     1800       1000      55.6%     100.0%        1.7
                                                  70.0%     2100       1000      47.6%     100.0%        1.4
                                                  80.0%     2400       1000      41.7%     100.0%        1.3
                                                  90.0%     2700       1000      37.0%     100.0%        1.1
                                                 100.0%     3000       1000      33.3%     100.0%        1.0

20220627-11:32:34  20220627-11:32:34  data_timein的测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%        5          4      80.0%       5.5%        5.5
                                                   5.0%       25         10      40.0%      13.7%        2.7
                                                  10.0%       50         18      36.0%      24.7%        2.5
                                                  20.0%      100         32      32.0%      43.8%        2.2
                                                  30.0%      150         44      29.3%      60.3%        2.0
                                                  40.0%      200         49      24.5%      67.1%        1.7
                                                  50.0%      250         51      20.4%      69.9%        1.4
                                                  60.0%      300         58      19.3%      79.5%        1.3
                                                  70.0%      350         61      17.4%      83.6%        1.2
                                                  80.0%      400         65      16.2%      89.0%        1.1
                                                  90.0%      450         71      15.8%      97.3%        1.1
                                                 100.0%      500         73      14.6%     100.0%        1.0

20220627-11:32:34  20220627-11:32:34  data_timeout的测试效果：
                                           累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                                   1.0%       10          7      70.0%       4.7%        4.7
                                                   5.0%       50         32      64.0%      21.5%        4.3
                                                  10.0%      100         59      59.0%      39.6%        4.0
                                                  20.0%      200         93      46.5%      62.4%        3.1
                                                  30.0%      300        107      35.7%      71.8%        2.4
                                                  40.0%      400        118      29.5%      79.2%        2.0
                                                  50.0%      500        125      25.0%      83.9%        1.7
                                                  60.0%      600        129      21.5%      86.6%        1.4
                                                  70.0%      700        137      19.6%      91.9%        1.3
                                                  80.0%      800        143      17.9%      96.0%        1.2
                                                  90.0%      900        147      16.3%      98.7%        1.1
                                                 100.0%     1000        149      14.9%     100.0%        1.0

20220627-11:32:34  20220627-11:32:34  分数稳定度：0.07191

20220627-11:32:34  20220627-11:32:34  特征重要性：
                                                                field_name                                        comment  importance
                                          33           avg__gprs_flow_busy                      gprs-忙时-流量：近3月均值    0.031866
                                          74          max__gprs_flow_short                   小视频系app流量：近3月最大值    0.018958
                                          84            min__gprs_resource                  gprs国内资源总量：近3月最小值    0.017200
                                          8                 gprs_flow_busy                                 gprs-忙时-流量    0.016661
                                          72          max__gprs_flow_music                    音乐类应用流量：近3月最大值    0.015641
                                          38          avg__gprs_flow_short                     小视频系app流量：近3月均值    0.014189
                                          21                    sex_add~男             table_a_add测试字段2：取值是否为男    0.014131
                                          69           max__gprs_flow_busy                    gprs-忙时-流量：近3月最大值    0.013457
                                          109         std__gprs_flow_video                    视频类应用流量：近3月标准差    0.013324
                                          113  moreq25cnt__gprs_flow_commu  通信类应用流量：近3月大于第一四分位数的月份数    0.013205
                                          63              max__calling_cnt                      主叫通话次数：近3月最大值    0.012839
                                          14                   nos_calling                           主叫通话对端号码个数    0.012375
                                          61            max__gprs_now_rest                  当月gprs资源余量：近3月最大值    0.012339
                                          89              min__nos_calling              主叫通话对端号码个数：近3月最小值    0.012219
                                          29            avg__gprs_resource                    gprs国内资源总量：近3月均值    0.011820
                                          94                 std__call_use                    语音资源使用量：近3月标准差    0.011802
                                          59                 max__call_use                    语音资源使用量：近3月最大值    0.011279
                                          105                    std__arpu                          当月arpu：近3月标准差    0.010649
                                          7              calling_diff_dura                             主叫异网通话分钟数    0.010589
                                          66           max__call_dura_roam                     省际漫游-时长：近3月最大值    0.010528

20220627-11:32:34  20220627-11:32:34  保存训练结果至：./binaryclassify/eg/traintest~202010~202012/train_result~202010~202012.pkl

20220627-11:32:34  20220627-11:32:34  最优模型的流水线不是pipeline1,若欲在预测时匹配topn原因需要使用pipeline1，从model_flows挑选一个基于pipeline1的保存至./binaryclassify/eg/traintest~202010~202012/train_model_flows~202010~202012.pkl: ratio_1_1 | pipeline1 | XGBClassifier_DF - 默认参数
20220627-11:32:34  20220627-11:32:34  保存模型测试效果集合至：./binaryclassify/eg/traintest~202010~202012/train_pre_results~202010~202012.pkl
20220627-11:32:35  20220627-11:32:35  结束时间：2022-06-27 11:32:35
20220627-11:32:35  20220627-11:32:35  耗时：157 s




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(2000), 添加unique_limit_actual：len(X)*0.99=1980
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline1 PsiTransformer data_timein 计算稳定性(区分正负例) ，3个字段稳定性>=psi_limit（0.1）：
gprs_flow_busy          0.191723
gprs_last_defer         0.181988
min__gprs_last_defer    0.140204
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline1 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，5个字段稳定性>=psi_limit（0.1）：
wave__gprs_flow_short    0.186397
sep__gprs_flow_commu     0.151888
wave__gprs_flow_video    0.149637
grow__gprs_flow_roam     0.136028
sep__gprs_flow_music     0.117897
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline1 PsiTransformer data_timeout 计算稳定性(区分正负例) ，4个字段稳定性>=psi_limit（0.1）：
sep__gprs_flow_commu     0.308466
wave__gprs_flow_short    0.257369
wave__gprs_flow_video    0.237823
sep__gprs_flow_music     0.171049
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer data_timein 计算稳定性(区分正负例) ，3个字段稳定性>=psi_limit（0.1）：
gprs_flow_busy          0.191723
gprs_last_defer         0.181988
min__gprs_last_defer    0.140204
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，5个字段稳定性>=psi_limit（0.1）：
wave__gprs_flow_short    0.186397
sep__gprs_flow_commu     0.151888
wave__gprs_flow_video    0.149637
grow__gprs_flow_roam     0.136028
sep__gprs_flow_music     0.117897
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例) ，4个字段稳定性>=psi_limit（0.1）：
sep__gprs_flow_commu     0.308466
wave__gprs_flow_short    0.257369
wave__gprs_flow_video    0.237823
sep__gprs_flow_music     0.171049
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(3000), 添加unique_limit_actual：len(X)*0.99=2970
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline1 PsiTransformer data_timein 计算稳定性(区分正负例) ，2个字段稳定性>=psi_limit（0.1）：
gprs_last_defer         0.182698
min__gprs_last_defer    0.140204
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline1 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，6个字段稳定性>=psi_limit（0.1）：
wave__gprs_flow_video    0.242474
wave__gprs_flow_short    0.185478
sep__gprs_flow_commu     0.151892
wave__gprs_flow_music    0.121354
sep__gprs_flow_music     0.117897
sep__nos_calling         0.105581
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline1 PsiTransformer data_timeout 计算稳定性(区分正负例) ，6个字段稳定性>=psi_limit（0.1）：
sep__gprs_flow_commu     0.309719
wave__gprs_flow_video    0.252842
wave__gprs_flow_short    0.251709
wave__gprs_flow_music    0.193795
sep__gprs_flow_music     0.171049
sep__nos_calling         0.132904
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer data_timein 计算稳定性(区分正负例) ，2个字段稳定性>=psi_limit（0.1）：
gprs_last_defer         0.182698
min__gprs_last_defer    0.140204
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer timedata_timeout 计算稳定性(不区分正负例) ['gprs_flow_busy']字段多出1个取值, .head(5):
                      old  new
field          value          
gprs_flow_busy nan    NaN    2
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，6个字段稳定性>=psi_limit（0.1）：
wave__gprs_flow_video    0.242474
wave__gprs_flow_short    0.185478
sep__gprs_flow_commu     0.151892
wave__gprs_flow_music    0.121354
sep__gprs_flow_music     0.117897
sep__nos_calling         0.105581
dtype: float64
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例)-正例（1） ['gprs_flow_busy']字段多出1个取值, .head(5):
                      old  new
field          value          
gprs_flow_busy nan    NaN    1
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例)-负例（0） ['gprs_flow_busy']字段多出1个取值, .head(5):
                      old  new
field          value          
gprs_flow_busy nan    NaN    1
  convert=self.convert_dtype,




D:\Python for Windows\lib\site-packages\pandas\core\apply.py:1101: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例) ，6个字段稳定性>=psi_limit（0.1）：
sep__gprs_flow_commu     0.309719
wave__gprs_flow_video    0.252842
wave__gprs_flow_short    0.251709
wave__gprs_flow_music    0.193795
sep__gprs_flow_music     0.171049
sep__nos_calling         0.132904
dtype: float64
  convert=self.convert_dtype,
                   ----------------------------------------------------------------------
                   
                   
                    

                   ###################################################################### 训练失败的模型
                    
20220627-11:36:40  无训练失败的模型


Traceback (most recent call last):
  File "D:\Python for Windows\lib\site-packages\IPython\core\interactiveshell.py", line 3296, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-8-edcd93efcdaa>", line 1, in <module>
    rint('\n\n~ 预测集加工 & 预测打分过程 ~'.replace('~', '~'*60))
NameError: name 'rint' is not defined
20220627-11:37:00  
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 预测集加工 & 预测打分过程 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20220627-11:37:00  ---------------------------------------- 模型示例 -----------------------------------------------
20220627-11:37:00      无日数据字段进入模型
20220627-11:37:00      无日数据字段进入用户筛选条件
20220627-11:37:00  可继续执行预测打分过程。
                   Out[10]: 20220627-11:37:11  
                            model_name month_train month_test Pcase_limit traintable_ratio Pcumsum_limit timein_count timeout_limit trainproc_ratiolist iv_limit r_limit marketlevel short_name                     table_XY s_field_base  ... month_tabexp                           model_wd_traintest                                    f_field_comment                col_del                                        table_train                                         table_test freq_limit unique_limit valuecount_limit  random_state n_recent month_predict                          model_wd_predict                                      table_predict                                        table_score
                   模型示例   模型示例      202010     202012        1000                2             2          500          1000              [1, 2]     0.05    0.95           1         eg  kehujingyingbudb.ml_xy_eg_m    s_yw_fake  ...       202010  ./binaryclassify/eg/traintest~202010~202012  ./binaryclassify/eg/traintest~202010~202012/ta...  [user_acct_month, rn]  ./binaryclassify/eg/traintest~202010~202012/tr...  ./binaryclassify/eg/traintest~202010~202012/te...       0.95         5000               50          None        3        202012  ./binaryclassify/eg//predictscore~202012  ./binaryclassify/eg//predictscore~202012/predi...  ./binaryclassify/eg//predictscore~202012/predi...
                   
                   [1 rows x 45 columns]
                   Out[11]: 20220627-11:39:53  
                            model_name month_train month_test Pcase_limit traintable_ratio Pcumsum_limit timein_count timeout_limit trainproc_ratiolist iv_limit r_limit marketlevel short_name                     table_XY s_field_base  ... score_targetnull                                         field_base                                              condition month_tabexp                           model_wd_traintest                                    f_field_comment                col_del                                        table_train                                         table_test  freq_limit unique_limit valuecount_limit random_state n_recent month_predict
                   模型示例   模型示例      202010     202012        1000                2             2          500          1000              [1, 2]     0.05    0.95           1         eg  kehujingyingbudb.ml_xy_eg_m    s_yw_fake  ...            Ncase                       field_name               ...  user_status='在网-正常' and \n    phone_no_null is...       202010  ./binaryclassify/eg/traintest~202010~202012  ./binaryclassify/eg/traintest~202010~202012/ta...  [user_acct_month, rn]  ./binaryclassify/eg/traintest~202010~202012/tr...  ./binaryclassify/eg/traintest~202010~202012/te...        0.95         5000               50         None        3        202012
                   
                   [1 rows x 42 columns]
                   Out[12]: 20220627-11:40:33  
                   模型示例    user_status='在网-正常' and \n    phone_no_null is...
                   Name: condition, dtype: object
                   Out[13]: 20220627-11:41:17  "model_name\tmonth_train\tmonth_test\tPcase_limit\t traintable_ratio\tPcumsum_limit\t timein_count\t timeout_limit\t trainproc_ratiolist\tiv_limit\tr_limit\tmarketlevel\n模型示例     \t202010\t202012\t1000\t2\t2\t500\t1000\t[1, 2, 10]\t0.05\t0.95\t1\n# 模型示例2     \t202011\t202012\t1000\t2\t2\t500\t1000\t[1, 2, 10]\t0.05\t0.95\t1\n# 流失预警模型_移网\t'202204'\t'202205'\t10000\t3\tnp.nan\t50000\t100000\t[3]\t0.05\t0.95\t1\n# 转融合模型_单C\t'202201'\t'202202'\t10000\t3\tnp.nan\t50000\t100000\t[3]\t0.05\t0.95\t1\n# 副卡加装模型_移网\t'202201'\t'202202'\t10000\t3\tnp.nan\t50000\t100000\t[3]\t0.05\t0.95\t1\n# 套餐高迁模型\t'202201'\tnp.nan\t10000\t3\tnp.nan\t50000\t100000\t[3]\t0.05\t0.95\t1\n# 流量月包加装模型\t'202201'\t'202202'\t10000\t3\tnp.nan\t50000\t100000\t[3]\t0.05\t0.95\t1\n# 终端换机模型\t'202201'\t'202202'\t10000\t10\tnp.nan\t50000\t100000\t[10]\t0.01\t0.95\t1\n# 加定向流量包模型\t'202201'\t'202202'\t10000\t10\t2\t50000\t100000\t[10]\t0.05\t0.95\t1\n# 5G加包模型\t'202201'\t'202202'\t10000\t10\tnp.nan\t50000\t100000\t[3]\t0.05\t0.95\t1\n# 视频彩铃潜客模型\t'202201'\t'202202'\t10000\t5\tnp.nan\t50000\t100000\t[5]\t0.05\t0.95\t1\n"
20220627-11:41:36  将excel粘贴的长字符串转为DataFrame
20220627-11:41:37      eval: trainproc_ratiolist
20220627-11:41:37  删除model_name以#开头的模型信息：['# 模型示例2', '# 流失预警模型_移网', '# 转融合模型_单C', '# 副卡加装模型_移网', '# 套餐高迁模型', '# 流量月包加装模型', '# 终端换机模型', '# 加定向流量包模型', '# 5G加包模型', '# 视频彩铃潜客模型']

20220627-11:41:37  将excel粘贴的长字符串转为DataFrame
20220627-11:41:37      eval: col_out
20220627-11:41:37      eval: dict_sortscore
20220627-11:41:37  
                   转换、检查、纠正field_base
20220627-11:41:37  
                   ------------------------------------------------------------ s_yw_fake ------------------------------------------------------------
20220627-11:41:37  field_base: 96行
20220627-11:41:37  将excel粘贴的长字符串转为DataFrame
20220627-11:41:37      eval: tableXday_desc
20220627-11:41:37      eval: tableXscore_desc
20220627-11:41:37  删除2个available“不可用”字段：['gprs_flow_tnet', 'days_outside']
20220627-11:41:37  field_base: 94行

20220627-11:41:37  删除1个基于“不可用”字段加工的手动衍生_py字段：
                           field_name                    formula
                   58  days_outside_p  days_outside / days_month
20220627-11:41:37  field_base: 93行
20220627-11:41:37  删除1个基于“不可用”字段加工的自动衍生_py字段：['valuecnt__days_outside_p~1']
20220627-11:41:37  field_base: 92行


D:\工作\模型脚本\ModelProject\selfmodule\tablemodule\tablefun.py:113: UserWarning: 确定下列时长类字段的renmark是否限制 ‘不参与近n月自动衍生’：
                     field_name                   comment remark
14  monthsaready_last_stop_date  最后停机时间：已发生时长    NaN
15  monthsremain_last_stop_date    最后停机时间：剩余时长    NaN
  warnings.warn(s)
20220627-11:41:37  模型示例
20220627-11:41:37  ------------------------------------------------------------------------------------------------------------------------                    

20220627-11:41:37  infos中不包括freq_limit， 统一赋值为默认值：0.95
20220627-11:41:37  infos中不包括unique_limit， 统一赋值为默认值：5000
20220627-11:41:37  infos中不包括valuecount_limit， 统一赋值为默认值：50
20220627-11:41:37  infos中不包括random_state， 统一赋值为默认值：None
20220627-11:41:37  infos中不包括n_recent， 统一赋值为默认值：3
                   Out[15]: 20220627-11:41:39  
                            model_name month_train month_test Pcase_limit traintable_ratio Pcumsum_limit timein_count timeout_limit trainproc_ratiolist iv_limit r_limit marketlevel short_name                     table_XY s_field_base  ...                              dict_sortscore score_targetnull                                         field_base                                              condition month_tabexp                           model_wd_traintest                                    f_field_comment                col_del                                        table_train                                         table_test freq_limit unique_limit valuecount_limit random_state n_recent
                   模型示例   模型示例      202010     202012        1000                2             2          500          1000          [1, 2, 10]     0.05    0.95           1         eg  kehujingyingbudb.ml_xy_eg_m    s_yw_fake  ...  {'sms_cnt': True, 'call_fee_local': False}            Ncase                       field_name               ...  user_status='在网-正常' and \n    phone_no_null is...       202010  ./binaryclassify/eg/traintest~202010~202012  ./binaryclassify/eg/traintest~202010~202012/ta...  [user_acct_month, rn]  ./binaryclassify/eg/traintest~202010~202012/tr...  ./binaryclassify/eg/traintest~202010~202012/te...       0.95         5000               50         None        3
                   
                   [1 rows x 41 columns]
