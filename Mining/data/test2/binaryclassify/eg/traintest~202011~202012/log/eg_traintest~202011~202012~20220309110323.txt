
                   ###################################################################### 转换、检查、纠正基础数据字典（Info.field_base） 

20220309-11:03:23  field_base: 89行
20220309-11:03:23  删除5个available“不可用”字段：['gprs_flow_tnet', 'days_outside', 'aaa', 'bbb', 'ccc']
20220309-11:03:23  field_base: 84行

20220309-11:03:23  删除1个基于“不可用”字段加工的手动衍生_py字段：
                           field_name                    formula
                   56  days_outside_p  days_outside / days_month
20220309-11:03:23  field_base: 83行
20220309-11:03:23  删除1个基于“不可用”字段加工的自动衍生_py字段：['valuecnt__days_outside_p~1']
20220309-11:03:23  field_base: 82行


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\binarymodule\modelinfo.py:77: UserWarning: 确定下列时长类字段的renmark是否限制 ‘不参与近n月自动衍生’：
                     field_name                   comment remark
12  monthsaready_last_stop_date  最后停机时间：已发生时长    NaN
13  monthsremain_last_stop_date    最后停机时间：剩余时长    NaN
  warnings.warn(s)

                   ###################################################################### 加工训练账期近n月基础数据
                    
20220309-11:03:23  开始时间：2022-03-09 11:03:23
20220309-11:03:23  month: 202011
20220309-11:03:23  参数设置：
                       step: train
                       Info.model_name: 模型示例
                       Info.n_recent: 3
                       drop_midtable: True
                       cover_table_all: True
                       Info.Pcase_limit: 10000
                       Info.traintable_ratio: 2
                       Info.Pcumsum_limit: 2
                       Info.timein_count: 500

                   ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220309-11:03:23  检查 ml.ml_feature_info_yw_user_m
20220309-11:03:23      72 列
20220309-11:03:23      202011账期： 10000行
20220309-11:03:23      202010账期： 15000行
20220309-11:03:23      202009账期： 18000行


20220309-11:03:23  检查 ml.ml_feature_add_yw_user_m
20220309-11:03:23      4 列
20220309-11:03:23      202011账期： 10000行
20220309-11:03:23      202010账期： 15000行
20220309-11:03:23      202009账期： 18000行


20220309-11:03:23  检查 ml.ml_feature_info_yw_user_day (20201215账期)
20220309-11:03:24      7 列
20220309-11:03:24      20201215账期： 15000行


20220309-11:03:24  检查 ml.ml_target_info_yw_user_m
20220309-11:03:24      7 列
20220309-11:03:24      202011账期： 10000行

20220309-11:03:24      获取目标字段flag_eg类型：integer



                   -------------------- 汇总当期特征与目标：ml.dm_zc_moxing_info_target_202011 -------------------------- 
20220309-11:03:24  查询表： 
                       select concat(table_schema, '.', table_name) full_name
                       from information_schema.tables 
                       where table_schema = 'ml' and table_name='dm_zc_moxing_info_target_202011'
                       存在1个表 
20220309-11:03:24  ml.dm_zc_moxing_info_target_202011已存在，将重建覆盖
20220309-11:03:24  建表语句： 
                       drop table if exists ml.dm_zc_moxing_info_target_202011;
                       select pg_sleep(10);
                       create table ml.dm_zc_moxing_info_target_202011 as
                       select * from (
                           select a.* 
                           , a2.age_add, a2.sex_add
                           , day.phone_no_null dayvalue_phone_no_null, day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura, day.user_status dayvalue_user_status
                           ,b.flag_eg, b.ymonth_flag_eg2, b.ymonth, b.exe_sam, b.flag_eg2
                           from (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202011') a 
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202011') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201215') day on a.user_id = day.user_id
                           left join (select * from ml.ml_target_info_yw_user_m where cast(acct_month as text)='202011') b on a.user_id = b.user_id
                       ) t where 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3
20220309-11:03:34      sql执行完毕
20220309-11:03:34  统计 ml.dm_zc_moxing_info_target_202011 的行列数
20220309-11:03:34      8354行，83列
20220309-11:03:34  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.dm_zc_moxing_info_target_202011  group by flag_eg
20220309-11:03:34      dis_train_total: {'count': 8354, 'Pcount': 1201, 'prop': 0.144}


                   ------------------- 限定模型目标用户范围：ml.mid_eg_model_train_202011 ------------------------------- 
20220309-11:03:34  建表语句（限定202011账期当月目标用户）： 
                       drop table if exists ml.mid_eg_model_train_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_model_train_202011 as 
                       select * ,row_number() over(order by random()) rn from ml.dm_zc_moxing_info_target_202011
                       where dayvalue_user_status='在网-正常' and 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3 and flag_eg is not null
20220309-11:03:44      sql执行完毕
20220309-11:03:44  统计ml.mid_eg_model_train_202011行列数
20220309-11:03:44      8186行，84列

                   ------------------- 加工训练集[验证集]-当月账期数据：ml.mid_eg_now_train_202011 ---------------------- 
20220309-11:03:44  data_tarin: rn > 500
20220309-11:03:44  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_model_train_202011 where rn > 500 group by flag_eg
20220309-11:03:44      dis_train_model {'count': 7686, 'Pcount': 1102, 'prop': 0.143}

20220309-11:03:44  202011账期的正例样本总量为1102,小于Info.Pcase_limit（10000）,向前累计正样本
20220309-11:03:44  Info.Pcumsum_limit=2
20220309-11:03:44  ml.ml_target_info_yw_user_m最小可设为202011, 当月账期202011， 将Info.Pcumsum_limit修正为2
20220309-11:03:44  Info.Pcumsum_limit修正为0，不向前累计
20220309-11:03:44  正例样本：1102
20220309-11:03:44      <=Pcase_limit（10000）, 故只取全部：1102
20220309-11:03:44  负例样本总量：6584
20220309-11:03:44      从中随机抽取2204（1102*2）

20220309-11:03:44  拼接当月正负例抽样语句

20220309-11:03:44  加工当月data_timein数据
20220309-11:03:44  建表语句： 
                       drop table if exists ml.mid_eg_now_timein_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_now_timein_202011 as
                       select * from ml.mid_eg_model_train_202011 where rn <= 500
20220309-11:03:55      sql执行完毕
20220309-11:03:55  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_now_timein_202011  group by flag_eg
20220309-11:03:55      dis_timein_sample {'count': 500, 'Pcount': 65, 'prop': 0.13}

20220309-11:03:55      dis_timein_sample 较 dis_train_model 正例占比 变动幅度-9.09091% (0.13 较 0.143)



D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\tablemodule\tablefun.py:413: UserWarning:     dis_timein_sample 较 dis_train_model 正例占比 变动幅度-9.09091% (0.13 较 0.143)

  warnings.warn(s)
20220309-11:03:55  建表语句（202011账期当月数据） 
                       drop table if exists ml.mid_eg_now_train_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_now_train_202011 as
                       (select * from ml.mid_eg_model_train_202011 where rn > 500 and cast(flag_eg as text)='1' order by random() limit 1102) 
                       union all 
                       (select * from ml.mid_eg_model_train_202011 where rn > 500 and cast(flag_eg as text)='0' order by random() limit 2204)
20220309-11:04:05      sql执行完毕
20220309-11:04:05  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_now_train_202011  group by flag_eg
20220309-11:04:05      dis_train_sample {'count': 3306, 'Pcount': 1102, 'prop': 0.333}


                   ------------------------ 合并近n月数据：ml.mid_eg_recent_train_202011  -------------------------------- 
20220309-11:04:05  建表语句： 
                       drop table if exists ml.mid_eg_recent_train_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_recent_train_202011 as 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_train'  as text) data_use, * from ml.mid_eg_now_train_202011
                       ) t0
                       union all 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_train'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_train_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202010') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202010') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201115') day on a.user_id = day.user_id
                       ) t1
                       union all
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_train'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_train_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202009') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202009') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201015') day on a.user_id = day.user_id
                       ) t2
                       
                       
                       union all
                       
                        select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_timein'  as text) data_use, * from ml.mid_eg_now_timein_202011
                       ) t3
                       union all 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_timein'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_timein_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202010') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202010') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201115') day on a.user_id = day.user_id
                       ) t4
                       union all
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_timein'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_timein_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202009') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202009') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201015') day on a.user_id = day.user_id
                       ) t5
20220309-11:04:15      sql执行完毕
20220309-11:04:15  统计ml.mid_eg_recent_train_202011行列数
20220309-11:04:16      3806行，74列

                   --------------------------------- 核验各账期数据量  -------------------------------------------------- 
20220309-11:04:16  sql语句： 
                       select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                       from ml.mid_eg_recent_train_202011 
                       group by user_acct_month, data_use, acct_month, flag_eg 
                       order by user_acct_month, data_use, acct_month, flag_eg

20220309-11:04:16  结果：
                     user_acct_month     data_use  acct_month  flag_eg  count
                   0          202011  data_timein      202009      NaN    500
                   1          202011  data_timein      202010      NaN    500
                   2          202011  data_timein      202011      0.0    435
                   3          202011  data_timein      202011      1.0     65
                   4          202011   data_train      202009      NaN   3306
                   5          202011   data_train      202010      NaN   3306
                   6          202011   data_train      202011      0.0   2204
                   7          202011   data_train      202011      1.0   1102

                   -------------------------------- 删除中间表 ----------------------------------------------------- 
20220309-11:04:16  sql语句： drop table if exists ml.mid_eg_model_train_202011
20220309-11:04:16      sql执行完毕
20220309-11:04:16  sql语句： drop table if exists ml.mid_eg_now_train_202011
20220309-11:04:16      sql执行完毕
20220309-11:04:16  sql语句： drop table if exists ml.mid_eg_now_timein_202011
20220309-11:04:16      sql执行完毕

20220309-11:04:16  返回结果表名：ml.mid_eg_recent_train_202011
20220309-11:04:16  将Info保存至./binaryclassify/eg/traintest~202011~202012/Info~base_train.pkl

20220309-11:04:16  结束时间：2022-03-09 11:04:16
20220309-11:04:16  耗时：52 s

                   ###################################################################### 探索模型宽表
                    
20220309-11:04:16  开始时间：2022-03-09 11:04:16
20220309-11:04:16  参数设置：
                       Info.model_name: 模型示例
                       step: train
                       Info.auto_pair2: False
                       table_in: ml.mid_eg_recent_train_202011
                       Info.iv_limit: 0.05
                       stage: explore
                       Info.r_limit: 0.95

20220309-11:04:16  field_base: 82行

20220309-11:04:16  删除7个available_notzd“不可用”字段：['cred_type', 'called_dura', 'days_roam', 'dayvalue_calling_dura', 'dayvalue_gprs_flow', 'dayvalue_user_status', 'dayvalue_phone_no_null']
20220309-11:04:16  field_base: 75行

20220309-11:04:16  删除1个基于“不可用”字段加工的手动衍生_py字段：
                        field_name                 formula
                   52  days_roam_p  days_roam / days_month
20220309-11:04:16  field_base: 74行
20220309-11:04:16  ------------------------- 读取数据: ml.mid_eg_recent_train_202011 2022-03-09 11:04:16 -------------------------
20220309-11:04:16      src: gp
20220309-11:04:16      condition: data_use='data_train'
20220309-11:04:16      col_need(67): ['user_acct_month', 'data_use', 'acct_month', 'user_id', 'innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'innet_date', 'last_stop_date', 'phone_no_null', 'phone_no_tm', 'dinner_id', 'account_id', 'sex', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220309-11:04:16      col_del: None
20220309-11:04:16      col_char(21): ['acct_month', 'phone_no_null', 'phone_no_tm', 'user_id', 'dinner_id', 'account_id', 'sex', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220309-11:04:16      col_num(42): ['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220309-11:04:16      col_date(2): ['innet_date', 'last_stop_date']
20220309-11:04:16      nrows: None
20220309-11:04:16      if_coltolower: True
20220309-11:04:16      kwargs: {}

20220309-11:04:16      读取
20220309-11:04:16      shape: (9918, 67)

20220309-11:04:16  -------------------------读取完毕: (9918, 67) 2022-03-09 11:04:16 -------------------------

20220309-11:04:16  手动衍生_py10个字段: {'monthsaready_last_stop_date': '最后停机时间：已发生时长', 'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_gprs_p': '上网天数占比', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好', 'paste_dinner_innet_months': '主套餐、入网时长：交叉'}
20220309-11:04:16  monthsaready_last_stop_date: current_date - last_stop_date
20220309-11:04:16      将 monthsaready_last_stop_date 字段的 8 个缺失值赋值为: -99999 （非缺失的最小值-2.0）
20220309-11:04:16  monthsremain_last_stop_date: last_stop_date - current_date
20220309-11:04:16      将 monthsremain_last_stop_date 字段的 8 个缺失值赋值为: -99999 （非缺失的最小值-101.0）
20220309-11:04:16  days_gprs_p: days_gprs / days_month
20220309-11:04:16  days_call_p: days_call / days_month
20220309-11:04:16  days_call_p_1: days_call_p + days_gprs
20220309-11:04:16  days_call_p_2: days_call_p_1 + days_gprs
20220309-11:04:16  days_call_p_3: days_call_p_2 + days_gprs
20220309-11:04:16  days_call_p_4: days_call_p_3 + days_gprs
20220309-11:04:16  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220309-11:04:18  paste_dinner_innet_months: (dinner, innet_months)
20220309-11:04:18  数据量: (9918, 77)

20220309-11:04:18  检查数据
20220309-11:04:18  各账期数据量分布：
                       202009  data_train    3306
                       202010  data_train    3306
                       202011  data_train    3306
                       dtype: int64
20220309-11:04:18  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！

20220309-11:04:18  字段类型分布: 
                       float64    45
                       object    25
                       int64    5
                       datetime64[ns]    2
                       dtype: int64


20220309-11:04:18  填充数值型&类别型字段缺失值
20220309-11:04:18  日期型字段缺失值情况：
                       innet_date    0
                       last_stop_date    8
                       dtype: int64

20220309-11:04:18  正负例分布：
                       data_train  202011  0    2204
                       data_train  202011  1    1102
                       dtype: int64

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220309-11:04:18  新数据newdata的shape：(3306, 71)
20220309-11:04:18  数据转换
20220309-11:04:23  转换后shape：(3306, 34)
20220309-11:04:23  从流水线中获取WoeTransformer_DF
20220309-11:04:23  首个数据集，直接返回woe编码结果
20220309-11:04:23  筛选衍生字段的 原始/手动衍生_sql 字段
20220309-11:04:23  数值型字段：有效字段27个，其中当月自动衍生字段26个，近n月自动衍生字段26个
20220309-11:04:23  类别型字段：有效字段7个（强制加入0个）:
20220309-11:04:23      当月自动衍生_py字段7个: ['sex~女', 'sex~男', 'if_nolimit~是', 'if_5g_dinner~是', 'start_level~银卡', 'greatest_gprs_app~commu', 'greatest_gprs_app~video']
20220309-11:04:23      近n月自动衍生_py字段7个: ['sex~女', 'sex~男', 'if_nolimit~是', 'if_5g_dinner~是', 'start_level~银卡', 'greatest_gprs_app~commu', 'greatest_gprs_app~video']

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220309-11:04:23  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:23  新数据newdata的shape：(3306, 27)
20220309-11:04:23  数据转换
20220309-11:04:26  转换后shape：(3306, 26)
20220309-11:04:26  从流水线中获取WoeTransformer_DF
20220309-11:04:27  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有3对
20220309-11:04:27      从中二者中剔除字段3个字段:['avg__dinner_fee', 'monthsremain_last_stop_date', 'gprs_now_defer']
20220309-11:04:27      其中待新增中剔除1个
20220309-11:04:27      其中原宽表中剔除2个

20220309-11:04:27  已有宽表shape：(3306, 34)
20220309-11:04:27  向宽表中加入字段（25个）：['avg__gprs_now_rest', 'avg__gprs_flow_video', 'avg__arpu', 'avg__calling_cnt', 'avg__gprs_flow_short', 'avg__nos_calling', 'avg__days_call_p_4', 'avg__call_use', 'avg__gprs_flow_game', 'avg__gprs_flow_music', 'avg__days_call_p', 'avg__nos_call', 'avg__calling_dura', 'avg__gprs_resource', 'avg__gprs_last_defer', 'avg__gprs_flow_5g', 'avg__gprs_flow_busy', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_cnt', 'avg__gprs_flow_commu', 'avg__gprs_now_defer', 'avg__gprs_flow_roam', 'avg__call_dura_roam', 'avg__nos_calling_diff', 'avg__calling_diff_dura']
20220309-11:04:27  从宽表中删除字段（2个）：['gprs_now_defer', 'monthsremain_last_stop_date']
20220309-11:04:27  目前宽表shape：(3306, 57)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220309-11:04:27  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:27  新数据newdata的shape：(3306, 27)
20220309-11:04:27  数据转换
20220309-11:04:29  转换后shape：(3306, 12)
20220309-11:04:29  从流水线中获取WoeTransformer_DF
20220309-11:04:30  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有1对
20220309-11:04:30      从中二者中剔除字段1个字段:['sep__gprs_flow_game']
20220309-11:04:30      其中待新增中剔除1个
20220309-11:04:30      其中原宽表中剔除0个

20220309-11:04:30  已有宽表shape：(3306, 57)
20220309-11:04:30  向宽表中加入字段（11个）：['sep__calling_dura', 'sep__gprs_now_rest', 'sep__gprs_flow_short', 'sep__calling_diff_dura', 'sep__gprs_resource', 'sep__nos_calling_diff', 'sep__gprs_flow_music', 'sep__gprs_flow_5g', 'sep__gprs_flow_video', 'sep__gprs_flow_commu', 'sep__nos_calling']
20220309-11:04:30  从宽表中删除字段（0个）：[]
20220309-11:04:30  目前宽表shape：(3306, 68)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220309-11:04:30  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:30  新数据newdata的shape：(3306, 27)
20220309-11:04:30  数据转换
20220309-11:04:32  转换后shape：(3306, 15)
20220309-11:04:32  从流水线中获取WoeTransformer_DF
20220309-11:04:33  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有7对
20220309-11:04:33      从中二者中剔除字段7个字段:['sep__gprs_resource', 'sep__gprs_flow_music', 'wave__gprs_flow_video', 'sep__gprs_flow_short', 'wave__gprs_flow_game', 'wave__gprs_flow_5g', 'wave__gprs_flow_commu']
20220309-11:04:33      其中待新增中剔除4个
20220309-11:04:33      其中原宽表中剔除3个

20220309-11:04:33  已有宽表shape：(3306, 68)
20220309-11:04:33  向宽表中加入字段（11个）：['wave__gprs_now_rest', 'wave__gprs_flow_short', 'wave__call_use', 'wave__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_now_defer', 'wave__gprs_resource', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__nos_calling_diff']
20220309-11:04:33  从宽表中删除字段（3个）：['sep__gprs_flow_short', 'sep__gprs_resource', 'sep__gprs_flow_music']
20220309-11:04:33  目前宽表shape：(3306, 76)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220309-11:04:33  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:33  新数据newdata的shape：(3306, 27)
20220309-11:04:33  数据转换
20220309-11:04:36  转换后shape：(3306, 24)
20220309-11:04:36  从流水线中获取WoeTransformer_DF
20220309-11:04:36  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有14对
20220309-11:04:36      从中二者中剔除字段14个字段:['grow__gprs_flow_game', 'grow__nos_calling_diff', 'grow__dinner_fee', 'grow__gprs_flow_music', 'calling_diff_cnt', 'grow__call_dura_roam', 'grow__calling_diff_dura', 'grow__gprs_flow_busy', 'grow__days_call_p', 'grow__calling_cnt', 'grow__monthsremain_last_stop_date', 'grow__calling_dura', 'grow__gprs_now_defer', 'gprs_flow_commu']
20220309-11:04:36      其中待新增中剔除12个
20220309-11:04:36      其中原宽表中剔除2个

20220309-11:04:36  已有宽表shape：(3306, 76)
20220309-11:04:36  向宽表中加入字段（12个）：['grow__gprs_flow_video', 'grow__arpu', 'grow__gprs_flow_short', 'grow__days_call_p_4', 'grow__gprs_resource', 'grow__nos_calling', 'grow__gprs_flow_5g', 'grow__gprs_last_defer', 'grow__gprs_now_rest', 'grow__gprs_flow_commu', 'grow__call_use', 'grow__calling_diff_cnt']
20220309-11:04:36  从宽表中删除字段（2个）：['gprs_flow_commu', 'calling_diff_cnt']
20220309-11:04:36  目前宽表shape：(3306, 86)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220309-11:04:36  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:36  新数据newdata的shape：(3306, 27)
20220309-11:04:36  数据转换
20220309-11:04:38  转换后shape：(3306, 26)
20220309-11:04:38  从流水线中获取WoeTransformer_DF
20220309-11:04:41  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有10对
20220309-11:04:41      从中二者中剔除字段10个字段:['max__gprs_flow_game', 'max__gprs_flow_music', 'max__gprs_flow_5g', 'avg__gprs_flow_short', 'max__gprs_flow_video', 'max__gprs_now_defer', 'avg__gprs_flow_roam', 'max__gprs_resource', 'max__monthsremain_last_stop_date', 'max__gprs_flow_busy']
20220309-11:04:41      其中待新增中剔除8个
20220309-11:04:41      其中原宽表中剔除2个

20220309-11:04:41  已有宽表shape：(3306, 86)
20220309-11:04:41  向宽表中加入字段（18个）：['max__nos_calling', 'max__call_dura_roam', 'max__calling_diff_dura', 'max__call_use', 'max__gprs_last_defer', 'max__calling_cnt', 'max__nos_call', 'max__calling_dura', 'max__gprs_flow_short', 'max__gprs_now_rest', 'max__arpu', 'max__gprs_flow_roam', 'max__calling_diff_cnt', 'max__dinner_fee', 'max__gprs_flow_commu', 'max__nos_calling_diff', 'max__days_call_p_4', 'max__days_call_p']
20220309-11:04:41  从宽表中删除字段（2个）：['avg__gprs_flow_short', 'avg__gprs_flow_roam']
20220309-11:04:41  目前宽表shape：(3306, 102)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220309-11:04:41  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:41  新数据newdata的shape：(3306, 27)
20220309-11:04:41  数据转换
20220309-11:04:43  转换后shape：(3306, 22)
20220309-11:04:44  从流水线中获取WoeTransformer_DF
20220309-11:04:46  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有3对
20220309-11:04:46      从中二者中剔除字段3个字段:['min__monthsremain_last_stop_date', 'min__dinner_fee', 'min__gprs_now_defer']
20220309-11:04:46      其中待新增中剔除3个
20220309-11:04:46      其中原宽表中剔除0个

20220309-11:04:46  已有宽表shape：(3306, 102)
20220309-11:04:46  向宽表中加入字段（19个）：['min__calling_dura', 'min__gprs_resource', 'min__gprs_now_rest', 'min__gprs_flow_commu', 'min__days_call_p_4', 'min__gprs_flow_game', 'min__nos_calling_diff', 'min__gprs_flow_music', 'min__calling_diff_cnt', 'min__gprs_flow_busy', 'min__nos_calling', 'min__arpu', 'min__gprs_flow_short', 'min__gprs_flow_video', 'min__call_use', 'min__gprs_flow_roam', 'min__calling_diff_dura', 'min__gprs_last_defer', 'min__calling_cnt']
20220309-11:04:46  从宽表中删除字段（0个）：[]
20220309-11:04:46  目前宽表shape：(3306, 121)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220309-11:04:46  字段个数：26, 添加字段：['flag_eg']
20220309-11:04:46  新数据newdata的shape：(3306, 27)
20220309-11:04:46  数据转换
20220309-11:04:48  转换后shape：(3306, 19)
20220309-11:04:48  从流水线中获取WoeTransformer_DF
20220309-11:04:51  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有5对
20220309-11:04:51      从中二者中剔除字段5个字段:['std__gprs_flow_game', 'std__gprs_flow_music', 'std__gprs_flow_short', 'std__gprs_flow_roam', 'std__gprs_flow_video']
20220309-11:04:51      其中待新增中剔除5个
20220309-11:04:51      其中原宽表中剔除0个

20220309-11:04:51  已有宽表shape：(3306, 121)
20220309-11:04:51  向宽表中加入字段（14个）：['std__nos_calling', 'std__gprs_flow_5g', 'std__gprs_flow_busy', 'std__calling_dura', 'std__calling_diff_cnt', 'std__gprs_now_rest', 'std__gprs_resource', 'std__calling_cnt', 'std__gprs_flow_commu', 'std__call_use', 'std__call_dura_roam', 'std__calling_diff_dura', 'std__nos_calling_diff', 'std__gprs_last_defer']
20220309-11:04:51  从宽表中删除字段（0个）：[]
20220309-11:04:51  目前宽表shape：(3306, 135)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220309-11:04:51  ('more0cnt', '近3月大于0的月份数')
20220309-11:04:51  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220309-11:04:51  新数据newdata的shape：(3306, 53)
20220309-11:04:51  数据转换
20220309-11:04:54  转换后shape：(3306, 19)
20220309-11:04:54  从流水线中获取WoeTransformer_DF
20220309-11:04:55  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有3对
20220309-11:04:55      从中二者中剔除字段3个字段:['moreq25cnt__gprs_flow_game', 'moreq25cnt__gprs_flow_music', 'moreq25cnt__gprs_flow_short']
20220309-11:04:55      其中待新增中剔除3个
20220309-11:04:55      其中原宽表中剔除0个

20220309-11:04:55  已有宽表shape：(3306, 135)
20220309-11:04:55  向宽表中加入字段（16个）：['moreq25cnt__calling_dura', 'more0cnt__nos_calling', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__nos_calling', 'moreq25cnt__gprs_now_defer', 'more0cnt__calling_dura', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_resource', 'moreq25cnt__dinner_fee', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy']
20220309-11:04:55  从宽表中删除字段（0个）：[]
20220309-11:04:55  目前宽表shape：(3306, 151)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220309-11:04:55  字段个数：7, 添加字段：['flag_eg']
20220309-11:04:55  新数据newdata的shape：(3306, 8)
20220309-11:04:55  数据转换
20220309-11:04:56  转换后shape：(3306, 7)
20220309-11:04:56  从流水线中获取WoeTransformer_DF
20220309-11:04:56  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有5对
20220309-11:04:56      从中二者中剔除字段5个字段:['sex~男', 'sex~女', 'start_level~银卡', 'valuecnt__if_nolimit~是', 'if_5g_dinner~是']
20220309-11:04:56      其中待新增中剔除1个
20220309-11:04:56      其中原宽表中剔除4个

20220309-11:04:56  已有宽表shape：(3306, 151)
20220309-11:04:56  向宽表中加入字段（6个）：['valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__sex~女', 'valuecnt__sex~男']
20220309-11:04:56  从宽表中删除字段（4个）：['start_level~银卡', 'sex~女', 'if_5g_dinner~是', 'sex~男']
20220309-11:04:56  目前宽表shape：(3306, 153)

                   ----------------------------------------- 汇总最终宽表 
20220309-11:04:56  计算字段之间的相关性系数
20220309-11:04:56  
                       count    11628.0
                       mean    0.278
                       std    0.185
                       min    0.0
                       25%    0.145
                       50%    0.224
                       75%    0.368
                       max    0.949
                       dtype: float64

20220309-11:04:56  iv分布：
                       count    153.0
                       mean    0.183
                       std    0.16
                       min    0.051
                       25%    0.074
                       50%    0.112
                       75%    0.253
                       max    0.804
                       dtype: float64

20220309-11:04:57  woe_accum(累计)概览：                                     value    0    1       woe    weight  woe_weight  ALL
                       gprs_flow_4g          (1269462.0, inf]  128  398  1.827569  0.303085    0.553909  526
                       gprs_flow_busy        (1269545.0, inf]  128  398  1.827569  0.303085    0.553909  526
                       gprs_flow             (1269545.0, inf]  128  398  1.827569  0.303085    0.553909  526
                       grow__gprs_flow_busy   (0.143263, inf]  128  394  1.817468  0.299456    0.544251  522
                       avg__gprs_flow_commu  (28.166666, inf]  190  397  1.430059  0.274047    0.391904  587

20220309-11:04:57  最终宽表字段列表col_all:
20220309-11:04:57      len(col_all): 153
20220309-11:04:57      补充4个的字段（must_remain=是）：{'greatest_gprs_app', 'gprs_flow_commu', 'account_id', 'user_status'}
20220309-11:04:57      len(col_all): 157
20220309-11:04:57      补充账期、数据集名称、用户标识等，目标字段(Info.col_mark、Info.col_target)
20220309-11:04:57      len(col_all): 162

20220309-11:04:57      补充6个的字段（col_mark、col_target、condition、dict_sortscore、col_out）：{'sms_cnt', 'last_stop_date', 'call_fee_local', 'phone_no_null', 'dayvalue_user_status', 'dayvalue_phone_no_null'}
20220309-11:04:57      len(col_all): 168
20220309-11:04:57  整理宽表数据字典
                   宽表数据字典概览 (168, 14):
                        是否宽表字段       field_name         comment dtype_classify     field_src available available_notzd available_zd formula          remark must_remain into_model is_cause  \
                                  是  user_acct_month  观察期最后账期         类别型  手动衍生_sql       NaN             NaN          NaN     NaN             NaN         NaN        NaN      NaN   
                                  是         data_use      数据集名称         类别型  手动衍生_sql       NaN             NaN          NaN     NaN             NaN         NaN        NaN      NaN   
                                  是       acct_month            账期         类别型          原始       NaN             NaN          NaN     NaN             NaN         NaN        NaN       否   
                                  是    phone_no_null        手机号码         类别型          原始       NaN             NaN          NaN     NaN  不参与自动衍生         NaN       删除       否   
                                  是          user_id        手机号id         类别型          原始       NaN             NaN          NaN     NaN             NaN         NaN        NaN       否   
                   
                               base_init  
                         user_acct_month  
                                data_use  
                              acct_month  
                           phone_no_null  
                                 user_id  

20220309-11:04:57  保存Info至：./binaryclassify/eg/traintest~202011~202012/Info~tabexp.pkl
20220309-11:04:57  结束时间：2022-03-09 11:04:57
20220309-11:04:57  耗时：40 s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: opera_pair_fun paste时存在非类别型字段，请确认: ['innet_months']
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: field_base中未包括下列字段，但实际数据 多出：{'user_acct_month', 'data_use'}
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: field_base中未规定下列字段数据类型，请确认默认类型是否正确：{'user_acct_month': 'object', 'data_use': 'object'}
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(3306), 添加unique_limit_actual：len(X)*0.99=3272
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     NumStrSpliter 数据中未出现非数值型字段！
  mapped = lib.map_infer(values, f, convert=convert_dtype)

                   ###################################################################### 训练集加工
                    
20220309-11:04:57  开始时间：2022-03-09 11:04:57
20220309-11:04:57  参数设置：
                       Info.model_name: 模型示例
                       step: train
                       Info.auto_pair2: False
                       table_in: ml.mid_eg_recent_train_202011
                       stage: create
                       Info.iv_limit: 0.05
                       Info.r_limit: 0.95

20220309-11:04:57  ------------------------- 读取数据: ml.mid_eg_recent_train_202011 2022-03-09 11:04:57 -------------------------
20220309-11:04:57      src: gp
20220309-11:04:57      condition: None
20220309-11:04:57      col_need(43): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'innet_months', 'sex', 'user_status', 'last_stop_date', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'if_nolimit', 'if_5g_dinner', 'start_level', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220309-11:04:57      col_del: None
20220309-11:04:57      col_char(14): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'sex', 'user_status', 'if_nolimit', 'if_5g_dinner', 'start_level', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220309-11:04:57      col_num(28): ['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220309-11:04:57      col_date(1): ['last_stop_date']
20220309-11:04:57      nrows: None
20220309-11:04:57      if_coltolower: True
20220309-11:04:57      kwargs: {}

20220309-11:04:57      读取
20220309-11:04:57      shape: (11418, 43)

20220309-11:04:57  -------------------------读取完毕: (11418, 43) 2022-03-09 11:04:57 -------------------------

20220309-11:04:57  手动衍生_py7个字段: {'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好'}
20220309-11:04:57  monthsremain_last_stop_date: last_stop_date - current_date
20220309-11:04:57      将 monthsremain_last_stop_date 字段的 8 个缺失值赋值为: -99999 （非缺失的最小值-101.0）
20220309-11:04:57  days_call_p: days_call / days_month
20220309-11:04:57  days_call_p_1: days_call_p + days_gprs
20220309-11:04:57  days_call_p_2: days_call_p_1 + days_gprs
20220309-11:04:57  days_call_p_3: days_call_p_2 + days_gprs
20220309-11:04:57  days_call_p_4: days_call_p_3 + days_gprs
20220309-11:04:57  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220309-11:04:59  数据量: (11418, 50)

20220309-11:04:59  检查数据
20220309-11:04:59  各账期数据量分布：
                       202009  data_timein    500
                       202009  data_train    3306
                       202010  data_timein    500
                       202010  data_train    3306
                       202011  data_timein    500
                       202011  data_train    3306
                       dtype: int64
20220309-11:04:59  各账期数据量不一致
20220309-11:04:59  以nan填充缺少账期的记录
20220309-11:04:59      修改后：
                       202009  data_timein    500
                       202009  data_train    3306
                       202010  data_timein    500
                       202010  data_train    3306
                       202011  data_timein    500
                       202011  data_train    3306
                       dtype: int64)
20220309-11:04:59  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！


20220309-11:04:59  填充数值型&类别型字段缺失值
20220309-11:04:59  日期型字段缺失值情况：
                       last_stop_date    8
                       dtype: int64

20220309-11:04:59  正负例分布：
                       data_timein  202011  0    435
                       data_timein  202011  1    65
                       data_train  202011  0    2204
                       data_train  202011  1    1102
                       dtype: int64

                   ----------------------------------------- 当月 类别型 onthot 
20220309-11:04:59  ['if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video']

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220309-11:04:59  (3806, 41)
20220309-11:04:59  筛选衍生字段的 原始/手动衍生_sql 字段

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220309-11:04:59  字段个数：23, 添加字段：None
20220309-11:04:59  (3806, 64)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220309-11:04:59  字段个数：8, 添加字段：None
20220309-11:05:00  (3806, 72)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220309-11:05:00  字段个数：11, 添加字段：None
20220309-11:05:00  (3806, 83)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220309-11:05:00  字段个数：12, 添加字段：None
20220309-11:05:00  (3806, 95)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220309-11:05:00  字段个数：18, 添加字段：None
20220309-11:05:00  (3806, 113)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220309-11:05:00  字段个数：19, 添加字段：None
20220309-11:05:00  (3806, 132)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220309-11:05:00  字段个数：14, 添加字段：None
20220309-11:05:00  (3806, 146)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220309-11:05:00  ('more0cnt', '近3月大于0的月份数')
20220309-11:05:00  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220309-11:05:00  (3806, 162)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220309-11:05:00  字段个数：6, 添加字段：None
20220309-11:05:00  (3806, 168)

                   ----------------------------------------- 汇总最终宽表 
20220309-11:05:00  table.shape:(3806, 168)

20220309-11:05:00  保存宽表结果至：./binaryclassify/eg/traintest~202011~202012/train_data~202011.csv

20220309-11:05:00  计算字段之间的相关性系数
20220309-11:05:01  
                       count    11628.0
                       mean    0.163
                       std    0.191
                       min    0.0
                       25%    0.038
                       50%    0.099
                       75%    0.203
                       max    1.0
                       dtype: float64


                   ------------------------------- 计算宽表字段psi ------------------------------------ 
20220309-11:05:01  训练集 data_train
                    
                    20220309-11:05:01  my toolmodule.dataprep.PsiTransformer_DF fit
                    20220309-11:05:01      开始时间：2022-03-09 11:05:01
                    20220309-11:05:01      data in : (3306, 157)
                    20220309-11:05:01      首次从X获取id_X属性 2713797816392
                    20220309-11:05:01      fit轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=True, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                    20220309-11:05:01      输入数据中包括154个数值型字段，先对其进行mdlp分箱：['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
                    20220309-11:05:01      ---------------------------Psi: Mdlp_dt_DF start -------------------------------
                                           
                                           20220309-11:05:01  my toolmodule.dataprep.Mdlp_dt_DF fit_transform
                                           20220309-11:05:01      开始时间：2022-03-09 11:05:01
                                           20220309-11:05:01      data in : (3306, 154)
                                               
                                               20220309-11:05:01  my toolmodule.dataprep.Mdlp_dt_DF fit
                                               20220309-11:05:01      开始时间：2022-03-09 11:05:01
                                               20220309-11:05:01      data in : (3306, 154)
                                               20220309-11:05:01      首次从X获取id_X属性 2713833983432
                                               20220309-11:05:01      fit轨迹：Mdlp_dt_DF(bin_uplimit=None, if_del=False, min_binsize=30, precision=6, , trans_na_error=True)
                                               20220309-11:05:07      结束时间：2022-03-09 11:05:07 耗时(6s)
                                               
                                               20220309-11:05:07  my toolmodule.dataprep.Mdlp_dt_DF transform
                                               20220309-11:05:07      开始时间：2022-03-09 11:05:07
                                               20220309-11:05:07      data in : (3306, 154)
                                               20220309-11:05:07      self已带有id_X属性 2713833983432
                                               20220309-11:05:07      首次从X获取id_X_new属性 2713833983432
                                               20220309-11:05:08      data out: (3306, 154)
                                               20220309-11:05:08      transform轨迹：Mdlp_dt_DF(bin_uplimit=None, if_del=False, min_binsize=30, precision=6, , trans_na_error=True)
                                               20220309-11:05:08      结束时间：2022-03-09 11:05:08 耗时(1s)
                                           
                                           20220309-11:05:08      my toolmodule.dataprep.Mdlp_dt_DF fit_transform 结束时间：2022-03-09 11:05:08 耗时(7s)
                    20220309-11:05:08      ---------------------------Psi: Mdlp_dt_DF end -------------------------------
                    20220309-11:05:08      合并离散后的数值字段 与 类别字段：(3306, 157)
                    20220309-11:05:08      data_train（初次） 统计频数（区分正负例）：self.col_pop_PN_old_
                    20220309-11:05:10      data_train（初次） 统计频数（不区分正负例）：self.col_pop_all_old_
                    20220309-11:05:10      结束时间：2022-03-09 11:05:10 耗时(9s)


20220309-11:05:10  时间内验证集 data_timein
                    
                    20220309-11:05:10  my toolmodule.dataprep.PsiTransformer_DF transform
                    20220309-11:05:10      开始时间：2022-03-09 11:05:10
                    20220309-11:05:10      data in : (500, 167)
                    20220309-11:05:10      self已带有id_X属性 2713797816392
                    20220309-11:05:10      首次从X获取id_X_new属性 2713806646728
                    20220309-11:05:10      data in2: (500, 157)
                    20220309-11:05:10      对154个数值字段进行分箱：['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
                    20220309-11:05:14      timedata_timein 计算稳定度（不区分正负例）：self.col_psi_all_
                    20220309-11:05:15      data_timein 计算稳定度（区分正负例）：self.col_psi_PN_
                    20220309-11:05:19      data out: (500, 157)
                    20220309-11:05:19      transform轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=True, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                    20220309-11:05:19      结束时间：2022-03-09 11:05:19 耗时(8s)


20220309-11:05:19  保存Info至：./binaryclassify/eg/traintest~202011~202012/Info~tabcre_train.pkl
20220309-11:05:19  结束时间：2022-03-09 11:05:19
20220309-11:05:19  耗时：22 s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: stage取值为create时,r_limit, iv_limit参数无效，将被忽略
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer timedata_timein 计算稳定性(不区分正负例) ['account_id']字段多出392个取值, .head(5):
                      old  new
field      value              
account_id 101923773  NaN  1.0
           101986492  NaN  1.0
           102386675  NaN  1.0
           103602477  NaN  1.0
           103696507  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer timedata_timein 计算稳定性(不区分正负例)，1个字段稳定性>=psi_limit（0.1）：
account_id    0.360515
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例)-正例（1） ['account_id']字段多出392个取值, .head(5):
                      old  new
field      value              
account_id 101923773  NaN  1.0
           101986492  NaN  1.0
           102386675  NaN  1.0
           103602477  NaN  1.0
           103696507  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例)-负例（0） ['account_id']字段多出392个取值, .head(5):
                      old  new
field      value              
account_id 101923773  NaN  1.0
           101986492  NaN  1.0
           102386675  NaN  1.0
           103602477  NaN  1.0
           103696507  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例) ，11个字段稳定性>=psi_limit（0.1）：
account_id                0.261955
moreq25cnt__dinner_fee    0.179420
dinner_fee                0.153487
max__dinner_fee           0.152195
gprs_flow_busy            0.123167
min__gprs_last_defer      0.119493
max__gprs_last_defer      0.118428
gprs_last_defer           0.111160
gprs_flow_short           0.106784
avg__gprs_flow_video      0.105901
max__call_use             0.104073
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)

                   ###################################################################### 加工测试账期近n月基础数据
                    
20220309-11:05:19  开始时间：2022-03-09 11:05:19
20220309-11:05:19  month: 202012
20220309-11:05:19  参数设置：
                       step: test
                       Info.model_name: 模型示例
                       Info.n_recent: 3
                       drop_midtable: True
                       cover_table_all: True
                       Info.timeout_limit: 1000

                   ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220309-11:05:19  检查 ml.ml_feature_info_yw_user_m
20220309-11:05:19      72 列
20220309-11:05:19      202012账期： 15000行
20220309-11:05:19      202011账期： 10000行
20220309-11:05:19      202010账期： 15000行


20220309-11:05:19  检查 ml.ml_feature_add_yw_user_m
20220309-11:05:20      4 列
20220309-11:05:20      202012账期： 15000行
20220309-11:05:20      202011账期： 10000行
20220309-11:05:20      202010账期： 15000行


20220309-11:05:20  检查 ml.ml_feature_info_yw_user_day (20210115账期)
20220309-11:05:20      7 列
20220309-11:05:20      20210115账期： 18000行


20220309-11:05:20  检查 ml.ml_target_info_yw_user_m
20220309-11:05:20      7 列
20220309-11:05:20      202012账期： 15000行

20220309-11:05:20      获取目标字段flag_eg类型：integer



                   -------------------- 汇总当期特征与目标：ml.dm_zc_moxing_info_target_202012 -------------------------- 
20220309-11:05:20  查询表： 
                       select concat(table_schema, '.', table_name) full_name
                       from information_schema.tables 
                       where table_schema = 'ml' and table_name='dm_zc_moxing_info_target_202012'
                       存在1个表 
20220309-11:05:20  ml.dm_zc_moxing_info_target_202012已存在，将重建覆盖
20220309-11:05:20  建表语句： 
                       drop table if exists ml.dm_zc_moxing_info_target_202012;
                       select pg_sleep(10);
                       create table ml.dm_zc_moxing_info_target_202012 as
                       select * from (
                           select a.* 
                           , a2.age_add, a2.sex_add
                           , day.phone_no_null dayvalue_phone_no_null, day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura, day.user_status dayvalue_user_status
                           ,b.flag_eg, b.ymonth_flag_eg2, b.ymonth, b.exe_sam, b.flag_eg2
                           from (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202012') a 
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202012') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20210115') day on a.user_id = day.user_id
                           left join (select * from ml.ml_target_info_yw_user_m where cast(acct_month as text)='202012') b on a.user_id = b.user_id
                       ) t where 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3
20220309-11:05:30      sql执行完毕
20220309-11:05:30  统计 ml.dm_zc_moxing_info_target_202012 的行列数
20220309-11:05:30      12655行，83列
20220309-11:05:30  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.dm_zc_moxing_info_target_202012  group by flag_eg
20220309-11:05:30      dis_test_total: {'count': 12655, 'Pcount': 1871, 'prop': 0.148}


                   ------------------------- 测试集-当月账期数据：ml.mid_eg_now_test_202012 ---------------------------- 
20220309-11:05:30  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.dm_zc_moxing_info_target_202012 where dayvalue_user_status='在网-正常' and 
                       phone_no_null is null and
                       dayvalue_phone_no_null is null and
                       last_stop_date is not null and
                       innet_months >= 3 and flag_eg is not null group by flag_eg
20220309-11:05:30      dis_test_model {'count': 12449, 'Pcount': 1832, 'prop': 0.147}

20220309-11:05:30      dis_test_model 较 dis_train_model 正例占比 变动幅度2.79720% (0.147 较 0.143)

20220309-11:05:30  Info.timeout_limit取值为1000，抽取1000用户
20220309-11:05:30  建表语句（202012账期当月数据） 
                       drop table if exists ml.mid_eg_now_test_202012;
                       select pg_sleep(10);
                       create table ml.mid_eg_now_test_202012 as 
                       select *  from ml.dm_zc_moxing_info_target_202012
                       where dayvalue_user_status='在网-正常' and 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3 and flag_eg is not null
                       order by random() limit 1000
20220309-11:05:41      sql执行完毕
20220309-11:05:41  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_now_test_202012  group by flag_eg
20220309-11:05:41      dis_test_sample {'count': 1000, 'Pcount': 142, 'prop': 0.142}

20220309-11:05:41      dis_test_sample 较 dis_test_model 正例占比 变动幅度-3.40136% (0.142 较 0.147)


                   ------------------------ 合并近n月数据：ml.mid_eg_recent_test_202012  -------------------------------- 
20220309-11:05:41  建表语句： 
                       drop table if exists ml.mid_eg_recent_test_202012;
                       select pg_sleep(10);
                       create table ml.mid_eg_recent_test_202012 as 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202012 as text) user_acct_month, cast('data_timeout'  as text) data_use, * from ml.mid_eg_now_test_202012
                       ) t0
                       union all 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202012 as text) user_acct_month, cast('data_timeout'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_test_202012 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202011') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202011') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201215') day on a.user_id = day.user_id
                       ) t1
                       union all
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202012 as text) user_acct_month, cast('data_timeout'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.gprs_flow dayvalue_gprs_flow, day.calling_dura dayvalue_calling_dura
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_test_202012 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202010') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202010') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201115') day on a.user_id = day.user_id
                       ) t2
20220309-11:05:51      sql执行完毕
20220309-11:05:51  统计ml.mid_eg_recent_test_202012行列数
20220309-11:05:51      1000行，74列

                   --------------------------------- 核验各账期数据量  -------------------------------------------------- 
20220309-11:05:51  sql语句： 
                       select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                       from ml.mid_eg_recent_test_202012 
                       group by user_acct_month, data_use, acct_month, flag_eg 
                       order by user_acct_month, data_use, acct_month, flag_eg

20220309-11:05:51  结果：
                     user_acct_month      data_use  acct_month  flag_eg  count
                   0          202012  data_timeout      202010      NaN   1000
                   1          202012  data_timeout      202011      NaN    684
                   2          202012  data_timeout      202012      0.0    858
                   3          202012  data_timeout      202012      1.0    142


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\tablemodule\tablefun.py:910: UserWarning: 下列账期用户量不同，请检查！
                              acct_month  flag_eg  count
user_acct_month data_use                                
202012          data_timeout      202010      0.0   1000
                data_timeout      202011      0.0    684
                data_timeout      202012      1.0   1000
  warnings.warn(w)

                   -------------------------------- 删除中间表 ----------------------------------------------------- 
20220309-11:05:51  sql语句： drop table if exists ml.mid_eg_model_test_202012
20220309-11:05:51      sql执行完毕
20220309-11:05:51  sql语句： drop table if exists ml.mid_eg_now_test_202012
20220309-11:05:51      sql执行完毕

20220309-11:05:51  返回结果表名：ml.mid_eg_recent_test_202012
20220309-11:05:51  将Info保存至./binaryclassify/eg/traintest~202011~202012/Info~base_test.pkl

20220309-11:05:51  结束时间：2022-03-09 11:05:51
20220309-11:05:51  耗时：31 s
                   ###################################################################### 测试集加工
                    
20220309-11:05:51  开始时间：2022-03-09 11:05:51
20220309-11:05:51  参数设置：
                       step: test
                       Info.model_name: 模型示例
                       Info.auto_pair2: False
                       table_in: ml.mid_eg_recent_test_202012
                       stage: create
                       Info.iv_limit: 0.05
                       Info.r_limit: 0.95

20220309-11:05:51  ------------------------- 读取数据: ml.mid_eg_recent_test_202012 2022-03-09 11:05:51 -------------------------
20220309-11:05:51      src: gp
20220309-11:05:51      condition: None
20220309-11:05:51      col_need(43): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'innet_months', 'sex', 'user_status', 'last_stop_date', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'if_nolimit', 'if_5g_dinner', 'start_level', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220309-11:05:51      col_del: None
20220309-11:05:51      col_char(14): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'sex', 'user_status', 'if_nolimit', 'if_5g_dinner', 'start_level', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220309-11:05:51      col_num(28): ['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220309-11:05:51      col_date(1): ['last_stop_date']
20220309-11:05:51      nrows: None
20220309-11:05:51      if_coltolower: True
20220309-11:05:51      kwargs: {}

20220309-11:05:51      读取
20220309-11:05:51      shape: (2684, 43)

20220309-11:05:51  -------------------------读取完毕: (2684, 43) 2022-03-09 11:05:51 -------------------------

20220309-11:05:51  手动衍生_py7个字段: {'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好'}
20220309-11:05:51  monthsremain_last_stop_date: last_stop_date - current_date
20220309-11:05:51  days_call_p: days_call / days_month
20220309-11:05:51  days_call_p_1: days_call_p + days_gprs
20220309-11:05:51  days_call_p_2: days_call_p_1 + days_gprs
20220309-11:05:51  days_call_p_3: days_call_p_2 + days_gprs
20220309-11:05:51  days_call_p_4: days_call_p_3 + days_gprs
20220309-11:05:51  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220309-11:05:52  数据量: (2684, 50)

20220309-11:05:52  检查数据
20220309-11:05:52  各账期数据量分布：
                       202010  data_timeout    1000
                       202011  data_timeout    684
                       202012  data_timeout    1000
                       dtype: int64
20220309-11:05:52  各账期数据量不一致
20220309-11:05:52  以nan填充缺少账期的记录
20220309-11:05:52      修改后：
                       202010  data_timeout    1000
                       202011  data_timeout    1000
                       202012  data_timeout    1000
                       dtype: int64)
20220309-11:05:52  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！


20220309-11:05:52  填充数值型&类别型字段缺失值
20220309-11:05:52  日期型字段缺失值情况：
                       last_stop_date    316
                       dtype: int64

20220309-11:05:52  正负例分布：
                       data_timeout  202012  0    858
                       data_timeout  202012  1    142
                       dtype: int64

                   ----------------------------------------- 当月 类别型 onthot 
20220309-11:05:52  ['if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video']

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220309-11:05:52  (1000, 41)
20220309-11:05:52  筛选衍生字段的 原始/手动衍生_sql 字段

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220309-11:05:52  字段个数：23, 添加字段：None
20220309-11:05:52  (1000, 64)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220309-11:05:52  字段个数：8, 添加字段：None
20220309-11:05:52  (1000, 72)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220309-11:05:52  字段个数：11, 添加字段：None
20220309-11:05:52  (1000, 83)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220309-11:05:52  字段个数：12, 添加字段：None
20220309-11:05:52  (1000, 95)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220309-11:05:52  字段个数：18, 添加字段：None
20220309-11:05:52  (1000, 113)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220309-11:05:52  字段个数：19, 添加字段：None
20220309-11:05:52  (1000, 132)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220309-11:05:52  字段个数：14, 添加字段：None
20220309-11:05:52  (1000, 146)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220309-11:05:52  ('more0cnt', '近3月大于0的月份数')
20220309-11:05:52  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220309-11:05:52  (1000, 162)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220309-11:05:52  字段个数：6, 添加字段：None
20220309-11:05:52  (1000, 168)

                   ----------------------------------------- 汇总最终宽表 
20220309-11:05:52  table.shape:(1000, 168)

20220309-11:05:52  保存宽表结果至：./binaryclassify/eg/traintest~202011~202012/test_data~202012.csv

20220309-11:05:52  计算字段之间的相关性系数
20220309-11:05:53  
                       count    11628.0
                       mean    0.181
                       std    0.194
                       min    0.0
                       25%    0.054
                       50%    0.115
                       75%    0.223
                       max    1.0
                       dtype: float64


                   ------------------------------- 计算宽表字段psi ------------------------------------ 
                    
                    20220309-11:05:53  my toolmodule.dataprep.PsiTransformer_DF transform
                    20220309-11:05:53      开始时间：2022-03-09 11:05:53
                    20220309-11:05:53      data in : (1000, 168)
                    20220309-11:05:53      self已带有id_X属性 2713797816392
                    20220309-11:05:53      首次从X获取id_X_new属性 2713801723016
                    20220309-11:05:53      data in2: (1000, 157)
                    20220309-11:05:53      对154个数值字段进行分箱：['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
                    20220309-11:05:53      timedata_timeout 计算稳定度（不区分正负例）：self.col_psi_all_
                    20220309-11:05:55      data_timeout 计算稳定度（区分正负例）：self.col_psi_PN_
                    20220309-11:05:59      data out: (1000, 157)
                    20220309-11:05:59      transform轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=True, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                    20220309-11:05:59      结束时间：2022-03-09 11:05:59 耗时(5s)
20220309-11:05:59  保存Psi至：./binaryclassify/eg/traintest~202011~202012/test_Psi~202011~202012.pkl
20220309-11:05:59  保存dis_exam至：./binaryclassify/eg/traintest~202011~202012/test_dis_exam~202012.pkl
20220309-11:05:59  结束时间：2022-03-09 11:05:59
20220309-11:05:59  耗时：7 s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: stage取值为create时,r_limit, iv_limit参数无效，将被忽略
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer timedata_timeout 计算稳定性(不区分正负例) ['account_id']字段多出515个取值, .head(5):
                      old  new
field      value              
account_id 102042101  NaN  1.0
           102195262  NaN  1.0
           102195502  NaN  1.0
           103607797  NaN  1.0
           103675015  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，35个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_rest             1.504922
days_call_p_4                   0.809868
wave__gprs_resource             0.377395
min__gprs_now_rest              0.341050
wave__gprs_now_rest             0.231853
more0cnt__calling_dura          0.228019
moreq25cnt__calling_dura        0.205517
moreq25cnt__arpu                0.196347
sep__nos_calling                0.185783
moreq25cnt__calling_cnt         0.176194
sep__nos_calling_diff           0.172942
wave__calling_dura              0.169821
grow__gprs_resource             0.169497
moreq25cnt__gprs_flow_busy      0.164294
sep__gprs_flow_commu            0.161464
moreq25cnt__calling_diff_cnt    0.146664
std__nos_calling_diff           0.144688
more0cnt__nos_calling           0.142886
account_id                      0.142598
min__calling_cnt                0.139609
wave__gprs_flow_music           0.136191
std__gprs_flow_busy             0.124236
sep__gprs_flow_video            0.123678
moreq25cnt__nos_calling         0.122861
wave__gprs_now_defer            0.121804
std__gprs_flow_commu            0.119411
max__gprs_flow_commu            0.117757
grow__arpu                      0.117360
wave__gprs_flow_short           0.115507
min__arpu                       0.115032
avg__days_call_p_4              0.114919
wave__call_use                  0.108875
avg__days_call_p                0.105083
wave__calling_diff_cnt          0.102513
min__calling_diff_cnt           0.100279
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例)-正例（1） ['account_id']字段多出515个取值, .head(5):
                      old  new
field      value              
account_id 102042101  NaN  1.0
           102195262  NaN  1.0
           102195502  NaN  1.0
           103607797  NaN  1.0
           103675015  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例)-负例（0） ['account_id']字段多出515个取值, .head(5):
                      old  new
field      value              
account_id 102042101  NaN  1.0
           102195262  NaN  1.0
           102195502  NaN  1.0
           103607797  NaN  1.0
           103675015  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例) ，51个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_rest                  1.573618
days_call_p_4                        1.021602
moreq25cnt__arpu                     0.482879
wave__gprs_resource                  0.406220
moreq25cnt__gprs_flow_busy           0.396032
min__arpu                            0.390187
min__gprs_now_rest                   0.382349
more0cnt__calling_dura               0.352916
wave__gprs_flow_music                0.351114
moreq25cnt__calling_dura             0.302418
moreq25cnt__calling_cnt              0.278891
sep__nos_calling_diff                0.275627
min__calling_cnt                     0.270355
sep__nos_calling                     0.267701
more0cnt__nos_calling                0.262691
wave__gprs_now_rest                  0.259353
min__calling_dura                    0.239138
wave__calling_dura                   0.217710
avg__days_call_p                     0.217625
min__calling_diff_dura               0.216448
moreq25cnt__nos_calling              0.210496
grow__gprs_resource                  0.208473
avg__days_call_p_4                   0.206154
std__nos_calling_diff                0.189178
min__gprs_resource                   0.187402
min__gprs_flow_busy                  0.185409
wave__gprs_flow_short                0.181643
sep__gprs_now_rest                   0.178242
sep__gprs_flow_commu                 0.168936
moreq25cnt__calling_diff_cnt         0.167699
grow__arpu                           0.163723
account_id                           0.162977
wave__gprs_now_defer                 0.161662
min__call_use                        0.155930
valuecnt__greatest_gprs_app~commu    0.154155
max__gprs_flow_commu                 0.148426
min__calling_diff_cnt                0.147907
std__gprs_now_rest                   0.145826
std__gprs_flow_commu                 0.145040
wave__call_use                       0.138283
min__nos_calling                     0.137921
std__gprs_flow_busy                  0.135071
moreq25cnt__gprs_flow_video          0.130034
sep__gprs_flow_video                 0.128320
min__gprs_flow_commu                 0.127391
std__nos_calling                     0.125965
moreq25cnt__gprs_flow_commu          0.121864
avg__gprs_flow_busy                  0.121819
max__nos_calling                     0.116812
avg__gprs_now_defer                  0.115887
moreq25cnt__nos_calling_diff         0.108476
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)

                   ###################################################################### 创建数据处理流水线、算法序列
                    
20220309-11:05:59  创建数据转换流水线1


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\toolmodule\dataprep.py:9: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  from collections import OrderedDict


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\toolmodule\dataprep.py:9: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  from collections import OrderedDict
20220309-11:05:59  创建数据转换流水线2
20220309-11:05:59  创建数据转换流水线3
20220309-11:05:59  创建算法序列

                   ###################################################################### 训练测试过程
                    
20220309-11:05:59  开始时间：2022-03-09 11:05:59
20220309-11:05:59  模型名称：模型示例
20220309-11:05:59  参数设置：
                       Info.model_name: 模型示例
                       Info.trainproc_ratiolist: [1, 2, 10]
                       field_comment: (168, 14)
                       Info.freq_limit: 0.95
                       Info.unique_limit: 5000
                       Info.iv_limit: 0.05
                       Info.r_limit: 0.95
                       Info.random_state: None
20220309-11:05:59  mark: ~202011~202012
20220309-11:05:59  目标字段：flag_eg; 正负例取值：1、0
20220309-11:05:59  field_comment.shape: (168, 14)
20220309-11:05:59      len(col_need): 168
20220309-11:05:59      删除field_comment中into_model取值为‘删除’的2个字段：['phone_no_null', 'last_stop_date']
20220309-11:05:59      len(col_need): 168
20220309-11:05:59      删除Info.col_del中的1个字段：{'user_acct_month'}
20220309-11:05:59      len(col_need): 167

20220309-11:05:59      删除Info.supply_other、col_mark中的6个字段：{'sms_cnt', 'last_stop_date', 'call_fee_local', 'phone_no_null', 'dayvalue_user_status', 'dayvalue_phone_no_null'}
20220309-11:05:59      len(col_need): 161

20220309-11:05:59  ------------------------- 读取数据: ./binaryclassify/eg/traintest~202011~202012/train_data~202011.csv 2022-03-09 11:05:59 -------------------------
20220309-11:05:59      src: file
20220309-11:05:59      condition: None
20220309-11:05:59      col_need(161): ['data_use', 'acct_month', 'user_id', 'account_id', 'innet_months', 'user_status', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'flag_eg', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
20220309-11:05:59      col_del: None
20220309-11:05:59      col_char(11): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'user_status', 'greatest_gprs_app', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220309-11:05:59      col_num(156): ['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
20220309-11:05:59      col_date: None
20220309-11:05:59      nrows: None
20220309-11:05:59      if_coltolower: False
20220309-11:05:59      kwargs: {}

20220309-11:05:59      读取
20220309-11:05:59  -------------------------读取完毕: (3806, 161) 2022-03-09 11:05:59 -------------------------

20220309-11:05:59  ------------------------- 读取数据: ./binaryclassify/eg/traintest~202011~202012/test_data~202012.csv 2022-03-09 11:05:59 -------------------------
20220309-11:05:59      src: file
20220309-11:05:59      condition: None
20220309-11:05:59      col_need(161): ['data_use', 'acct_month', 'user_id', 'account_id', 'innet_months', 'user_status', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'flag_eg', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
20220309-11:05:59      col_del: None
20220309-11:05:59      col_char(11): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'user_status', 'greatest_gprs_app', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220309-11:05:59      col_num(156): ['innet_months', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'calling_cnt', 'calling_dura', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p', 'days_call_p_4', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'if_nolimit~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__gprs_flow_commu', 'avg__gprs_flow_music', 'avg__gprs_flow_5g', 'avg__gprs_flow_game', 'avg__arpu', 'avg__nos_call', 'avg__call_use', 'avg__days_call_p_4', 'avg__gprs_now_rest', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_video', 'avg__days_call_p', 'avg__monthsremain_last_stop_date', 'avg__calling_diff_dura', 'avg__calling_diff_cnt', 'avg__gprs_last_defer', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_resource', 'sep__gprs_flow_commu', 'sep__gprs_flow_5g', 'sep__gprs_now_rest', 'sep__nos_calling_diff', 'sep__gprs_flow_video', 'sep__calling_diff_dura', 'sep__nos_calling', 'sep__calling_dura', 'wave__gprs_flow_music', 'wave__gprs_flow_short', 'wave__call_use', 'wave__gprs_now_rest', 'wave__nos_calling_diff', 'wave__gprs_now_defer', 'wave__calling_diff_cnt', 'wave__gprs_last_defer', 'wave__nos_calling', 'wave__calling_dura', 'wave__gprs_resource', 'grow__gprs_flow_commu', 'grow__gprs_flow_5g', 'grow__gprs_flow_short', 'grow__arpu', 'grow__call_use', 'grow__days_call_p_4', 'grow__gprs_now_rest', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__nos_calling', 'grow__gprs_resource', 'max__gprs_flow_commu', 'max__gprs_flow_short', 'max__arpu', 'max__nos_call', 'max__call_use', 'max__days_call_p_4', 'max__gprs_flow_roam', 'max__gprs_now_rest', 'max__nos_calling_diff', 'max__days_call_p', 'max__calling_diff_dura', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__dinner_fee', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling', 'max__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_game', 'min__gprs_flow_short', 'min__arpu', 'min__call_use', 'min__days_call_p_4', 'min__gprs_flow_roam', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_video', 'min__calling_diff_dura', 'min__calling_diff_cnt', 'min__gprs_last_defer', 'min__calling_cnt', 'min__nos_calling', 'min__calling_dura', 'min__gprs_resource', 'std__gprs_flow_commu', 'std__gprs_flow_5g', 'std__call_use', 'std__gprs_now_rest', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_dura_roam', 'std__calling_cnt', 'std__nos_calling', 'std__calling_dura', 'std__gprs_resource', 'more0cnt__nos_calling', 'more0cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_5g', 'moreq25cnt__arpu', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__calling_diff_cnt', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__dinner_fee', 'moreq25cnt__calling_cnt', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_resource', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__start_level~银卡', 'valuecnt__greatest_gprs_app~commu', 'valuecnt__greatest_gprs_app~video']
20220309-11:05:59      col_date: None
20220309-11:05:59      nrows: None
20220309-11:05:59      if_coltolower: False
20220309-11:05:59      kwargs: {}

20220309-11:05:59      读取
20220309-11:05:59  -------------------------读取完毕: (1000, 161) 2022-03-09 11:05:59 -------------------------

20220309-11:05:59  合并训练、测试数据
20220309-11:05:59  data.shape: (4806, 161)

20220309-11:05:59  数据分布：
                       202011  data_timein  0    435
                       202011  data_timein  1    65
                       202011  data_train  0    2204
                       202011  data_train  1    1102
                       202012  data_timeout  0    858
                       202012  data_timeout  1    142
                       dtype: int64

20220309-11:05:59  数据集整合：
20220309-11:05:59  -------------------------- train --------------------------
20220309-11:05:59  校验账期:                    20220309-11:05:59      通过
20220309-11:05:59  trainproc_ratiolist：[1, 2, 10]
20220309-11:05:59  正负例实际比例最高：1:2.0，将trainproc_ratiolist纠正为:[1, 2]
20220309-11:05:59  随机抽样 1:1
20220309-11:05:59      正例样本：1102
20220309-11:05:59      负例样本：2204
20220309-11:05:59          从负例中随机抽取1102（1102*1）
20220309-11:05:59  随机抽样 1:2
20220309-11:05:59      正例样本：1102
20220309-11:05:59      负例样本：2204
20220309-11:05:59          从负例中随机抽取2204（1102*2）
20220309-11:05:59  -------------------------- timein --------------------------
20220309-11:05:59  校验账期:                    20220309-11:05:59      通过
20220309-11:05:59  -------------------------- timeout --------------------------
20220309-11:05:59  校验账期:                    20220309-11:05:59      通过
20220309-11:05:59  具备data_timeout数据集，以其测试效果评估模型

20220309-11:05:59  遍历不同的抽样比例、数据预处理流水线、算法 进行训练测试:

20220309-11:05:59  ------------------------------------------ 抽样比例：ratio_1_1 ------------------------------------------

20220309-11:05:59  ------------------------- 流水线：pipeline1 -------------------------
20220309-11:05:59  train_X: (2204, 159)
20220309-11:06:20  转换完毕，进入模型(X+Y)：(1000, 140)

20220309-11:06:20  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220309-11:06:20  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          7      70.0%       4.9%        4.9
                                5.0%       50         28      56.0%      19.7%        3.9
                               10.0%      100         41      41.0%      28.9%        2.9
                               20.0%      200         59      29.5%      41.5%        2.1
                               30.0%      300         74      24.7%      52.1%        1.7
                               40.0%      400         90      22.5%      63.4%        1.6
                               50.0%      500        103      20.6%      72.5%        1.5
                               60.0%      600        108      18.0%      76.1%        1.3
                               70.0%      700        118      16.9%      83.1%        1.2
                               80.0%      800        123      15.4%      86.6%        1.1
                               90.0%      900        138      15.3%      97.2%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:20  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220309-11:06:20  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          5      50.0%       3.5%        3.5
                                5.0%       50         24      48.0%      16.9%        3.4
                               10.0%      100         41      41.0%      28.9%        2.9
                               20.0%      200         58      29.0%      40.8%          2
                               30.0%      300         71      23.7%      50.0%        1.7
                               40.0%      400         88      22.0%      62.0%        1.5
                               50.0%      500        102      20.4%      71.8%        1.4
                               60.0%      600        108      18.0%      76.1%        1.3
                               70.0%      700        120      17.1%      84.5%        1.2
                               80.0%      800        130      16.2%      91.5%        1.1
                               90.0%      900        139      15.4%      97.9%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:20  训练测试 XGBClassifier_DF - 默认参数
20220309-11:06:21  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          6      60.0%       4.2%        4.2
                                5.0%       50         24      48.0%      16.9%        3.4
                               10.0%      100         45      45.0%      31.7%        3.2
                               20.0%      200         64      32.0%      45.1%        2.3
                               30.0%      300         86      28.7%      60.6%          2
                               40.0%      400         96      24.0%      67.6%        1.7
                               50.0%      500        106      21.2%      74.6%        1.5
                               60.0%      600        112      18.7%      78.9%        1.3
                               70.0%      700        119      17.0%      83.8%        1.2
                               80.0%      800        127      15.9%      89.4%        1.1
                               90.0%      900        137      15.2%      96.5%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:21  训练测试 RandomForestClassifier_DF - 默认参数
20220309-11:06:21  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.1%       11          7      63.6%       4.9%        4.5
                                5.4%       54         26      48.1%      18.3%        3.4
                               10.2%      102         45      44.1%      31.7%        3.1
                               21.1%      211         77      36.5%      54.2%        2.6
                               31.5%      315         93      29.5%      65.5%        2.1
                               42.4%      424        105      24.8%      73.9%        1.7
                               50.8%      508        113      22.2%      79.6%        1.6
                               60.2%      602        121      20.1%      85.2%        1.4
                               71.2%      712        129      18.1%      90.8%        1.3
                               80.2%      802        131      16.3%      92.3%        1.2
                               90.8%      908        137      15.1%      96.5%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:21  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:06:22  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:22  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:06:22  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:22  训练测试 LogisticRegression_DF - solver='liblinear'
20220309-11:06:23  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          2      20.0%       1.4%        1.4
                                5.0%       50         23      46.0%      16.2%        3.2
                               10.0%      100         43      43.0%      30.3%          3
                               20.0%      200         62      31.0%      43.7%        2.2
                               30.0%      300         73      24.3%      51.4%        1.7
                               40.0%      400         94      23.5%      66.2%        1.7
                               50.0%      500        101      20.2%      71.1%        1.4
                               60.0%      600        110      18.3%      77.5%        1.3
                               70.0%      700        115      16.4%      81.0%        1.2
                               80.0%      800        126      15.8%      88.7%        1.1
                               90.0%      900        136      15.1%      95.8%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:23  ------------------------- 流水线：pipeline2 -------------------------
20220309-11:06:23  train_X: (2204, 159)
20220309-11:06:44  转换完毕，进入模型(X+Y)：(1000, 140)

20220309-11:06:44  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220309-11:06:44  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          5      50.0%       3.5%        3.5
                                5.0%       50         23      46.0%      16.2%        3.2
                               10.0%      100         43      43.0%      30.3%          3
                               20.0%      200         57      28.5%      40.1%          2
                               30.0%      300         73      24.3%      51.4%        1.7
                               40.0%      400         88      22.0%      62.0%        1.5
                               50.0%      500         98      19.6%      69.0%        1.4
                               60.0%      600        115      19.2%      81.0%        1.3
                               70.0%      700        124      17.7%      87.3%        1.2
                               80.0%      800        128      16.0%      90.1%        1.1
                               90.0%      900        135      15.0%      95.1%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:44  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220309-11:06:44  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          8      80.0%       5.6%        5.6
                                5.0%       50         22      44.0%      15.5%        3.1
                               10.0%      100         38      38.0%      26.8%        2.7
                               20.0%      200         57      28.5%      40.1%          2
                               30.0%      300         84      28.0%      59.2%          2
                               40.0%      400         99      24.8%      69.7%        1.7
                               50.0%      500        112      22.4%      78.9%        1.6
                               60.0%      600        124      20.7%      87.3%        1.5
                               70.0%      700        130      18.6%      91.5%        1.3
                               80.0%      800        135      16.9%      95.1%        1.2
                               90.0%      900        140      15.6%      98.6%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:44  训练测试 XGBClassifier_DF - 默认参数
20220309-11:06:45  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          9      90.0%       6.3%        6.3
                                5.0%       50         27      54.0%      19.0%        3.8
                               10.0%      100         42      42.0%      29.6%          3
                               20.0%      200         67      33.5%      47.2%        2.4
                               30.0%      300         88      29.3%      62.0%        2.1
                               40.0%      400        101      25.2%      71.1%        1.8
                               50.0%      500        118      23.6%      83.1%        1.7
                               60.0%      600        124      20.7%      87.3%        1.5
                               70.0%      700        130      18.6%      91.5%        1.3
                               80.0%      800        137      17.1%      96.5%        1.2
                               90.0%      900        140      15.6%      98.6%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:45  训练测试 RandomForestClassifier_DF - 默认参数
20220309-11:06:46  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          7      70.0%       4.9%        4.9
                                5.6%       56         25      44.6%      17.6%        3.1
                               10.2%      102         44      43.1%      31.0%          3
                               20.5%      205         81      39.5%      57.0%        2.8
                               31.4%      314        101      32.2%      71.1%        2.3
                               40.3%      403        112      27.8%      78.9%          2
                               52.6%      526        126      24.0%      88.7%        1.7
                               62.9%      629        133      21.1%      93.7%        1.5
                               71.0%      710        136      19.2%      95.8%        1.3
                               80.9%      809        137      16.9%      96.5%        1.2
                               90.4%      904        138      15.3%      97.2%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:46  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:06:47  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:47  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:06:47  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:47  训练测试 LogisticRegression_DF - solver='liblinear'
20220309-11:06:47  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          6      60.0%       4.2%        4.2
                                5.0%       50         24      48.0%      16.9%        3.4
                               10.0%      100         35      35.0%      24.6%        2.5
                               20.0%      200         57      28.5%      40.1%          2
                               30.0%      300         71      23.7%      50.0%        1.7
                               40.0%      400         85      21.2%      59.9%        1.5
                               50.0%      500         91      18.2%      64.1%        1.3
                               60.0%      600        101      16.8%      71.1%        1.2
                               70.0%      700        111      15.9%      78.2%        1.1
                               80.0%      800        123      15.4%      86.6%        1.1
                               90.0%      900        134      14.9%      94.4%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:06:47  ------------------------------------------ 抽样比例：ratio_1_2 ------------------------------------------

20220309-11:06:47  ------------------------- 流水线：pipeline1 -------------------------
20220309-11:06:47  train_X: (3306, 159)
20220309-11:07:10  转换完毕，进入模型(X+Y)：(1000, 149)

20220309-11:07:10  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220309-11:07:11  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          7      70.0%       4.9%        4.9
                                5.0%       50         27      54.0%      19.0%        3.8
                               10.0%      100         40      40.0%      28.2%        2.8
                               20.0%      200         60      30.0%      42.3%        2.1
                               30.0%      300         77      25.7%      54.2%        1.8
                               40.0%      400         90      22.5%      63.4%        1.6
                               50.0%      500         99      19.8%      69.7%        1.4
                               60.3%      603        109      18.1%      76.8%        1.3
                               70.0%      700        119      17.0%      83.8%        1.2
                               80.0%      800        130      16.2%      91.5%        1.1
                               90.0%      900        139      15.4%      97.9%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:11  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220309-11:07:11  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          8      80.0%       5.6%        5.6
                                5.0%       50         26      52.0%      18.3%        3.7
                               10.0%      100         44      44.0%      31.0%        3.1
                               20.0%      200         62      31.0%      43.7%        2.2
                               30.0%      300         81      27.0%      57.0%        1.9
                               40.0%      400        102      25.5%      71.8%        1.8
                               50.0%      500        112      22.4%      78.9%        1.6
                               60.0%      600        124      20.7%      87.3%        1.5
                               70.0%      700        128      18.3%      90.1%        1.3
                               80.0%      800        133      16.6%      93.7%        1.2
                               90.0%      900        140      15.6%      98.6%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:11  训练测试 XGBClassifier_DF - 默认参数
20220309-11:07:12  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          5      50.0%       3.5%        3.5
                                5.0%       50         31      62.0%      21.8%        4.4
                               10.0%      100         48      48.0%      33.8%        3.4
                               20.0%      200         73      36.5%      51.4%        2.6
                               30.0%      300         86      28.7%      60.6%          2
                               40.0%      400        101      25.2%      71.1%        1.8
                               50.0%      500        116      23.2%      81.7%        1.6
                               60.0%      600        124      20.7%      87.3%        1.5
                               70.1%      701        133      19.0%      93.7%        1.3
                               80.0%      800        137      17.1%      96.5%        1.2
                               90.0%      900        141      15.7%      99.3%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:12  训练测试 RandomForestClassifier_DF - 默认参数
20220309-11:07:12  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          8      80.0%       5.6%        5.6
                                5.0%       50         25      50.0%      17.6%        3.5
                               10.0%      100         47      47.0%      33.1%        3.3
                               20.8%      208         76      36.5%      53.5%        2.6
                               30.1%      301         91      30.2%      64.1%        2.1
                               40.7%      407        106      26.0%      74.6%        1.8
                               50.4%      504        114      22.6%      80.3%        1.6
                               61.2%      612        124      20.3%      87.3%        1.4
                               70.4%      704        132      18.8%      93.0%        1.3
                               80.4%      804        133      16.5%      93.7%        1.2
                               90.9%      909        137      15.1%      96.5%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:12  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:07:13  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                2.4%       24          4      16.7%       2.8%        1.2
                                5.0%       50          7      14.0%       4.9%          1
                               10.2%      102         25      24.5%      17.6%        1.7
                               20.0%      200         38      19.0%      26.8%        1.3
                               30.0%      300         58      19.3%      40.8%        1.4
                               41.2%      412         78      18.9%      54.9%        1.3
                               53.5%      535         98      18.3%      69.0%        1.3
                               60.8%      608        108      17.8%      76.1%        1.3
                               76.3%      763        120      15.7%      84.5%        1.1
                               80.2%      802        123      15.3%      86.6%        1.1
                               90.3%      903        132      14.6%      93.0%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:13  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:07:13  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                2.9%       29          5      17.2%       3.5%        1.2
                                5.2%       52          8      15.4%       5.6%        1.1
                               10.0%      100         21      21.0%      14.8%        1.5
                               24.7%      247         52      21.1%      36.6%        1.5
                               30.4%      304         62      20.4%      43.7%        1.4
                               40.5%      405         77      19.0%      54.2%        1.3
                               50.1%      501         95      19.0%      66.9%        1.3
                               60.0%      600        101      16.8%      71.1%        1.2
                               73.8%      738        115      15.6%      81.0%        1.1
                               80.1%      801        123      15.4%      86.6%        1.1
                               90.9%      909        133      14.6%      93.7%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:13  训练测试 LogisticRegression_DF - solver='liblinear'
20220309-11:07:14  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          3      30.0%       2.1%        2.1
                                5.0%       50         24      48.0%      16.9%        3.4
                               10.0%      100         40      40.0%      28.2%        2.8
                               20.0%      200         62      31.0%      43.7%        2.2
                               30.0%      300         74      24.7%      52.1%        1.7
                               40.0%      400         87      21.8%      61.3%        1.5
                               50.0%      500         98      19.6%      69.0%        1.4
                               60.0%      600        110      18.3%      77.5%        1.3
                               70.0%      700        123      17.6%      86.6%        1.2
                               80.2%      802        134      16.7%      94.4%        1.2
                               90.0%      900        140      15.6%      98.6%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:14  ------------------------- 流水线：pipeline2 -------------------------
20220309-11:07:14  train_X: (3306, 159)
20220309-11:07:37  转换完毕，进入模型(X+Y)：(1000, 148)

20220309-11:07:37  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220309-11:07:38  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          7      70.0%       4.9%        4.9
                                5.0%       50         25      50.0%      17.6%        3.5
                               10.0%      100         44      44.0%      31.0%        3.1
                               20.0%      200         59      29.5%      41.5%        2.1
                               30.0%      300         76      25.3%      53.5%        1.8
                               40.0%      400         95      23.8%      66.9%        1.7
                               50.0%      500        104      20.8%      73.2%        1.5
                               60.0%      600        115      19.2%      81.0%        1.3
                               70.0%      700        126      18.0%      88.7%        1.3
                               80.0%      800        132      16.5%      93.0%        1.2
                               90.0%      900        139      15.4%      97.9%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:38  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220309-11:07:39  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          6      60.0%       4.2%        4.2
                                5.0%       50         28      56.0%      19.7%        3.9
                               10.0%      100         44      44.0%      31.0%        3.1
                               20.0%      200         65      32.5%      45.8%        2.3
                               30.0%      300         85      28.3%      59.9%          2
                               40.0%      400        105      26.2%      73.9%        1.8
                               50.0%      500        115      23.0%      81.0%        1.6
                               60.0%      600        120      20.0%      84.5%        1.4
                               70.0%      700        128      18.3%      90.1%        1.3
                               80.0%      800        137      17.1%      96.5%        1.2
                               90.0%      900        138      15.3%      97.2%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:39  训练测试 XGBClassifier_DF - 默认参数
20220309-11:07:39  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          5      50.0%       3.5%        3.5
                                5.0%       50         26      52.0%      18.3%        3.7
                               10.0%      100         41      41.0%      28.9%        2.9
                               20.0%      200         71      35.5%      50.0%        2.5
                               30.0%      300         89      29.7%      62.7%        2.1
                               40.0%      400        103      25.8%      72.5%        1.8
                               50.0%      500        118      23.6%      83.1%        1.7
                               60.0%      600        126      21.0%      88.7%        1.5
                               70.0%      700        133      19.0%      93.7%        1.3
                               80.0%      800        137      17.1%      96.5%        1.2
                               90.0%      900        140      15.6%      98.6%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:39  训练测试 RandomForestClassifier_DF - 默认参数
20220309-11:07:41  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          8      80.0%       5.6%        5.6
                                5.1%       51         24      47.1%      16.9%        3.3
                               10.9%      109         49      45.0%      34.5%        3.2
                               20.8%      208         80      38.5%      56.3%        2.7
                               30.0%      300         99      33.0%      69.7%        2.3
                               41.8%      418        117      28.0%      82.4%          2
                               51.4%      514        124      24.1%      87.3%        1.7
                               61.5%      615        135      22.0%      95.1%        1.5
                               70.4%      704        139      19.7%      97.9%        1.4
                               81.5%      815        140      17.2%      98.6%        1.2
                               91.8%      918        140      15.3%      98.6%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:41  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:07:42  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          3      30.0%       2.1%        2.1
                                5.0%       50         13      26.0%       9.2%        1.8
                               10.0%      100         22      22.0%      15.5%        1.5
                               20.0%      200         42      21.0%      29.6%        1.5
                               30.0%      300         60      20.0%      42.3%        1.4
                               40.0%      400         83      20.8%      58.5%        1.5
                               50.0%      500         93      18.6%      65.5%        1.3
                               60.0%      600        106      17.7%      74.6%        1.2
                               70.0%      700        111      15.9%      78.2%        1.1
                               80.0%      800        119      14.9%      83.8%          1
                               90.0%      900        127      14.1%      89.4%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:42  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220309-11:07:42  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.1%       11          3      27.3%       2.1%        1.9
                                5.0%       50         14      28.0%       9.9%          2
                               10.2%      102         27      26.5%      19.0%        1.9
                               20.0%      200         42      21.0%      29.6%        1.5
                               30.0%      300         62      20.7%      43.7%        1.5
                               40.0%      400         80      20.0%      56.3%        1.4
                               50.0%      500         94      18.8%      66.2%        1.3
                               60.0%      600        103      17.2%      72.5%        1.2
                               70.0%      700        112      16.0%      78.9%        1.1
                               82.0%      820        121      14.8%      85.2%          1
                               90.0%      900        127      14.1%      89.4%          1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:42  训练测试 LogisticRegression_DF - solver='liblinear'
20220309-11:07:42  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          7      70.0%       4.9%        4.9
                                5.0%       50         26      52.0%      18.3%        3.7
                               10.0%      100         42      42.0%      29.6%          3
                               20.0%      200         59      29.5%      41.5%        2.1
                               30.0%      300         73      24.3%      51.4%        1.7
                               40.0%      400         87      21.8%      61.3%        1.5
                               50.0%      500         99      19.8%      69.7%        1.4
                               60.0%      600        108      18.0%      76.1%        1.3
                               70.0%      700        116      16.6%      81.7%        1.2
                               80.0%      800        125      15.6%      88.0%        1.1
                               90.0%      900        136      15.1%      95.8%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:42  确定最佳模型
20220309-11:07:42  剔除无效模型 26 个：ratio_1_1 | pipeline1 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0                  [查准率非递减]
                   ratio_1_1 | pipeline1 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                          [查准率非递减]
                   ratio_1_1 | pipeline1 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                        [查准率非递减, 分数区分度弱]
                   ratio_1_1 | pipeline1 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                             [分数取值集中(唯一值)]
                   ratio_1_1 | pipeline1 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                             [分数取值集中(唯一值)]
                   ratio_1_1 | pipeline1 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                       [查准率非递减]
                   ratio_1_1 | pipeline2 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0                  [查准率非递减]
                   ratio_1_1 | pipeline2 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                          [查准率非递减]
                   ratio_1_1 | pipeline2 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                                      [查准率非递减]
                   ratio_1_1 | pipeline2 | RandomForestClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                             [查准率非递减]
                   ratio_1_1 | pipeline2 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                             [分数取值集中(唯一值)]
                   ratio_1_1 | pipeline2 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                             [分数取值集中(唯一值)]
                   ratio_1_1 | pipeline2 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                       [分数区分度弱]
                   ratio_1_2 | pipeline1 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                          [查准率非递减]
                   ratio_1_2 | pipeline1 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                        [查准率非递减, 分数区分度弱]
                   ratio_1_2 | pipeline1 | RandomForestClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                             [查准率非递减]
                   ratio_1_2 | pipeline1 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [查准率非递减]
                   ratio_1_2 | pipeline1 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [查准率非递减]
                   ratio_1_2 | pipeline1 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                       [查准率非递减]
                   ratio_1_2 | pipeline2 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0                  [查准率非递减]
                   ratio_1_2 | pipeline2 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                          [分数区分度弱]
                   ratio_1_2 | pipeline2 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                        [查准率非递减, 分数区分度弱]
                   ratio_1_2 | pipeline2 | RandomForestClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                             [查准率非递减]
                   ratio_1_2 | pipeline2 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [查准率非递减]
                   ratio_1_2 | pipeline2 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [查准率非递减]
                   ratio_1_2 | pipeline2 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                       [分数区分度弱]
                   Name: if_weak, dtype: object
20220309-11:07:42  最佳模型是：ratio_1_2 | pipeline1 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0

20220309-11:07:42  data_train的测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       34         32      94.1%       2.9%        2.8
                                5.0%      166        147      88.6%      13.3%        2.7
                               10.0%      331        288      87.0%      26.1%        2.6
                               20.0%      662        501      75.7%      45.5%        2.3
                               30.0%      992        650      65.5%      59.0%          2
                               40.0%     1323        765      57.8%      69.4%        1.7
                               50.0%     1653        860      52.0%      78.0%        1.6
                               60.1%     1986        938      47.2%      85.1%        1.4
                               70.0%     2314        996      43.0%      90.4%        1.3
                               80.0%     2645       1046      39.5%      94.9%        1.2
                               90.0%     2975       1081      36.3%      98.1%        1.1
                              100.0%     3306       1102      33.3%     100.0%          1

20220309-11:07:42  data_timein的测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%        5          3      60.0%       4.6%        4.6
                                5.0%       25         17      68.0%      26.2%        5.2
                               10.0%       50         26      52.0%      40.0%          4
                               20.0%      100         34      34.0%      52.3%        2.6
                               30.0%      150         38      25.3%      58.5%        1.9
                               40.0%      200         43      21.5%      66.2%        1.7
                               50.0%      250         48      19.2%      73.8%        1.5
                               60.0%      300         52      17.3%      80.0%        1.3
                               70.0%      350         55      15.7%      84.6%        1.2
                               80.0%      400         58      14.5%      89.2%        1.1
                               90.0%      450         61      13.6%      93.8%          1
                              100.0%      500         65      13.0%     100.0%          1

20220309-11:07:42  data_timeout的测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       10          7      70.0%       4.9%        4.9
                                5.0%       50         27      54.0%      19.0%        3.8
                               10.0%      100         40      40.0%      28.2%        2.8
                               20.0%      200         60      30.0%      42.3%        2.1
                               30.0%      300         77      25.7%      54.2%        1.8
                               40.0%      400         90      22.5%      63.4%        1.6
                               50.0%      500         99      19.8%      69.7%        1.4
                               60.3%      603        109      18.1%      76.8%        1.3
                               70.0%      700        119      17.0%      83.8%        1.2
                               80.0%      800        130      16.2%      91.5%        1.1
                               90.0%      900        139      15.4%      97.9%        1.1
                              100.0%     1000        142      14.2%     100.0%          1

20220309-11:07:42  分数稳定度：0.07716

20220309-11:07:42  特征重要性：
                                            field_name                                        comment  importance
                       130  moreq25cnt__gprs_flow_busy  gprs-忙时-流量：近3月大于第一四分位数的月份数         117
                       32          avg__gprs_flow_busy                      gprs-忙时-流量：近3月均值          94
                       141            valuecnt__sex~女                    性别：近3月取值为女的月份数          81
                       100          min__gprs_now_rest                  当月gprs资源余量：近3月最小值          76
                       142            valuecnt__sex~男                    性别：近3月取值为男的月份数          72
                       52             sep__nos_calling            主叫通话对端号码个数：近3月离散系数          71
                       73            grow__nos_calling              主叫通话对端号码个数：近3月成长率          69
                       58       wave__nos_calling_diff              主叫异网对端号码个数：近3月波动性          69
                       4                 gprs_now_rest                               当月gprs资源余量          65
                       10               gprs_flow_busy                                 gprs-忙时-流量          63
                       34          avg__gprs_now_defer                  可延递流量资源总量：近3月均值          60
                       93         min__gprs_flow_commu                    通信类应用流量：近3月最小值          54
                       23         avg__gprs_flow_commu                      通信类应用流量：近3月均值          51
                       0                  innet_months                                       入网时长          49
                       2               gprs_last_defer                                   流量滚存资源          44
                       69          grow__gprs_now_rest                  当月gprs资源余量：近3月成长率          40
                       12               call_dura_roam                                  省际漫游-时长          38
                       8                  calling_dura                               当月主叫通话时长          38
                       11               gprs_flow_roam                             gprs-国内漫游-流量          36
                       46         sep__gprs_flow_commu                  通信类应用流量：近3月离散系数          36

20220309-11:07:42  保存训练结果至：./binaryclassify/eg/traintest~202011~202012/train_result~202011~202012.pkl
20220309-11:07:43  保存模型测试效果集合至：./binaryclassify/eg/traintest~202011~202012/train_pre_results~202011~202012.pkl
20220309-11:07:43  结束时间：2022-03-09 11:07:43
20220309-11:07:43  耗时：{time_cost} s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(2204), 添加unique_limit_actual：len(X)*0.99=2181
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer data_timein 计算稳定性(区分正负例) ，7个字段稳定性>=psi_limit（0.1）：
moreq25cnt__dinner_fee    0.179420
dinner_fee                0.153487
max__gprs_last_defer      0.128441
min__gprs_last_defer      0.123803
gprs_last_defer           0.106631
avg__days_call_p_4        0.105465
min__gprs_flow_busy       0.102857
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，25个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_rest             1.556004
days_call_p_4                   0.733316
wave__gprs_resource             0.386834
min__gprs_now_rest              0.380909
more0cnt__calling_dura          0.218747
wave__gprs_now_defer            0.194752
sep__gprs_flow_commu            0.178237
moreq25cnt__gprs_flow_busy      0.177521
moreq25cnt__calling_cnt         0.160550
sep__nos_calling                0.157877
more0cnt__nos_calling           0.152311
wave__gprs_now_rest             0.149312
sep__gprs_now_rest              0.143835
min__gprs_last_defer            0.137206
wave__calling_dura              0.130783
moreq25cnt__arpu                0.130729
avg__days_call_p_4              0.129248
moreq25cnt__calling_diff_cnt    0.127010
sep__nos_calling_diff           0.124101
sep__gprs_flow_video            0.118534
moreq25cnt__nos_calling         0.113687
moreq25cnt__gprs_last_defer     0.111460
wave__calling_diff_cnt          0.110253
wave__gprs_last_defer           0.104857
wave__gprs_flow_short           0.101901
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer data_timeout 计算稳定性(区分正负例) ，45个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_rest                  1.537913
days_call_p_4                        0.930336
moreq25cnt__arpu                     0.482879
wave__gprs_resource                  0.406220
moreq25cnt__gprs_flow_busy           0.396032
min__gprs_now_rest                   0.383040
more0cnt__calling_dura               0.352916
min__arpu                            0.299329
moreq25cnt__calling_cnt              0.278891
more0cnt__nos_calling                0.262691
min__calling_cnt                     0.246841
min__calling_dura                    0.239138
sep__nos_calling                     0.229756
min__calling_diff_dura               0.216448
wave__calling_dura                   0.212548
moreq25cnt__nos_calling              0.210496
avg__days_call_p_4                   0.190802
sep__nos_calling_diff                0.189926
min__gprs_resource                   0.187402
min__call_use                        0.178447
wave__gprs_now_defer                 0.172064
wave__gprs_flow_short                0.171262
moreq25cnt__calling_diff_cnt         0.167699
min__gprs_flow_busy                  0.160754
valuecnt__greatest_gprs_app~commu    0.154155
sep__gprs_flow_commu                 0.150854
min__calling_diff_cnt                0.147907
avg__days_call_p                     0.146845
std__gprs_now_rest                   0.146045
std__gprs_flow_commu                 0.138283
min__nos_calling                     0.137921
sep__gprs_now_rest                   0.135276
wave__gprs_now_rest                  0.130330
wave__call_use                       0.130287
min__gprs_last_defer                 0.128314
sep__gprs_flow_video                 0.128115
avg__gprs_flow_commu                 0.118674
avg__gprs_now_defer                  0.115887
min__gprs_flow_commu                 0.113942
min__gprs_flow_video                 0.112546
wave__gprs_flow_music                0.110195
std__gprs_flow_busy                  0.109464
moreq25cnt__gprs_last_defer          0.108730
moreq25cnt__nos_calling_diff         0.108476
std__nos_calling_diff                0.104445
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeatureUnion 下列字段重复，仅保留前一列 155列 => 153列：['greatest_gprs_app~commu', 'greatest_gprs_app~video']
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer data_timein 计算稳定性(区分正负例) ，7个字段稳定性>=psi_limit（0.1）：
moreq25cnt__dinner_fee    0.179420
dinner_fee                0.153487
max__gprs_last_defer      0.128441
min__gprs_last_defer      0.123803
gprs_last_defer           0.106631
avg__days_call_p_4        0.105465
min__gprs_flow_busy       0.102857
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，23个字段稳定性>=psi_limit（0.1）：
days_call_p_4                   0.733316
wave__gprs_resource             0.387505
more0cnt__calling_dura          0.218747
wave__gprs_now_defer            0.194752
sep__gprs_flow_commu            0.178237
moreq25cnt__gprs_flow_busy      0.177521
moreq25cnt__calling_cnt         0.160550
sep__nos_calling                0.157877
more0cnt__nos_calling           0.152311
wave__gprs_now_rest             0.149312
sep__gprs_now_rest              0.143835
min__gprs_last_defer            0.137206
wave__calling_dura              0.130783
moreq25cnt__arpu                0.130729
avg__days_call_p_4              0.129248
moreq25cnt__calling_diff_cnt    0.127010
sep__nos_calling_diff           0.124101
sep__gprs_flow_video            0.118534
moreq25cnt__nos_calling         0.113687
moreq25cnt__gprs_last_defer     0.111460
wave__calling_diff_cnt          0.110253
wave__gprs_last_defer           0.104857
wave__gprs_flow_short           0.101901
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例) ，43个字段稳定性>=psi_limit（0.1）：
days_call_p_4                        0.930336
moreq25cnt__arpu                     0.482879
wave__gprs_resource                  0.405544
moreq25cnt__gprs_flow_busy           0.396032
more0cnt__calling_dura               0.352916
min__arpu                            0.299329
moreq25cnt__calling_cnt              0.278891
more0cnt__nos_calling                0.262691
min__calling_cnt                     0.246841
min__calling_dura                    0.239138
sep__nos_calling                     0.229756
min__calling_diff_dura               0.216448
wave__calling_dura                   0.212548
moreq25cnt__nos_calling              0.210496
avg__days_call_p_4                   0.190802
sep__nos_calling_diff                0.189926
min__gprs_resource                   0.187402
min__call_use                        0.178447
wave__gprs_now_defer                 0.172064
wave__gprs_flow_short                0.171262
moreq25cnt__calling_diff_cnt         0.167699
min__gprs_flow_busy                  0.160754
valuecnt__greatest_gprs_app~commu    0.154155
sep__gprs_flow_commu                 0.150854
min__calling_diff_cnt                0.147907
avg__days_call_p                     0.146845
std__gprs_now_rest                   0.141475
std__gprs_flow_commu                 0.138283
min__nos_calling                     0.137921
sep__gprs_now_rest                   0.135276
wave__gprs_now_rest                  0.130330
wave__call_use                       0.130287
min__gprs_last_defer                 0.128314
sep__gprs_flow_video                 0.128115
avg__gprs_flow_commu                 0.118674
avg__gprs_now_defer                  0.115887
min__gprs_flow_commu                 0.113942
min__gprs_flow_video                 0.112546
wave__gprs_flow_music                0.110195
std__gprs_flow_busy                  0.109464
moreq25cnt__gprs_last_defer          0.108730
moreq25cnt__nos_calling_diff         0.108476
std__nos_calling_diff                0.104445
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(3306), 添加unique_limit_actual：len(X)*0.99=3272
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer data_timein 计算稳定性(区分正负例) ，10个字段稳定性>=psi_limit（0.1）：
moreq25cnt__dinner_fee    0.179420
dinner_fee                0.153487
max__dinner_fee           0.152195
gprs_flow_busy            0.123167
min__gprs_last_defer      0.119493
max__gprs_last_defer      0.118428
gprs_last_defer           0.111160
gprs_flow_short           0.106784
avg__gprs_flow_video      0.105901
max__call_use             0.104073
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，27个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_rest             1.566761
days_call_p_4                   0.815315
wave__gprs_resource             0.386834
min__gprs_now_rest              0.381790
wave__gprs_now_rest             0.311510
more0cnt__calling_dura          0.218747
moreq25cnt__calling_dura        0.197932
sep__nos_calling                0.196828
wave__gprs_now_defer            0.194752
sep__nos_calling_diff           0.185014
sep__gprs_flow_commu            0.179077
moreq25cnt__gprs_flow_busy      0.177521
avg__days_call_p_4              0.161767
moreq25cnt__calling_cnt         0.160550
sep__gprs_now_rest              0.153820
more0cnt__nos_calling           0.152311
moreq25cnt__arpu                0.130729
wave__calling_dura              0.130588
moreq25cnt__calling_diff_cnt    0.127010
sep__gprs_flow_video            0.122508
min__gprs_last_defer            0.114629
moreq25cnt__nos_calling         0.113687
moreq25cnt__gprs_last_defer     0.111460
wave__calling_diff_cnt          0.110253
wave__gprs_flow_short           0.109177
grow__gprs_resource             0.107399
wave__gprs_last_defer           0.106144
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer data_timeout 计算稳定性(区分正负例) ，50个字段稳定性>=psi_limit（0.1）：
grow__gprs_now_rest                  1.573618
days_call_p_4                        1.021602
moreq25cnt__arpu                     0.482879
wave__gprs_resource                  0.406220
moreq25cnt__gprs_flow_busy           0.396032
min__arpu                            0.390187
min__gprs_now_rest                   0.382349
more0cnt__calling_dura               0.352916
wave__gprs_flow_music                0.351114
moreq25cnt__calling_dura             0.302418
moreq25cnt__calling_cnt              0.278891
sep__nos_calling_diff                0.275627
min__calling_cnt                     0.270355
sep__nos_calling                     0.267701
more0cnt__nos_calling                0.262691
wave__gprs_now_rest                  0.259353
min__calling_dura                    0.239138
wave__calling_dura                   0.217710
avg__days_call_p                     0.217625
min__calling_diff_dura               0.216448
moreq25cnt__nos_calling              0.210496
grow__gprs_resource                  0.208473
avg__days_call_p_4                   0.206154
std__nos_calling_diff                0.189178
min__gprs_resource                   0.187402
min__gprs_flow_busy                  0.185409
wave__gprs_flow_short                0.181643
sep__gprs_now_rest                   0.178242
sep__gprs_flow_commu                 0.168936
moreq25cnt__calling_diff_cnt         0.167699
grow__arpu                           0.163723
wave__gprs_now_defer                 0.161662
min__call_use                        0.155930
valuecnt__greatest_gprs_app~commu    0.154155
max__gprs_flow_commu                 0.148426
min__calling_diff_cnt                0.147907
std__gprs_now_rest                   0.145826
std__gprs_flow_commu                 0.145040
wave__call_use                       0.138283
min__nos_calling                     0.137921
std__gprs_flow_busy                  0.135071
moreq25cnt__gprs_flow_video          0.130034
sep__gprs_flow_video                 0.128320
min__gprs_flow_commu                 0.127391
std__nos_calling                     0.125965
moreq25cnt__gprs_flow_commu          0.121864
avg__gprs_flow_busy                  0.121819
max__nos_calling                     0.116812
avg__gprs_now_defer                  0.115887
moreq25cnt__nos_calling_diff         0.108476
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeatureUnion 下列字段重复，仅保留前一列 153列 => 151列：['greatest_gprs_app~commu', 'greatest_gprs_app~video']
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer data_timein 计算稳定性(区分正负例) ，10个字段稳定性>=psi_limit（0.1）：
moreq25cnt__dinner_fee    0.179420
dinner_fee                0.153487
max__dinner_fee           0.152195
gprs_flow_busy            0.123167
min__gprs_last_defer      0.119493
max__gprs_last_defer      0.118428
gprs_last_defer           0.111160
gprs_flow_short           0.106784
avg__gprs_flow_video      0.105901
max__call_use             0.104073
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，26个字段稳定性>=psi_limit（0.1）：
days_call_p_4                   0.815315
wave__gprs_resource             0.386834
min__gprs_now_rest              0.324408
wave__gprs_now_rest             0.311510
more0cnt__calling_dura          0.218747
moreq25cnt__calling_dura        0.197932
sep__nos_calling                0.196828
wave__gprs_now_defer            0.194752
sep__nos_calling_diff           0.185014
sep__gprs_flow_commu            0.179077
moreq25cnt__gprs_flow_busy      0.177521
avg__days_call_p_4              0.161767
moreq25cnt__calling_cnt         0.160550
sep__gprs_now_rest              0.153820
more0cnt__nos_calling           0.152311
moreq25cnt__arpu                0.130729
wave__calling_dura              0.130588
moreq25cnt__calling_diff_cnt    0.127010
sep__gprs_flow_video            0.122508
min__gprs_last_defer            0.114629
moreq25cnt__nos_calling         0.113687
moreq25cnt__gprs_last_defer     0.111460
wave__calling_diff_cnt          0.110253
wave__gprs_flow_short           0.109177
wave__gprs_last_defer           0.106144
grow__gprs_resource             0.104334
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例) ，48个字段稳定性>=psi_limit（0.1）：
days_call_p_4                        1.021602
moreq25cnt__arpu                     0.482879
wave__gprs_resource                  0.406220
moreq25cnt__gprs_flow_busy           0.396032
min__arpu                            0.390187
min__gprs_now_rest                   0.359128
more0cnt__calling_dura               0.352916
wave__gprs_flow_music                0.351114
moreq25cnt__calling_dura             0.302418
moreq25cnt__calling_cnt              0.278891
sep__nos_calling_diff                0.275627
min__calling_cnt                     0.270355
sep__nos_calling                     0.267701
more0cnt__nos_calling                0.262691
wave__gprs_now_rest                  0.259353
min__calling_dura                    0.239138
wave__calling_dura                   0.217710
avg__days_call_p                     0.217625
min__calling_diff_dura               0.216448
moreq25cnt__nos_calling              0.210496
avg__days_call_p_4                   0.206154
grow__gprs_resource                  0.202274
std__nos_calling_diff                0.189178
min__gprs_resource                   0.187402
min__gprs_flow_busy                  0.185409
wave__gprs_flow_short                0.181643
sep__gprs_now_rest                   0.178242
sep__gprs_flow_commu                 0.168936
moreq25cnt__calling_diff_cnt         0.167699
grow__arpu                           0.163723
wave__gprs_now_defer                 0.161662
min__call_use                        0.155930
valuecnt__greatest_gprs_app~commu    0.154155
max__gprs_flow_commu                 0.148426
min__calling_diff_cnt                0.147907
std__gprs_flow_commu                 0.145040
wave__call_use                       0.138283
min__nos_calling                     0.137921
std__gprs_flow_busy                  0.135071
moreq25cnt__gprs_flow_video          0.130034
sep__gprs_flow_video                 0.128320
min__gprs_flow_commu                 0.127391
std__nos_calling                     0.125965
moreq25cnt__gprs_flow_commu          0.121864
avg__gprs_flow_busy                  0.121819
max__nos_calling                     0.116812
avg__gprs_now_defer                  0.115887
moreq25cnt__nos_calling_diff         0.108476
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)
