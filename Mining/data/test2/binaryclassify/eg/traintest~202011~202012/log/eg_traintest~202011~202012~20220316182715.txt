
                   ###################################################################### 转换、检查、纠正基础数据字典（Info.field_base） 

20220316-18:27:15  field_base: 89行
20220316-18:27:15  删除5个available“不可用”字段：['gprs_flow_tnet', 'days_outside', 'aaa', 'bbb', 'ccc']
20220316-18:27:15  field_base: 84行

20220316-18:27:15  删除1个基于“不可用”字段加工的手动衍生_py字段：
                           field_name                    formula
                   56  days_outside_p  days_outside / days_month
20220316-18:27:15  field_base: 83行
20220316-18:27:15  删除1个基于“不可用”字段加工的自动衍生_py字段：['valuecnt__days_outside_p~1']
20220316-18:27:15  field_base: 82行


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\binarymodule\modelinfo.py:77: UserWarning: 确定下列时长类字段的renmark是否限制 ‘不参与近n月自动衍生’：
                     field_name                   comment remark
12  monthsaready_last_stop_date  最后停机时间：已发生时长    NaN
13  monthsremain_last_stop_date    最后停机时间：剩余时长    NaN
  warnings.warn(s)

                   ###################################################################### 加工训练账期近n月基础数据
                    
20220316-18:27:15  开始时间：2022-03-16 18:27:15
20220316-18:27:15  month: 202011
20220316-18:27:15  参数设置：
                       step: train
                       Info.model_name: 模型示例
                       Info.n_recent: 3
                       drop_midtable: True
                       cover_table_all: True
                       Info.Pcase_limit: 1000
                       Info.traintable_ratio: 1
                       Info.Pcumsum_limit: 2
                       Info.timein_count: 2000

                   ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220316-18:27:15  检查 ml.ml_feature_info_yw_user_m
20220316-18:27:15      72 列
20220316-18:27:15      202011账期： 10000行
20220316-18:27:15      202010账期： 15000行
20220316-18:27:15      202009账期： 18000行


20220316-18:27:15  检查 ml.ml_feature_add_yw_user_m
20220316-18:27:15      4 列
20220316-18:27:15      202011账期： 10000行
20220316-18:27:15      202010账期： 15000行
20220316-18:27:15      202009账期： 18000行


20220316-18:27:15  检查 ml.ml_feature_info_yw_user_day (20201215账期)
20220316-18:27:16      7 列
20220316-18:27:16      20201215账期： 15000行


20220316-18:27:16  检查 ml.ml_target_info_yw_user_m
20220316-18:27:16      7 列
20220316-18:27:16      202011账期： 10000行

20220316-18:27:16      获取目标字段flag_eg类型：integer



                   -------------------- 汇总当期特征与目标：ml.dm_zc_moxing_info_target_202011 -------------------------- 
20220316-18:27:16  查询表： 
                       select concat(table_schema, '.', table_name) full_name
                       from information_schema.tables 
                       where table_schema = 'ml' and table_name='dm_zc_moxing_info_target_202011'
                       存在1个表 
20220316-18:27:16  ml.dm_zc_moxing_info_target_202011已存在，将重建覆盖
20220316-18:27:16  建表语句： 
                       drop table if exists ml.dm_zc_moxing_info_target_202011;
                       select pg_sleep(10);
                       create table ml.dm_zc_moxing_info_target_202011 as
                       select * from (
                           select a.* 
                           , a2.age_add, a2.sex_add
                           , day.calling_dura dayvalue_calling_dura, day.user_status dayvalue_user_status, day.phone_no_null dayvalue_phone_no_null, day.gprs_flow dayvalue_gprs_flow
                           ,b.flag_eg, b.ymonth_flag_eg2, b.ymonth, b.exe_sam, b.flag_eg2
                           from (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202011') a 
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202011') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201215') day on a.user_id = day.user_id
                           left join (select * from ml.ml_target_info_yw_user_m where cast(acct_month as text)='202011') b on a.user_id = b.user_id
                       ) t where 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3
20220316-18:27:26      sql执行完毕
20220316-18:27:26  统计 ml.dm_zc_moxing_info_target_202011 的行列数
20220316-18:27:26      8354行，83列
20220316-18:27:26  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.dm_zc_moxing_info_target_202011  group by flag_eg
20220316-18:27:26      dis_train_total: {'count': 8354, 'Pcount': 1201, 'prop': 0.144}


                   ------------------- 限定模型目标用户范围：ml.mid_eg_model_train_202011 ------------------------------- 
20220316-18:27:26  建表语句（限定202011账期当月目标用户）： 
                       drop table if exists ml.mid_eg_model_train_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_model_train_202011 as 
                       select * ,row_number() over(order by random()) rn from ml.dm_zc_moxing_info_target_202011
                       where dayvalue_user_status='在网-正常' and 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3 and flag_eg is not null
20220316-18:27:36      sql执行完毕
20220316-18:27:36  统计ml.mid_eg_model_train_202011行列数
20220316-18:27:37      8186行，84列

                   ------------------- 加工训练集[验证集]-当月账期数据：ml.mid_eg_now_train_202011 ---------------------- 
20220316-18:27:37  data_tarin: rn > 2000
20220316-18:27:37  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_model_train_202011 where rn > 2000 group by flag_eg
20220316-18:27:37      dis_train_model {'count': 6186, 'Pcount': 903, 'prop': 0.146}

20220316-18:27:37  正例样本：903
20220316-18:27:37      <=Pcase_limit（1000）, 故只取全部：903
20220316-18:27:37  负例样本总量：5283
20220316-18:27:37      从中随机抽取903（903*1）

20220316-18:27:37  拼接当月正负例抽样语句

20220316-18:27:37  加工当月data_timein数据
20220316-18:27:37  建表语句： 
                       drop table if exists ml.mid_eg_now_timein_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_now_timein_202011 as
                       select * from ml.mid_eg_model_train_202011 where rn <= 2000
20220316-18:27:47      sql执行完毕
20220316-18:27:47  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_now_timein_202011  group by flag_eg
20220316-18:27:47      dis_timein_sample {'count': 2000, 'Pcount': 264, 'prop': 0.132}

20220316-18:27:47      dis_timein_sample 较 dis_train_model 正例占比 变动幅度-9.58904% (0.132 较 0.146)



D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\tablemodule\tablefun.py:413: UserWarning:     dis_timein_sample 较 dis_train_model 正例占比 变动幅度-9.58904% (0.132 较 0.146)

  warnings.warn(s)
20220316-18:27:47  建表语句（202011账期当月数据） 
                       drop table if exists ml.mid_eg_now_train_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_now_train_202011 as
                       (select * from ml.mid_eg_model_train_202011 where rn > 2000 and cast(flag_eg as text)='1' order by random() limit 903) 
                       union all 
                       (select * from ml.mid_eg_model_train_202011 where rn > 2000 and cast(flag_eg as text)='0' order by random() limit 903)
20220316-18:27:57      sql执行完毕
20220316-18:27:57  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_now_train_202011  group by flag_eg
20220316-18:27:57      dis_train_sample {'count': 1806, 'Pcount': 903, 'prop': 0.5}


                   ------------------------ 合并近n月数据：ml.mid_eg_recent_train_202011  -------------------------------- 
20220316-18:27:57  建表语句： 
                       drop table if exists ml.mid_eg_recent_train_202011;
                       select pg_sleep(10);
                       create table ml.mid_eg_recent_train_202011 as 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_train'  as text) data_use, * from ml.mid_eg_now_train_202011
                       ) t0
                       union all 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_train'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.calling_dura dayvalue_calling_dura, day.gprs_flow dayvalue_gprs_flow
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_train_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202010') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202010') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201115') day on a.user_id = day.user_id
                       ) t1
                       union all
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_train'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.calling_dura dayvalue_calling_dura, day.gprs_flow dayvalue_gprs_flow
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_train_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202009') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202009') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201015') day on a.user_id = day.user_id
                       ) t2
                       
                       
                       union all
                       
                        select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_timein'  as text) data_use, * from ml.mid_eg_now_timein_202011
                       ) t3
                       union all 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_timein'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.calling_dura dayvalue_calling_dura, day.gprs_flow dayvalue_gprs_flow
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_timein_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202010') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202010') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201115') day on a.user_id = day.user_id
                       ) t4
                       union all
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202011 as text) user_acct_month, cast('data_timein'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.calling_dura dayvalue_calling_dura, day.gprs_flow dayvalue_gprs_flow
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as int) rn 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_timein_202011 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202009') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202009') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201015') day on a.user_id = day.user_id
                       ) t5
20220316-18:28:08      sql执行完毕
20220316-18:28:08  统计ml.mid_eg_recent_train_202011行列数
20220316-18:28:08      3806行，74列

                   --------------------------------- 核验各账期数据量  -------------------------------------------------- 
20220316-18:28:08  sql语句： 
                       select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                       from ml.mid_eg_recent_train_202011 
                       group by user_acct_month, data_use, acct_month, flag_eg 
                       order by user_acct_month, data_use, acct_month, flag_eg

20220316-18:28:08  结果：
                     user_acct_month     data_use  acct_month  flag_eg  count
                   0          202011  data_timein      202009      NaN   2000
                   1          202011  data_timein      202010      NaN   2000
                   2          202011  data_timein      202011      0.0   1736
                   3          202011  data_timein      202011      1.0    264
                   4          202011   data_train      202009      NaN   1806
                   5          202011   data_train      202010      NaN   1806
                   6          202011   data_train      202011      0.0    903
                   7          202011   data_train      202011      1.0    903

                   -------------------------------- 删除中间表 ----------------------------------------------------- 
20220316-18:28:08  sql语句： drop table if exists ml.mid_eg_model_train_202011
20220316-18:28:08      sql执行完毕
20220316-18:28:08  sql语句： drop table if exists ml.mid_eg_now_train_202011
20220316-18:28:08      sql执行完毕
20220316-18:28:08  sql语句： drop table if exists ml.mid_eg_now_timein_202011
20220316-18:28:08      sql执行完毕

20220316-18:28:08  返回结果表名：ml.mid_eg_recent_train_202011
20220316-18:28:08  将Info保存至./binaryclassify/eg/traintest~202011~202012/Info~base_train.pkl

20220316-18:28:08  结束时间：2022-03-16 18:28:08
20220316-18:28:08  耗时：53 s

                   ###################################################################### 探索模型宽表
                    
20220316-18:28:08  开始时间：2022-03-16 18:28:08
20220316-18:28:08  参数设置：
                       Info.iv_limit: 0.05
                       Info.model_name: 模型示例
                       stage: explore
                       step: train
                       Info.r_limit: 0.95
                       table_in: ml.mid_eg_recent_train_202011
                       Info.auto_pair2: False

20220316-18:28:08  field_base: 82行

20220316-18:28:08  删除7个available_notzd“不可用”字段：['cred_type', 'called_dura', 'days_roam', 'dayvalue_calling_dura', 'dayvalue_gprs_flow', 'dayvalue_user_status', 'dayvalue_phone_no_null']
20220316-18:28:08  field_base: 75行

20220316-18:28:08  删除1个基于“不可用”字段加工的手动衍生_py字段：
                        field_name                 formula
                   52  days_roam_p  days_roam / days_month
20220316-18:28:08  field_base: 74行
20220316-18:28:08  ------------------------- 读取数据: ml.mid_eg_recent_train_202011 2022-03-16 18:28:08 -------------------------
20220316-18:28:08      src: gp
20220316-18:28:08      condition: data_use='data_train'
20220316-18:28:08      col_need(67): ['user_acct_month', 'data_use', 'acct_month', 'user_id', 'innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'innet_date', 'last_stop_date', 'phone_no_null', 'phone_no_tm', 'dinner_id', 'account_id', 'sex', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220316-18:28:08      col_del: None
20220316-18:28:08      col_char(21): ['acct_month', 'phone_no_null', 'phone_no_tm', 'user_id', 'dinner_id', 'account_id', 'sex', 'user_status', 'dinner', 'if_nolimit', 'if_5g_dinner', 'if_5g_term', 'if_jt', 'start_level', 'if_cred_multi', 'term_model', 'term_brand', 'term_type', 'sk_type', 'if_new_term', 'flag_eg']
20220316-18:28:08      col_num(42): ['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'pay_cnt', 'pay_fee', 'acct_balance', 'calling_cnt', 'calling_dura', 'called_cnt', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow', 'gprs_flow_4g', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_idle', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'gprs_flow_gat', 'days_gat', 'days_gprs', 'days_call', 'nos_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'call_fee_roam', 'gprs_income', 'gprs_fee', 'call_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220316-18:28:08      col_date(2): ['innet_date', 'last_stop_date']
20220316-18:28:08      nrows: None
20220316-18:28:08      if_coltolower: True
20220316-18:28:08      kwargs: {}

20220316-18:28:08      读取
20220316-18:28:08      shape: (5418, 67)

20220316-18:28:09  -------------------------读取完毕: (5418, 67) 2022-03-16 18:28:09 -------------------------

20220316-18:28:09  手动衍生_py10个字段: {'monthsaready_last_stop_date': '最后停机时间：已发生时长', 'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_gprs_p': '上网天数占比', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好', 'paste_dinner_innet_months': '主套餐、入网时长：交叉'}
20220316-18:28:09  monthsaready_last_stop_date: current_date - last_stop_date
20220316-18:28:09      将 monthsaready_last_stop_date 字段的 4 个缺失值赋值为: -99999 （非缺失的最小值-2.0）
20220316-18:28:09  monthsremain_last_stop_date: last_stop_date - current_date
20220316-18:28:09      将 monthsremain_last_stop_date 字段的 4 个缺失值赋值为: -99999 （非缺失的最小值-101.0）
20220316-18:28:09  days_gprs_p: days_gprs / days_month
20220316-18:28:09  days_call_p: days_call / days_month
20220316-18:28:09  days_call_p_1: days_call_p + days_gprs
20220316-18:28:09  days_call_p_2: days_call_p_1 + days_gprs
20220316-18:28:09  days_call_p_3: days_call_p_2 + days_gprs
20220316-18:28:09  days_call_p_4: days_call_p_3 + days_gprs
20220316-18:28:09  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220316-18:28:10  paste_dinner_innet_months: (dinner, innet_months)
20220316-18:28:10  数据量: (5418, 77)

20220316-18:28:10  检查数据
20220316-18:28:10  各账期数据量分布：
                       202009  data_train    1806
                       202010  data_train    1806
                       202011  data_train    1806
                       dtype: int64
20220316-18:28:10  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！

20220316-18:28:10  字段类型分布: 
                       float64    45
                       object    25
                       int64    5
                       datetime64[ns]    2
                       dtype: int64


20220316-18:28:10  填充数值型&类别型字段缺失值
20220316-18:28:10  日期型字段缺失值情况：
                       innet_date    0
                       last_stop_date    4
                       dtype: int64

20220316-18:28:10  正负例分布：
                       data_train  202011  0    903
                       data_train  202011  1    903
                       dtype: int64

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220316-18:28:10  新数据newdata的shape：(1806, 71)
20220316-18:28:10  数据转换
20220316-18:28:14  转换后shape：(1806, 34)
20220316-18:28:14  从流水线中获取WoeTransformer_DF
20220316-18:28:14  首个数据集，直接返回woe编码结果
20220316-18:28:14  筛选衍生字段的 原始/手动衍生_sql 字段
20220316-18:28:14  数值型字段：有效字段28个，其中当月自动衍生字段27个，近n月自动衍生字段27个
20220316-18:28:14  类别型字段：有效字段6个（强制加入0个）:
20220316-18:28:14      当月自动衍生_py字段6个: ['sex~女', 'sex~男', 'if_nolimit~是', 'if_5g_dinner~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video']
20220316-18:28:14      近n月自动衍生_py字段6个: ['sex~女', 'sex~男', 'if_nolimit~是', 'if_5g_dinner~是', 'greatest_gprs_app~commu', 'greatest_gprs_app~video']

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220316-18:28:14  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:14  新数据newdata的shape：(1806, 28)
20220316-18:28:14  数据转换
20220316-18:28:16  转换后shape：(1806, 26)
20220316-18:28:16  从流水线中获取WoeTransformer_DF
20220316-18:28:17  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有2对
20220316-18:28:17      从中二者中剔除字段2个字段:['avg__age', 'monthsremain_last_stop_date']
20220316-18:28:17      其中待新增中剔除1个
20220316-18:28:17      其中原宽表中剔除1个

20220316-18:28:17  已有宽表shape：(1806, 34)
20220316-18:28:17  向宽表中加入字段（25个）：['avg__dinner_fee', 'avg__gprs_now_defer', 'avg__monthsremain_last_stop_date', 'avg__nos_calling_diff', 'avg__calling_diff_cnt', 'avg__gprs_flow_roam', 'avg__call_dura_roam', 'avg__gprs_flow_commu', 'avg__nos_calling', 'avg__gprs_last_defer', 'avg__gprs_flow_video', 'avg__arpu', 'avg__gprs_flow_music', 'avg__calling_diff_dura', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__calling_cnt', 'avg__acct_balance', 'avg__gprs_flow_busy', 'avg__days_call_p_4', 'avg__calling_dura', 'avg__gprs_resource', 'avg__gprs_now_rest', 'avg__gprs_flow_short', 'avg__gprs_flow_game']
20220316-18:28:17  从宽表中删除字段（1个）：['monthsremain_last_stop_date']
20220316-18:28:17  目前宽表shape：(1806, 58)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220316-18:28:17  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:17  新数据newdata的shape：(1806, 28)
20220316-18:28:17  数据转换
20220316-18:28:18  转换后shape：(1806, 12)
20220316-18:28:18  从流水线中获取WoeTransformer_DF
20220316-18:28:19  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有1对
20220316-18:28:19      从中二者中剔除字段1个字段:['sep__gprs_flow_game']
20220316-18:28:19      其中待新增中剔除1个
20220316-18:28:19      其中原宽表中剔除0个

20220316-18:28:19  已有宽表shape：(1806, 58)
20220316-18:28:19  向宽表中加入字段（11个）：['sep__gprs_resource', 'sep__gprs_flow_commu', 'sep__nos_calling', 'sep__gprs_flow_music', 'sep__gprs_flow_video', 'sep__gprs_flow_5g', 'sep__gprs_last_defer', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_now_rest', 'sep__gprs_flow_short']
20220316-18:28:19  从宽表中删除字段（0个）：[]
20220316-18:28:19  目前宽表shape：(1806, 69)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220316-18:28:19  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:19  新数据newdata的shape：(1806, 28)
20220316-18:28:19  数据转换
20220316-18:28:21  转换后shape：(1806, 12)
20220316-18:28:21  从流水线中获取WoeTransformer_DF
20220316-18:28:21  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有3对
20220316-18:28:21      从中二者中剔除字段3个字段:['wave__gprs_resource', 'gprs_now_defer', 'sep__gprs_flow_video']
20220316-18:28:21      其中待新增中剔除1个
20220316-18:28:21      其中原宽表中剔除2个

20220316-18:28:21  已有宽表shape：(1806, 69)
20220316-18:28:21  向宽表中加入字段（11个）：['wave__gprs_flow_short', 'wave__gprs_flow_game', 'wave__call_use', 'wave__gprs_now_defer', 'wave__nos_calling', 'wave__gprs_now_rest', 'wave__gprs_flow_commu', 'wave__gprs_last_defer', 'wave__gprs_flow_video', 'wave__gprs_flow_5g', 'wave__gprs_flow_music']
20220316-18:28:21  从宽表中删除字段（2个）：['sep__gprs_flow_video', 'gprs_now_defer']
20220316-18:28:21  目前宽表shape：(1806, 78)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220316-18:28:21  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:21  新数据newdata的shape：(1806, 28)
20220316-18:28:21  数据转换
20220316-18:28:23  转换后shape：(1806, 24)
20220316-18:28:23  从流水线中获取WoeTransformer_DF
20220316-18:28:24  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有8对
20220316-18:28:24      从中二者中剔除字段8个字段:['grow__days_call_p_4', 'grow__gprs_flow_game', 'grow__acct_balance', 'grow__gprs_flow_music', 'grow__gprs_flow_short', 'grow__gprs_resource', 'grow__gprs_now_defer', 'grow__monthsremain_last_stop_date']
20220316-18:28:24      其中待新增中剔除8个
20220316-18:28:24      其中原宽表中剔除0个

20220316-18:28:24  已有宽表shape：(1806, 78)
20220316-18:28:24  向宽表中加入字段（16个）：['grow__gprs_flow_busy', 'grow__calling_dura', 'grow__dinner_fee', 'grow__arpu', 'grow__nos_calling', 'grow__nos_calling_diff', 'grow__gprs_flow_commu', 'grow__call_use', 'grow__calling_cnt', 'grow__gprs_now_rest', 'grow__calling_diff_dura', 'grow__gprs_flow_video', 'grow__gprs_last_defer', 'grow__gprs_flow_roam', 'grow__gprs_flow_5g', 'grow__calling_diff_cnt']
20220316-18:28:24  从宽表中删除字段（0个）：[]
20220316-18:28:24  目前宽表shape：(1806, 94)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220316-18:28:24  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:24  新数据newdata的shape：(1806, 28)
20220316-18:28:24  数据转换
20220316-18:28:26  转换后shape：(1806, 25)
20220316-18:28:26  从流水线中获取WoeTransformer_DF
20220316-18:28:28  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有11对
20220316-18:28:28      从中二者中剔除字段11个字段:['max__gprs_flow_game', 'max__age', 'max__gprs_flow_music', 'max__gprs_flow_5g', 'max__dinner_fee', 'max__gprs_now_defer', 'avg__days_call_p_4', 'max__gprs_flow_video', 'max__gprs_flow_busy', 'avg__gprs_flow_commu', 'max__monthsremain_last_stop_date']
20220316-18:28:28      其中待新增中剔除9个
20220316-18:28:28      其中原宽表中剔除2个

20220316-18:28:28  已有宽表shape：(1806, 94)
20220316-18:28:28  向宽表中加入字段（16个）：['max__gprs_last_defer', 'max__arpu', 'max__calling_dura', 'max__calling_diff_dura', 'max__call_dura_roam', 'max__nos_calling', 'max__nos_calling_diff', 'max__calling_diff_cnt', 'max__calling_cnt', 'max__gprs_flow_commu', 'max__gprs_flow_roam', 'max__days_call_p_4', 'max__call_use', 'max__gprs_flow_short', 'max__gprs_resource', 'max__gprs_now_rest']
20220316-18:28:28  从宽表中删除字段（2个）：['avg__gprs_flow_commu', 'avg__days_call_p_4']
20220316-18:28:28  目前宽表shape：(1806, 108)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220316-18:28:28  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:28  新数据newdata的shape：(1806, 28)
20220316-18:28:28  数据转换
20220316-18:28:30  转换后shape：(1806, 22)
20220316-18:28:30  从流水线中获取WoeTransformer_DF
20220316-18:28:32  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有3对
20220316-18:28:32      从中二者中剔除字段3个字段:['min__age', 'min__monthsremain_last_stop_date', 'min__gprs_now_defer']
20220316-18:28:32      其中待新增中剔除3个
20220316-18:28:32      其中原宽表中剔除0个

20220316-18:28:32  已有宽表shape：(1806, 108)
20220316-18:28:32  向宽表中加入字段（19个）：['min__gprs_resource', 'min__nos_calling_diff', 'min__nos_calling', 'min__gprs_flow_video', 'min__call_use', 'min__gprs_flow_short', 'min__arpu', 'min__gprs_last_defer', 'min__dinner_fee', 'min__gprs_now_rest', 'min__gprs_flow_busy', 'min__gprs_flow_game', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_flow_music', 'min__gprs_flow_roam', 'min__calling_diff_dura', 'min__calling_cnt', 'min__calling_diff_cnt']
20220316-18:28:32  从宽表中删除字段（0个）：[]
20220316-18:28:32  目前宽表shape：(1806, 127)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220316-18:28:32  字段个数：27, 添加字段：['flag_eg']
20220316-18:28:32  新数据newdata的shape：(1806, 28)
20220316-18:28:32  数据转换
20220316-18:28:33  转换后shape：(1806, 18)
20220316-18:28:33  从流水线中获取WoeTransformer_DF
20220316-18:28:35  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有5对
20220316-18:28:35      从中二者中剔除字段5个字段:['std__gprs_flow_short', 'std__gprs_flow_game', 'std__gprs_flow_music', 'max__gprs_flow_roam', 'sep__gprs_flow_5g']
20220316-18:28:35      其中待新增中剔除3个
20220316-18:28:35      其中原宽表中剔除2个

20220316-18:28:35  已有宽表shape：(1806, 127)
20220316-18:28:35  向宽表中加入字段（15个）：['std__nos_calling_diff', 'std__call_use', 'std__gprs_resource', 'std__gprs_flow_commu', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__calling_diff_dura', 'std__gprs_flow_5g', 'std__gprs_flow_roam', 'std__nos_calling', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__calling_dura', 'std__gprs_last_defer', 'std__gprs_now_rest']
20220316-18:28:35  从宽表中删除字段（2个）：['max__gprs_flow_roam', 'sep__gprs_flow_5g']
20220316-18:28:35  目前宽表shape：(1806, 140)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220316-18:28:35  ('more0cnt', '近3月大于0的月份数')
20220316-18:28:36  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220316-18:28:36  新数据newdata的shape：(1806, 55)
20220316-18:28:36  数据转换
20220316-18:28:38  转换后shape：(1806, 19)
20220316-18:28:38  从流水线中获取WoeTransformer_DF
20220316-18:28:39  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有4对
20220316-18:28:39      从中二者中剔除字段4个字段:['moreq25cnt__gprs_flow_game', 'moreq25cnt__gprs_flow_music', 'more0cnt__gprs_flow_busy', 'moreq25cnt__gprs_flow_5g']
20220316-18:28:39      其中待新增中剔除4个
20220316-18:28:39      其中原宽表中剔除0个

20220316-18:28:39  已有宽表shape：(1806, 140)
20220316-18:28:39  向宽表中加入字段（15个）：['more0cnt__calling_cnt', 'moreq25cnt__call_use', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__calling_diff_dura', 'moreq25cnt__arpu', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__nos_calling_diff', 'more0cnt__nos_calling', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__nos_calling']
20220316-18:28:39  从宽表中删除字段（0个）：[]
20220316-18:28:39  目前宽表shape：(1806, 155)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220316-18:28:39  字段个数：6, 添加字段：['flag_eg']
20220316-18:28:39  新数据newdata的shape：(1806, 7)
20220316-18:28:39  数据转换
20220316-18:28:39  转换后shape：(1806, 5)
20220316-18:28:39  从流水线中获取WoeTransformer_DF
20220316-18:28:39  待新增字段与原宽表字段 相关性系数大于Info.r_limit（0.95）的字段对有4对
20220316-18:28:39      从中二者中剔除字段4个字段:['sex~男', 'sex~女', 'if_nolimit~是', 'if_5g_dinner~是']
20220316-18:28:39      其中待新增中剔除0个
20220316-18:28:39      其中原宽表中剔除4个

20220316-18:28:39  已有宽表shape：(1806, 155)
20220316-18:28:39  向宽表中加入字段（5个）：['valuecnt__if_nolimit~是', 'valuecnt__greatest_gprs_app~video', 'valuecnt__sex~男', 'valuecnt__if_5g_dinner~是', 'valuecnt__sex~女']
20220316-18:28:39  从宽表中删除字段（4个）：['if_nolimit~是', 'sex~男', 'if_5g_dinner~是', 'sex~女']
20220316-18:28:39  目前宽表shape：(1806, 156)

                   ----------------------------------------- 汇总最终宽表 
20220316-18:28:39  计算字段之间的相关性系数
20220316-18:28:40  
                       count    12090.0
                       mean    0.264
                       std    0.185
                       min    0.0
                       25%    0.131
                       50%    0.218
                       75%    0.34
                       max    0.949
                       dtype: float64

20220316-18:28:40  iv分布：
                       count    156.0
                       mean    0.176
                       std    0.139
                       min    0.051
                       25%    0.075
                       50%    0.098
                       75%    0.255
                       max    0.691
                       dtype: float64

20220316-18:28:40  woe_accum(累计)概览：                                            value    0    1       woe    weight  woe_weight  ALL
                       std__gprs_flow_commu          (11.86009, inf]  123  380  1.127987  0.284607    0.321033  503
                       grow__gprs_resource           (0.517369, inf]  140  369  0.969154  0.253599    0.245777  509
                       gprs_resource                (6510019.5, inf]  141  371  0.967442  0.254707    0.246414  512
                       std__gprs_flow_video         (20.495934, inf]  144  374  0.954442  0.254707    0.243103  518
                       moreq25cnt__gprs_flow_commu        (1.5, inf]  154  387  0.921472  0.258029    0.237766  541

20220316-18:28:40  最终宽表字段列表col_all:
20220316-18:28:40      len(col_all): 156
20220316-18:28:40      补充3个的字段（must_remain=是）：{'account_id', 'greatest_gprs_app', 'user_status'}
20220316-18:28:40      len(col_all): 159
20220316-18:28:40      补充账期、数据集名称、用户标识等，目标字段(Info.col_mark、Info.col_target)
20220316-18:28:40      len(col_all): 164

20220316-18:28:40      补充6个的字段（col_mark、col_target、condition、dict_sortscore、col_out）：{'call_fee_local', 'sms_cnt', 'last_stop_date', 'phone_no_null', 'dayvalue_phone_no_null', 'dayvalue_user_status'}
20220316-18:28:40      len(col_all): 170
20220316-18:28:40  整理宽表数据字典
                   宽表数据字典概览 (170, 14):
                        是否宽表字段       field_name         comment dtype_classify     field_src available available_notzd available_zd formula          remark must_remain into_model is_cause  \
                                  是  user_acct_month  观察期最后账期         类别型  手动衍生_sql       NaN             NaN          NaN     NaN             NaN         NaN        NaN      NaN   
                                  是         data_use      数据集名称         类别型  手动衍生_sql       NaN             NaN          NaN     NaN             NaN         NaN        NaN      NaN   
                                  是       acct_month            账期         类别型          原始       NaN             NaN          NaN     NaN             NaN         NaN        NaN       否   
                                  是    phone_no_null        手机号码         类别型          原始       NaN             NaN          NaN     NaN  不参与自动衍生         NaN       删除       否   
                                  是          user_id        手机号id         类别型          原始       NaN             NaN          NaN     NaN             NaN         NaN        NaN       否   
                   
                               base_init  
                         user_acct_month  
                                data_use  
                              acct_month  
                           phone_no_null  
                                 user_id  

20220316-18:28:40  保存Info至：./binaryclassify/eg/traintest~202011~202012/Info~tabexp.pkl
20220316-18:28:40  结束时间：2022-03-16 18:28:40
20220316-18:28:40  耗时：31 s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: opera_pair_fun paste时存在非类别型字段，请确认: ['innet_months']
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: field_base中未包括下列字段，但实际数据 多出：{'data_use', 'user_acct_month'}
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: field_base中未规定下列字段数据类型，请确认默认类型是否正确：{'data_use': 'object', 'user_acct_month': 'object'}
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(1806), 添加unique_limit_actual：len(X)*0.99=1787
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     NumStrSpliter 数据中未出现非数值型字段！
  mapped = lib.map_infer(values, f, convert=convert_dtype)

                   ###################################################################### 训练集加工
                    
20220316-18:28:40  开始时间：2022-03-16 18:28:40
20220316-18:28:40  参数设置：
                       stage: create
                       Info.iv_limit: 0.05
                       Info.model_name: 模型示例
                       step: train
                       Info.r_limit: 0.95
                       table_in: ml.mid_eg_recent_train_202011
                       Info.auto_pair2: False

20220316-18:28:40  ------------------------- 读取数据: ml.mid_eg_recent_train_202011 2022-03-16 18:28:40 -------------------------
20220316-18:28:40      src: gp
20220316-18:28:40      condition: None
20220316-18:28:40      col_need(44): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'innet_months', 'age', 'sex', 'user_status', 'last_stop_date', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'if_nolimit', 'if_5g_dinner', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220316-18:28:40      col_del: None
20220316-18:28:40      col_char(13): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'sex', 'user_status', 'if_nolimit', 'if_5g_dinner', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220316-18:28:40      col_num(30): ['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220316-18:28:40      col_date(1): ['last_stop_date']
20220316-18:28:40      nrows: None
20220316-18:28:40      if_coltolower: True
20220316-18:28:40      kwargs: {}

20220316-18:28:40      读取
20220316-18:28:40      shape: (11418, 44)

20220316-18:28:40  -------------------------读取完毕: (11418, 44) 2022-03-16 18:28:40 -------------------------

20220316-18:28:40  手动衍生_py7个字段: {'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好'}
20220316-18:28:40  monthsremain_last_stop_date: last_stop_date - current_date
20220316-18:28:41      将 monthsremain_last_stop_date 字段的 6 个缺失值赋值为: -99999 （非缺失的最小值-101.0）
20220316-18:28:41  days_call_p: days_call / days_month
20220316-18:28:41  days_call_p_1: days_call_p + days_gprs
20220316-18:28:41  days_call_p_2: days_call_p_1 + days_gprs
20220316-18:28:41  days_call_p_3: days_call_p_2 + days_gprs
20220316-18:28:41  days_call_p_4: days_call_p_3 + days_gprs
20220316-18:28:41  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220316-18:28:43  数据量: (11418, 51)

20220316-18:28:43  检查数据
20220316-18:28:43  各账期数据量分布：
                       202009  data_timein    2000
                       202009  data_train    1806
                       202010  data_timein    2000
                       202010  data_train    1806
                       202011  data_timein    2000
                       202011  data_train    1806
                       dtype: int64
20220316-18:28:43  各账期数据量不一致
20220316-18:28:43  以nan填充缺少账期的记录
20220316-18:28:43      修改后：
                       202009  data_timein    2000
                       202009  data_train    1806
                       202010  data_timein    2000
                       202010  data_train    1806
                       202011  data_timein    2000
                       202011  data_train    1806
                       dtype: int64)
20220316-18:28:43  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！


20220316-18:28:43  填充数值型&类别型字段缺失值
20220316-18:28:43  日期型字段缺失值情况：
                       last_stop_date    6
                       dtype: int64

20220316-18:28:43  正负例分布：
                       data_timein  202011  0    1736
                       data_timein  202011  1    264
                       data_train  202011  0    903
                       data_train  202011  1    903
                       dtype: int64

                   ----------------------------------------- 当月 类别型 onthot 
20220316-18:28:43  ['greatest_gprs_app~commu', 'greatest_gprs_app~video']

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220316-18:28:43  (3806, 42)
20220316-18:28:43  筛选衍生字段的 原始/手动衍生_sql 字段

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220316-18:28:43  字段个数：23, 添加字段：None
20220316-18:28:43  (3806, 65)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220316-18:28:43  字段个数：9, 添加字段：None
20220316-18:28:43  (3806, 74)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220316-18:28:43  字段个数：11, 添加字段：None
20220316-18:28:43  (3806, 85)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220316-18:28:43  字段个数：16, 添加字段：None
20220316-18:28:43  (3806, 101)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220316-18:28:43  字段个数：15, 添加字段：None
20220316-18:28:43  (3806, 116)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220316-18:28:43  字段个数：19, 添加字段：None
20220316-18:28:43  (3806, 135)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220316-18:28:43  字段个数：15, 添加字段：None
20220316-18:28:43  (3806, 150)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220316-18:28:43  ('more0cnt', '近3月大于0的月份数')
20220316-18:28:43  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220316-18:28:43  (3806, 165)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220316-18:28:43  字段个数：5, 添加字段：None
20220316-18:28:44  (3806, 170)

                   ----------------------------------------- 汇总最终宽表 
20220316-18:28:44  table.shape:(3806, 170)

20220316-18:28:44  保存宽表结果至：./binaryclassify/eg/traintest~202011~202012/train_data~202011.csv

20220316-18:28:44  计算字段之间的相关性系数
20220316-18:28:44  
                       count    12090.0
                       mean    0.164
                       std    0.192
                       min    0.0
                       25%    0.037
                       50%    0.099
                       75%    0.212
                       max    1.0
                       dtype: float64


                   ------------------------------- 计算宽表字段psi ------------------------------------ 
20220316-18:28:44  训练集 data_train
                    
                    20220316-18:28:44  my toolmodule.dataprep.PsiTransformer_DF fit
                    20220316-18:28:44      开始时间：2022-03-16 18:28:44
                    20220316-18:28:44      data in : (1806, 159)
                    20220316-18:28:44      首次从X获取id_X属性 1913720974472
                    20220316-18:28:44      fit轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=False, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                    20220316-18:28:44      输入数据中包括156个数值型字段，先对其进行mdlp分箱：['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
                    20220316-18:28:44      ---------------------------Psi: Mdlp_dt_DF start -------------------------------
                                           
                                           20220316-18:28:44  my toolmodule.dataprep.Mdlp_dt_DF fit_transform
                                           20220316-18:28:44      开始时间：2022-03-16 18:28:44
                                           20220316-18:28:44      data in : (1806, 156)
                                               
                                               20220316-18:28:44  my toolmodule.dataprep.Mdlp_dt_DF fit
                                               20220316-18:28:44      开始时间：2022-03-16 18:28:44
                                               20220316-18:28:44      data in : (1806, 156)
                                               20220316-18:28:44      首次从X获取id_X属性 1913687711048
                                               20220316-18:28:44      fit轨迹：Mdlp_dt_DF(bin_uplimit=None, if_del=False, min_binsize=30, precision=6, , trans_na_error=True)
                                               20220316-18:28:52      提取未离散的1字段名（无有效切点）：['grow__gprs_flow_roam']
                                               20220316-18:28:52      结束时间：2022-03-16 18:28:52 耗时(7s)
                                               
                                               20220316-18:28:52  my toolmodule.dataprep.Mdlp_dt_DF transform
                                               20220316-18:28:52      开始时间：2022-03-16 18:28:52
                                               20220316-18:28:52      data in : (1806, 156)
                                               20220316-18:28:52      self已带有id_X属性 1913687711048
                                               20220316-18:28:52      首次从X获取id_X_new属性 1913687711048
                                               20220316-18:28:52      未剔除1个字段：['grow__gprs_flow_roam']
                                               20220316-18:28:53      data out: (1806, 156)
                                               20220316-18:28:53      transform轨迹：Mdlp_dt_DF(bin_uplimit=None, if_del=False, min_binsize=30, precision=6, , trans_na_error=True)
                                               20220316-18:28:53      结束时间：2022-03-16 18:28:53 耗时(1s)
                                           
                                           20220316-18:28:53      my toolmodule.dataprep.Mdlp_dt_DF fit_transform 结束时间：2022-03-16 18:28:53 耗时(8s)
                    20220316-18:28:53      ---------------------------Psi: Mdlp_dt_DF end -------------------------------
                    20220316-18:28:53      合并离散后的数值字段 与 类别字段：(1806, 159)
                    20220316-18:28:53      data_train（初次） 统计频数（区分正负例）：self.col_pop_PN_old_
                    20220316-18:28:56      不统计频数（不区分正负例）：训练数据经过抽样，非原始比例，如有需要可自行修改
                    20220316-18:28:56      结束时间：2022-03-16 18:28:56 耗时(12s)


20220316-18:28:56  时间内验证集 data_timein
                    
                    20220316-18:28:56  my toolmodule.dataprep.PsiTransformer_DF transform
                    20220316-18:28:56      开始时间：2022-03-16 18:28:56
                    20220316-18:28:56      data in : (2000, 169)
                    20220316-18:28:56      self已带有id_X属性 1913720974472
                    20220316-18:28:56      首次从X获取id_X_new属性 1913738586824
                    20220316-18:28:57      data in2: (2000, 159)
                    20220316-18:28:57      对156个数值字段进行分箱：['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
                    20220316-18:28:57      data_timein（初次） 统计频数（不区分正负例）：self.col_pop_all_old_
                    20220316-18:28:58      data_timein 计算稳定度（区分正负例）：self.col_psi_PN_
                    20220316-18:29:05          无字段稳定性>=psi_limit（0.1）
                    20220316-18:29:05      data out: (2000, 159)
                    20220316-18:29:05      transform轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=False, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                    20220316-18:29:05      结束时间：2022-03-16 18:29:05 耗时(8s)


20220316-18:29:05  保存Info至：./binaryclassify/eg/traintest~202011~202012/Info~tabcre_train.pkl
20220316-18:29:05  结束时间：2022-03-16 18:29:05
20220316-18:29:05  耗时：24 s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: stage取值为create时,r_limit, iv_limit参数无效，将被忽略
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例)-正例（1） ['account_id']字段多出1545个取值, .head(5):
                      old  new
field      value              
account_id 101798527  NaN  1.0
           102154765  NaN  1.0
           102168568  NaN  1.0
           102178085  NaN  1.0
           102180766  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timein 计算稳定性(区分正负例)-负例（0） ['account_id']字段多出1545个取值, .head(5):
                      old  new
field      value              
account_id 101798527  NaN  1.0
           102154765  NaN  1.0
           102168568  NaN  1.0
           102178085  NaN  1.0
           102180766  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)

                   ###################################################################### 加工测试账期近n月基础数据
                    
20220316-18:29:05  开始时间：2022-03-16 18:29:05
20220316-18:29:05  month: 202012
20220316-18:29:05  参数设置：
                       step: test
                       Info.model_name: 模型示例
                       Info.n_recent: 3
                       drop_midtable: True
                       cover_table_all: True
                       Info.timeout_limit: 3000

                   ------------------------------------- 检查各前置表 --------------------------------------------------- 
20220316-18:29:05  检查 ml.ml_feature_info_yw_user_m
20220316-18:29:05      72 列
20220316-18:29:05      202012账期： 15000行
20220316-18:29:05      202011账期： 10000行
20220316-18:29:05      202010账期： 15000行


20220316-18:29:05  检查 ml.ml_feature_add_yw_user_m
20220316-18:29:06      4 列
20220316-18:29:06      202012账期： 15000行
20220316-18:29:06      202011账期： 10000行
20220316-18:29:06      202010账期： 15000行


20220316-18:29:06  检查 ml.ml_feature_info_yw_user_day (20210115账期)
20220316-18:29:06      7 列
20220316-18:29:06      20210115账期： 18000行


20220316-18:29:06  检查 ml.ml_target_info_yw_user_m
20220316-18:29:06      7 列
20220316-18:29:06      202012账期： 15000行

20220316-18:29:06      获取目标字段flag_eg类型：integer



                   -------------------- 汇总当期特征与目标：ml.dm_zc_moxing_info_target_202012 -------------------------- 
20220316-18:29:06  查询表： 
                       select concat(table_schema, '.', table_name) full_name
                       from information_schema.tables 
                       where table_schema = 'ml' and table_name='dm_zc_moxing_info_target_202012'
                       存在1个表 
20220316-18:29:06  ml.dm_zc_moxing_info_target_202012已存在，将重建覆盖
20220316-18:29:06  建表语句： 
                       drop table if exists ml.dm_zc_moxing_info_target_202012;
                       select pg_sleep(10);
                       create table ml.dm_zc_moxing_info_target_202012 as
                       select * from (
                           select a.* 
                           , a2.age_add, a2.sex_add
                           , day.calling_dura dayvalue_calling_dura, day.user_status dayvalue_user_status, day.phone_no_null dayvalue_phone_no_null, day.gprs_flow dayvalue_gprs_flow
                           ,b.flag_eg, b.ymonth_flag_eg2, b.ymonth, b.exe_sam, b.flag_eg2
                           from (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202012') a 
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202012') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20210115') day on a.user_id = day.user_id
                           left join (select * from ml.ml_target_info_yw_user_m where cast(acct_month as text)='202012') b on a.user_id = b.user_id
                       ) t where 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3
20220316-18:29:17      sql执行完毕
20220316-18:29:17  统计 ml.dm_zc_moxing_info_target_202012 的行列数
20220316-18:29:17      12655行，83列
20220316-18:29:17  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.dm_zc_moxing_info_target_202012  group by flag_eg
20220316-18:29:17      dis_test_total: {'count': 12655, 'Pcount': 1871, 'prop': 0.148}


                   ------------------------- 测试集-当月账期数据：ml.mid_eg_now_test_202012 ---------------------------- 
20220316-18:29:17  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.dm_zc_moxing_info_target_202012 where dayvalue_user_status='在网-正常' and 
                       phone_no_null is null and
                       dayvalue_phone_no_null is null and
                       last_stop_date is not null and
                       innet_months >= 3 and flag_eg is not null group by flag_eg
20220316-18:29:17      dis_test_model {'count': 12449, 'Pcount': 1832, 'prop': 0.147}

20220316-18:29:17      dis_test_model 较 dis_train_model 正例占比 变动幅度0.68493% (0.147 较 0.146)

20220316-18:29:17  Info.timeout_limit取值为3000，抽取3000用户
20220316-18:29:17  建表语句（202012账期当月数据） 
                       drop table if exists ml.mid_eg_now_test_202012;
                       select pg_sleep(10);
                       create table ml.mid_eg_now_test_202012 as 
                       select *  from ml.dm_zc_moxing_info_target_202012
                       where dayvalue_user_status='在网-正常' and 
                           phone_no_null is null and
                           dayvalue_phone_no_null is null and
                           last_stop_date is not null and
                           innet_months >= 3 and flag_eg is not null
                       order by random() limit 3000
20220316-18:29:27      sql执行完毕
20220316-18:29:27  正负例分布： select cast(flag_eg as text) flag_eg, count(1) from ml.mid_eg_now_test_202012  group by flag_eg
20220316-18:29:27      dis_test_sample {'count': 3000, 'Pcount': 453, 'prop': 0.151}

20220316-18:29:27      dis_test_sample 较 dis_test_model 正例占比 变动幅度2.72109% (0.151 较 0.147)


                   ------------------------ 合并近n月数据：ml.mid_eg_recent_test_202012  -------------------------------- 
20220316-18:29:27  建表语句： 
                       drop table if exists ml.mid_eg_recent_test_202012;
                       select pg_sleep(10);
                       create table ml.mid_eg_recent_test_202012 as 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202012 as text) user_acct_month, cast('data_timeout'  as text) data_use, * from ml.mid_eg_now_test_202012
                       ) t0
                       union all 
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202012 as text) user_acct_month, cast('data_timeout'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.calling_dura dayvalue_calling_dura, day.gprs_flow dayvalue_gprs_flow
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_test_202012 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202011') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202011') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201215') day on a.user_id = day.user_id
                       ) t1
                       union all
                       select user_acct_month, data_use, acct_month, user_id, phone_no_null, phone_no_tm, dinner_id, account_id, innet_date, innet_months, age, sex, user_status, last_stop_date, dinner, dinner_fee, gprs_last_defer, gprs_resource, gprs_now_rest, call_use, if_nolimit, if_5g_dinner, if_5g_term, if_jt, start_level, cred_type, if_cred_multi, arpu, pay_cnt, pay_fee, acct_balance, term_model, term_brand, term_type, sk_type, if_new_term, calling_cnt, calling_dura, called_cnt, called_dura, calling_diff_cnt, calling_diff_dura, gprs_flow, gprs_flow_4g, gprs_flow_5g, gprs_flow_busy, gprs_flow_idle, gprs_now_defer, gprs_flow_roam, call_dura_roam, days_roam, gprs_flow_gat, days_gat, days_gprs, days_call, nos_call, nos_calling, nos_calling_diff, sms_cnt, call_fee_local, call_fee_roam, gprs_income, gprs_fee, call_fee, gprs_flow_video, gprs_flow_short, gprs_flow_music, gprs_flow_commu, gprs_flow_game, dayvalue_calling_dura, dayvalue_gprs_flow, dayvalue_user_status, dayvalue_phone_no_null, flag_eg
                       from (
                           select cast(202012 as text) user_acct_month, cast('data_timeout'  as text) data_use, 
                           b.* 
                           , a2.age_add, a2.sex_add 
                           , day.calling_dura dayvalue_calling_dura, day.gprs_flow dayvalue_gprs_flow
                           , cast(NUlL as integer) flag_eg 
                           , cast(NULL as numeric) dayvalue_phone_no_null, cast(NULL as text) dayvalue_user_status
                           from ml.mid_eg_now_test_202012 a
                           inner join (select * from ml.ml_feature_info_yw_user_m where cast(acct_month as text)='202010') b on a.user_id = b.user_id
                           left join (select*from ml.ml_feature_add_yw_user_m where cast(acct_month as text)='202010') a2 on a.user_id = a2.user_id
                           left join (select * from ml.ml_feature_info_yw_user_day where cast(acct_day as text)='20201115') day on a.user_id = day.user_id
                       ) t2
20220316-18:29:37      sql执行完毕
20220316-18:29:37  统计ml.mid_eg_recent_test_202012行列数
20220316-18:29:37      3000行，74列

                   --------------------------------- 核验各账期数据量  -------------------------------------------------- 
20220316-18:29:37  sql语句： 
                       select user_acct_month, data_use, acct_month, flag_eg, count(1) 
                       from ml.mid_eg_recent_test_202012 
                       group by user_acct_month, data_use, acct_month, flag_eg 
                       order by user_acct_month, data_use, acct_month, flag_eg

20220316-18:29:38  结果：
                     user_acct_month      data_use  acct_month  flag_eg  count
                   0          202012  data_timeout      202010      NaN   3000
                   1          202012  data_timeout      202011      NaN   1989
                   2          202012  data_timeout      202012      0.0   2547
                   3          202012  data_timeout      202012      1.0    453


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\tablemodule\tablefun.py:910: UserWarning: 下列账期用户量不同，请检查！
                              acct_month  flag_eg  count
user_acct_month data_use                                
202012          data_timeout      202010      0.0   3000
                data_timeout      202011      0.0   1989
                data_timeout      202012      1.0   3000
  warnings.warn(w)

                   -------------------------------- 删除中间表 ----------------------------------------------------- 
20220316-18:29:38  sql语句： drop table if exists ml.mid_eg_model_test_202012
20220316-18:29:38      sql执行完毕
20220316-18:29:38  sql语句： drop table if exists ml.mid_eg_now_test_202012
20220316-18:29:38      sql执行完毕

20220316-18:29:38  返回结果表名：ml.mid_eg_recent_test_202012
20220316-18:29:38  将Info保存至./binaryclassify/eg/traintest~202011~202012/Info~base_test.pkl

20220316-18:29:38  结束时间：2022-03-16 18:29:38
20220316-18:29:38  耗时：32 s
                   ###################################################################### 测试集加工
                    
20220316-18:29:38  开始时间：2022-03-16 18:29:38
20220316-18:29:38  参数设置：
                       table_in: ml.mid_eg_recent_test_202012
                       stage: create
                       Info.iv_limit: 0.05
                       Info.model_name: 模型示例
                       step: test
                       Info.r_limit: 0.95
                       Info.auto_pair2: False

20220316-18:29:38  ------------------------- 读取数据: ml.mid_eg_recent_test_202012 2022-03-16 18:29:38 -------------------------
20220316-18:29:38      src: gp
20220316-18:29:38      condition: None
20220316-18:29:38      col_need(44): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'innet_months', 'age', 'sex', 'user_status', 'last_stop_date', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'if_nolimit', 'if_5g_dinner', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220316-18:29:38      col_del: None
20220316-18:29:38      col_char(13): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'sex', 'user_status', 'if_nolimit', 'if_5g_dinner', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220316-18:29:38      col_num(30): ['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_now_defer', 'gprs_flow_roam', 'call_dura_roam', 'days_gprs', 'days_call', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game']
20220316-18:29:38      col_date(1): ['last_stop_date']
20220316-18:29:38      nrows: None
20220316-18:29:38      if_coltolower: True
20220316-18:29:38      kwargs: {}

20220316-18:29:38      读取
20220316-18:29:38      shape: (7989, 44)

20220316-18:29:38  -------------------------读取完毕: (7989, 44) 2022-03-16 18:29:38 -------------------------

20220316-18:29:38  手动衍生_py7个字段: {'monthsremain_last_stop_date': '最后停机时间：剩余时长', 'days_call_p': '通话天数占比', 'days_call_p_1': '通话天数占比_1', 'days_call_p_2': '通话天数占比_2', 'days_call_p_3': '通话天数占比_3', 'days_call_p_4': '通话天数占比_4', 'greatest_gprs_app': 'app偏好'}
20220316-18:29:38  monthsremain_last_stop_date: last_stop_date - current_date
20220316-18:29:38  days_call_p: days_call / days_month
20220316-18:29:38  days_call_p_1: days_call_p + days_gprs
20220316-18:29:38  days_call_p_2: days_call_p_1 + days_gprs
20220316-18:29:38  days_call_p_3: days_call_p_2 + days_gprs
20220316-18:29:38  days_call_p_4: days_call_p_3 + days_gprs
20220316-18:29:38  greatest_gprs_app: {'gprs_flow_video': 'video', 'gprs_flow_short': 'short', 'gprs_flow_music': 'music', 'gprs_flow_commu': 'commu', 'gprs_flow_game': 'game'}
20220316-18:29:40  数据量: (7989, 51)

20220316-18:29:40  检查数据
20220316-18:29:40  各账期数据量分布：
                       202010  data_timeout    3000
                       202011  data_timeout    1989
                       202012  data_timeout    3000
                       dtype: int64
20220316-18:29:40  各账期数据量不一致
20220316-18:29:40  以nan填充缺少账期的记录
20220316-18:29:40      修改后：
                       202010  data_timeout    3000
                       202011  data_timeout    3000
                       202012  data_timeout    3000
                       dtype: int64)
20220316-18:29:40  
                   diff_limitweiNone,不考察近n月字段各账期取值分布, dis_exam返回None！


20220316-18:29:40  填充数值型&类别型字段缺失值
20220316-18:29:40  日期型字段缺失值情况：
                       last_stop_date    1011
                       dtype: int64

20220316-18:29:40  正负例分布：
                       data_timeout  202012  0    2547
                       data_timeout  202012  1    453
                       dtype: int64

                   ----------------------------------------- 当月 类别型 onthot 
20220316-18:29:40  ['greatest_gprs_app~commu', 'greatest_gprs_app~video']

                   ----------------------------------------- 当月 数值型&类别型 原始数据 
20220316-18:29:40  (3000, 42)
20220316-18:29:40  筛选衍生字段的 原始/手动衍生_sql 字段

                   ----------------------------------------- 近n月 数值型 近3月均值 
20220316-18:29:40  字段个数：23, 添加字段：None
20220316-18:29:40  (3000, 65)

                   ----------------------------------------- 近n月 数值型 近3月离散系数 
20220316-18:29:40  字段个数：9, 添加字段：None
20220316-18:29:40  (3000, 74)

                   ----------------------------------------- 近n月 数值型 近3月波动性 
20220316-18:29:40  字段个数：11, 添加字段：None
20220316-18:29:40  (3000, 85)

                   ----------------------------------------- 近n月 数值型 近3月成长率 
20220316-18:29:40  字段个数：16, 添加字段：None
20220316-18:29:40  (3000, 101)

                   ----------------------------------------- 近n月 数值型 近3月最大值 
20220316-18:29:40  字段个数：15, 添加字段：None
20220316-18:29:40  (3000, 116)

                   ----------------------------------------- 近n月 数值型 近3月最小值 
20220316-18:29:40  字段个数：19, 添加字段：None
20220316-18:29:40  (3000, 135)

                   ----------------------------------------- 近n月 数值型 近3月标准差 
20220316-18:29:40  字段个数：15, 添加字段：None
20220316-18:29:40  (3000, 150)

                   ----------------------------------------- 近n月 数值型 大于x的月份数 
20220316-18:29:40  ('more0cnt', '近3月大于0的月份数')
20220316-18:29:40  ('moreq25cnt', '近3月大于第一四分位数的月份数')
20220316-18:29:40  (3000, 165)

                   ----------------------------------------- 近n月 类别型 取某值的月份数 
20220316-18:29:40  字段个数：5, 添加字段：None
20220316-18:29:40  (3000, 170)

                   ----------------------------------------- 汇总最终宽表 
20220316-18:29:40  table.shape:(3000, 170)

20220316-18:29:40  保存宽表结果至：./binaryclassify/eg/traintest~202011~202012/test_data~202012.csv

20220316-18:29:41  计算字段之间的相关性系数
20220316-18:29:41  
                       count    12090.0
                       mean    0.173
                       std    0.184
                       min    0.0
                       25%    0.053
                       50%    0.114
                       75%    0.215
                       max    1.0
                       dtype: float64


                   ------------------------------- 计算宽表字段psi ------------------------------------ 
                    
                    20220316-18:29:41  my toolmodule.dataprep.PsiTransformer_DF transform
                    20220316-18:29:41      开始时间：2022-03-16 18:29:41
                    20220316-18:29:41      data in : (3000, 170)
                    20220316-18:29:41      self已带有id_X属性 1913720974472
                    20220316-18:29:41      首次从X获取id_X_new属性 1913737885192
                    20220316-18:29:41      data in2: (3000, 159)
                    20220316-18:29:41      对156个数值字段进行分箱：['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
                    20220316-18:29:41      timedata_timeout 计算稳定度（不区分正负例）：self.col_psi_all_
                    20220316-18:29:43      data_timeout 计算稳定度（区分正负例）：self.col_psi_PN_
                    20220316-18:29:48      data out: (3000, 159)
                    20220316-18:29:48      transform轨迹：PsiTransformer_DF(Ncase='0', Pcase='1', bins=None, col_ignore=None, fit_pop_all=False, precision=6, , psi_limit=0.1, trans_na_error=True, warn_mark=' PsiTransformer')
                    20220316-18:29:48      结束时间：2022-03-16 18:29:48 耗时(7s)
20220316-18:29:48  保存Psi至：./binaryclassify/eg/traintest~202011~202012/test_Psi~202011~202012.pkl
20220316-18:29:48  保存dis_exam至：./binaryclassify/eg/traintest~202011~202012/test_dis_exam~202012.pkl
20220316-18:29:48  结束时间：2022-03-16 18:29:48
20220316-18:29:48  耗时：10 s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning: stage取值为create时,r_limit, iv_limit参数无效，将被忽略
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer timedata_timeout 计算稳定性(不区分正负例) ['account_id']字段多出1891个取值, .head(5):
                      old  new
field      value              
account_id 101582294  NaN  1.0
           101819657  NaN  1.0
           102146752  NaN  1.0
           102162744  NaN  1.0
           102172714  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，26个字段稳定性>=psi_limit（0.1）：
grow__gprs_last_defer            3.260305
grow__dinner_fee                 1.812596
min__gprs_now_rest               0.467092
grow__gprs_now_rest              0.403672
sep__gprs_resource               0.290400
grow__calling_diff_dura          0.251390
wave__gprs_now_rest              0.210519
wave__gprs_now_defer             0.207252
moreq25cnt__arpu                 0.207049
sep__gprs_now_rest               0.206664
wave__gprs_flow_commu            0.182499
min__gprs_last_defer             0.152571
moreq25cnt__gprs_last_defer      0.152500
wave__gprs_flow_music            0.152397
grow__calling_diff_cnt           0.146938
moreq25cnt__gprs_flow_busy       0.134262
sep__gprs_flow_music             0.124131
moreq25cnt__calling_diff_dura    0.121003
sep__nos_calling_diff            0.120252
grow__arpu                       0.116352
wave__gprs_last_defer            0.112544
sep__nos_calling                 0.110956
wave__gprs_flow_video            0.107611
moreq25cnt__call_use             0.102052
grow__nos_calling_diff           0.101697
min__calling_diff_cnt            0.101690
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例)-正例（1） ['account_id']字段多出1890个取值, .head(5):
                      old  new
field      value              
account_id 102162744  NaN  1.0
           102172714  NaN  1.0
           102180142  NaN  1.0
           102182071  NaN  1.0
           102191445  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例)-负例（0） ['account_id']字段多出1890个取值, .head(5):
                      old  new
field      value              
account_id 102162744  NaN  1.0
           102172714  NaN  1.0
           102180142  NaN  1.0
           102182071  NaN  1.0
           102191445  NaN  1.0
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:      PsiTransformer data_timeout 计算稳定性(区分正负例) ，38个字段稳定性>=psi_limit（0.1）：
grow__gprs_last_defer            3.539706
grow__dinner_fee                 1.947386
min__gprs_now_rest               0.490721
grow__gprs_now_rest              0.413506
moreq25cnt__arpu                 0.322824
grow__calling_diff_dura          0.313097
sep__gprs_resource               0.299478
wave__gprs_now_defer             0.293180
wave__gprs_flow_music            0.256331
wave__gprs_now_rest              0.254705
moreq25cnt__gprs_flow_busy       0.239313
sep__gprs_now_rest               0.218568
moreq25cnt__calling_diff_dura    0.196738
moreq25cnt__call_use             0.180678
wave__gprs_flow_commu            0.177965
min__gprs_last_defer             0.174535
sep__gprs_flow_music             0.174081
moreq25cnt__gprs_last_defer      0.170505
moreq25cnt__nos_calling          0.164607
wave__gprs_flow_video            0.163942
grow__calling_diff_cnt           0.160537
sep__gprs_last_defer             0.155091
min__arpu                        0.151882
sep__nos_calling_diff            0.139089
grow__arpu                       0.138156
wave__gprs_last_defer            0.137770
min__calling_diff_cnt            0.136819
moreq25cnt__nos_calling_diff     0.133905
grow__nos_calling_diff           0.127445
account_id                       0.125723
std__nos_calling_diff            0.119479
acct_balance                     0.115195
grow__gprs_flow_commu            0.110860
valuecnt__sex~女                 0.109432
wave__call_use                   0.107328
min__dinner_fee                  0.105759
sep__nos_calling                 0.104558
min__calling_dura                0.103078
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)

                   ###################################################################### 创建数据处理流水线、算法序列
                    
20220316-18:29:48  创建数据转换流水线1


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\toolmodule\dataprep.py:9: UserWarning: Pipeline_DF：verbose参数值被赋予print_indent后默认参数设置为None
  from collections import OrderedDict


D:\STUDY\Python\PycharmProjects\ModelProject\selfmodule\toolmodule\dataprep.py:9: UserWarning: FeatureUnion_DF：verbose参数值被赋予print_indent后默认参数设置为None
  from collections import OrderedDict
20220316-18:29:48  创建数据转换流水线2
20220316-18:29:48  创建数据转换流水线3
20220316-18:29:48  创建算法序列

                   ###################################################################### 训练测试过程
                    
20220316-18:29:48  开始时间：2022-03-16 18:29:48
20220316-18:29:48  模型名称：模型示例
20220316-18:29:48  参数设置：
                       Info.model_name: 模型示例
                       Info.trainproc_ratiolist: [1, 2, 10]
                       field_comment: (170, 14)
                       Info.freq_limit: 0.95
                       Info.unique_limit: 5000
                       Info.iv_limit: 0.05
                       Info.r_limit: 0.95
                       Info.random_state: None
20220316-18:29:48  mark: ~202011~202012
20220316-18:29:48  目标字段：flag_eg; 正负例取值：1、0
20220316-18:29:48  field_comment.shape: (170, 14)
20220316-18:29:48      len(col_need): 170
20220316-18:29:48      删除field_comment中into_model取值为‘删除’的2个字段：['phone_no_null', 'last_stop_date']
20220316-18:29:48      len(col_need): 170
20220316-18:29:48      删除Info.col_del中的1个字段：{'user_acct_month'}
20220316-18:29:48      len(col_need): 169

20220316-18:29:48      删除Info.supply_other、col_mark中的6个字段：{'call_fee_local', 'sms_cnt', 'last_stop_date', 'phone_no_null', 'dayvalue_phone_no_null', 'dayvalue_user_status'}
20220316-18:29:48      len(col_need): 163

20220316-18:29:48  ------------------------- 读取数据: ./binaryclassify/eg/traintest~202011~202012/train_data~202011.csv 2022-03-16 18:29:48 -------------------------
20220316-18:29:48      src: file
20220316-18:29:48      condition: None
20220316-18:29:48      col_need(163): ['data_use', 'acct_month', 'user_id', 'account_id', 'innet_months', 'age', 'user_status', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'flag_eg', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
20220316-18:29:48      col_del: None
20220316-18:29:48      col_char(11): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'user_status', 'greatest_gprs_app', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220316-18:29:48      col_num(158): ['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
20220316-18:29:48      col_date: None
20220316-18:29:48      nrows: None
20220316-18:29:48      if_coltolower: False
20220316-18:29:48      kwargs: {}

20220316-18:29:48      读取
20220316-18:29:48  -------------------------读取完毕: (3806, 163) 2022-03-16 18:29:48 -------------------------

20220316-18:29:48  ------------------------- 读取数据: ./binaryclassify/eg/traintest~202011~202012/test_data~202012.csv 2022-03-16 18:29:48 -------------------------
20220316-18:29:48      src: file
20220316-18:29:48      condition: None
20220316-18:29:48      col_need(163): ['data_use', 'acct_month', 'user_id', 'account_id', 'innet_months', 'age', 'user_status', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'flag_eg', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
20220316-18:29:48      col_del: None
20220316-18:29:48      col_char(11): ['user_acct_month', 'data_use', 'acct_month', 'phone_no_null', 'user_id', 'account_id', 'user_status', 'greatest_gprs_app', 'dayvalue_user_status', 'dayvalue_phone_no_null', 'flag_eg']
20220316-18:29:48      col_num(158): ['innet_months', 'age', 'dinner_fee', 'gprs_last_defer', 'gprs_resource', 'gprs_now_rest', 'call_use', 'arpu', 'acct_balance', 'calling_cnt', 'calling_dura', 'calling_diff_cnt', 'calling_diff_dura', 'gprs_flow_5g', 'gprs_flow_busy', 'gprs_flow_roam', 'call_dura_roam', 'days_call_p_4', 'nos_calling', 'nos_calling_diff', 'sms_cnt', 'call_fee_local', 'gprs_fee', 'gprs_flow_video', 'gprs_flow_short', 'gprs_flow_music', 'gprs_flow_commu', 'gprs_flow_game', 'greatest_gprs_app~commu', 'greatest_gprs_app~video', 'avg__arpu', 'avg__nos_calling', 'avg__calling_dura', 'avg__gprs_now_rest', 'avg__gprs_resource', 'avg__gprs_flow_roam', 'avg__gprs_flow_video', 'avg__calling_diff_cnt', 'avg__acct_balance', 'avg__gprs_flow_game', 'avg__gprs_last_defer', 'avg__gprs_flow_music', 'avg__call_use', 'avg__gprs_flow_5g', 'avg__call_dura_roam', 'avg__calling_cnt', 'avg__monthsremain_last_stop_date', 'avg__gprs_flow_busy', 'avg__nos_calling_diff', 'avg__gprs_now_defer', 'avg__gprs_flow_short', 'avg__calling_diff_dura', 'avg__dinner_fee', 'sep__nos_calling', 'sep__gprs_flow_commu', 'sep__gprs_now_rest', 'sep__gprs_resource', 'sep__gprs_last_defer', 'sep__gprs_flow_music', 'sep__gprs_flow_busy', 'sep__nos_calling_diff', 'sep__gprs_flow_short', 'wave__nos_calling', 'wave__gprs_flow_commu', 'wave__gprs_now_rest', 'wave__gprs_flow_video', 'wave__gprs_flow_game', 'wave__gprs_last_defer', 'wave__gprs_flow_music', 'wave__call_use', 'wave__gprs_flow_5g', 'wave__gprs_now_defer', 'wave__gprs_flow_short', 'grow__arpu', 'grow__nos_calling', 'grow__calling_dura', 'grow__gprs_flow_commu', 'grow__gprs_now_rest', 'grow__gprs_flow_roam', 'grow__gprs_flow_video', 'grow__calling_diff_cnt', 'grow__gprs_last_defer', 'grow__call_use', 'grow__gprs_flow_5g', 'grow__calling_cnt', 'grow__gprs_flow_busy', 'grow__nos_calling_diff', 'grow__calling_diff_dura', 'grow__dinner_fee', 'max__arpu', 'max__nos_calling', 'max__days_call_p_4', 'max__calling_dura', 'max__gprs_flow_commu', 'max__gprs_now_rest', 'max__gprs_resource', 'max__calling_diff_cnt', 'max__gprs_last_defer', 'max__call_use', 'max__call_dura_roam', 'max__calling_cnt', 'max__nos_calling_diff', 'max__gprs_flow_short', 'max__calling_diff_dura', 'min__arpu', 'min__nos_calling', 'min__calling_dura', 'min__gprs_flow_commu', 'min__gprs_now_rest', 'min__gprs_resource', 'min__gprs_flow_roam', 'min__gprs_flow_video', 'min__calling_diff_cnt', 'min__gprs_flow_game', 'min__gprs_last_defer', 'min__gprs_flow_music', 'min__call_use', 'min__calling_cnt', 'min__gprs_flow_busy', 'min__nos_calling_diff', 'min__gprs_flow_short', 'min__calling_diff_dura', 'min__dinner_fee', 'std__nos_calling', 'std__calling_dura', 'std__gprs_flow_commu', 'std__gprs_now_rest', 'std__gprs_resource', 'std__gprs_flow_roam', 'std__gprs_flow_video', 'std__calling_diff_cnt', 'std__gprs_last_defer', 'std__call_use', 'std__gprs_flow_5g', 'std__call_dura_roam', 'std__gprs_flow_busy', 'std__nos_calling_diff', 'std__calling_diff_dura', 'more0cnt__nos_calling', 'more0cnt__calling_cnt', 'moreq25cnt__arpu', 'moreq25cnt__nos_calling', 'moreq25cnt__calling_dura', 'moreq25cnt__gprs_flow_commu', 'moreq25cnt__gprs_flow_video', 'moreq25cnt__gprs_last_defer', 'moreq25cnt__call_use', 'moreq25cnt__calling_cnt', 'moreq25cnt__gprs_flow_busy', 'moreq25cnt__nos_calling_diff', 'moreq25cnt__gprs_now_defer', 'moreq25cnt__gprs_flow_short', 'moreq25cnt__calling_diff_dura', 'valuecnt__sex~女', 'valuecnt__sex~男', 'valuecnt__if_nolimit~是', 'valuecnt__if_5g_dinner~是', 'valuecnt__greatest_gprs_app~video']
20220316-18:29:48      col_date: None
20220316-18:29:48      nrows: None
20220316-18:29:48      if_coltolower: False
20220316-18:29:48      kwargs: {}

20220316-18:29:48      读取
20220316-18:29:49  -------------------------读取完毕: (3000, 163) 2022-03-16 18:29:49 -------------------------

20220316-18:29:49  合并训练、测试数据
20220316-18:29:49  data.shape: (6806, 163)

20220316-18:29:49  数据分布：
                       202011  data_timein  0    1736
                       202011  data_timein  1    264
                       202011  data_train  0    903
                       202011  data_train  1    903
                       202012  data_timeout  0    2547
                       202012  data_timeout  1    453
                       dtype: int64

20220316-18:29:49  数据集整合：
20220316-18:29:49  -------------------------- train --------------------------
20220316-18:29:49  校验账期:                    20220316-18:29:49      通过
20220316-18:29:49  trainproc_ratiolist：[1, 2, 10]
20220316-18:29:49  正负例实际比例最高：1:1.0，将trainproc_ratiolist纠正为:[1]
20220316-18:29:49  随机抽样 1:1
20220316-18:29:49      正例样本：903
20220316-18:29:49      负例样本：903
20220316-18:29:49          从负例中随机抽取903（903*1）
20220316-18:29:49  -------------------------- timein --------------------------
20220316-18:29:49  校验账期:                    20220316-18:29:49      通过
20220316-18:29:49  -------------------------- timeout --------------------------
20220316-18:29:49  校验账期:                    20220316-18:29:49      通过
20220316-18:29:49  具备data_timeout数据集，以其测试效果评估模型

20220316-18:29:49  遍历不同的抽样比例、数据预处理流水线、算法 进行训练测试:

20220316-18:29:49  ------------------------------------------ 抽样比例：ratio_1_1 ------------------------------------------

20220316-18:29:49  ------------------------- 流水线：pipeline1 -------------------------
20220316-18:29:49  train_X: (1806, 161)
20220316-18:30:14  转换完毕，进入模型(X+Y)：(3000, 147)

20220316-18:30:14  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220316-18:30:15  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         18      60.0%       4.0%          4
                                5.0%      150         79      52.7%      17.4%        3.5
                               10.0%      300        142      47.3%      31.3%        3.1
                               20.0%      600        210      35.0%      46.4%        2.3
                               30.0%      900        252      28.0%      55.6%        1.9
                               40.0%     1200        294      24.5%      64.9%        1.6
                               50.0%     1500        341      22.7%      75.3%        1.5
                               60.0%     1800        366      20.3%      80.8%        1.3
                               70.0%     2100        398      19.0%      87.9%        1.3
                               80.0%     2401        424      17.7%      93.6%        1.2
                               90.0%     2700        438      16.2%      96.7%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:15  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220316-18:30:15  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         12      40.0%       2.6%        2.6
                                5.0%      150         65      43.3%      14.3%        2.9
                               10.0%      300        118      39.3%      26.0%        2.6
                               20.0%      600        186      31.0%      41.1%        2.1
                               30.0%      900        247      27.4%      54.5%        1.8
                               40.0%     1200        294      24.5%      64.9%        1.6
                               50.0%     1500        346      23.1%      76.4%        1.5
                               60.0%     1800        375      20.8%      82.8%        1.4
                               70.0%     2100        406      19.3%      89.6%        1.3
                               80.0%     2400        429      17.9%      94.7%        1.2
                               90.0%     2700        441      16.3%      97.4%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:15  训练测试 XGBClassifier_DF - 默认参数
20220316-18:30:16  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         12      40.0%       2.6%        2.6
                                5.0%      150         69      46.0%      15.2%          3
                               10.0%      300        120      40.0%      26.5%        2.6
                               20.0%      600        179      29.8%      39.5%          2
                               30.0%      900        241      26.8%      53.2%        1.8
                               40.0%     1200        300      25.0%      66.2%        1.7
                               50.0%     1500        346      23.1%      76.4%        1.5
                               60.0%     1800        383      21.3%      84.5%        1.4
                               70.0%     2100        409      19.5%      90.3%        1.3
                               80.0%     2400        425      17.7%      93.8%        1.2
                               90.0%     2700        442      16.4%      97.6%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:16  训练测试 RandomForestClassifier_DF - 默认参数
20220316-18:30:16  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.2%       35         22      62.9%       4.9%        4.2
                                5.4%      161         90      55.9%      19.9%        3.7
                               10.4%      311        159      51.1%      35.1%        3.4
                               20.9%      628        243      38.7%      53.6%        2.6
                               28.9%      866        284      32.8%      62.7%        2.2
                               41.3%     1238        333      26.9%      73.5%        1.8
                               50.8%     1523        368      24.2%      81.2%        1.6
                               61.9%     1858        400      21.5%      88.3%        1.4
                               70.4%     2113        425      20.1%      93.8%        1.3
                               80.1%     2402        438      18.2%      96.7%        1.2
                               90.1%     2703        449      16.6%      99.1%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:17  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220316-18:30:17  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:17  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220316-18:30:18  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                                0.0%        0          0       nan%       0.0%        NaN
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                                0.0%        0          0       nan%       0.0%        NaN
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:18  训练测试 LogisticRegression_DF - solver='liblinear'
20220316-18:30:18  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         12      40.0%       2.6%        2.6
                                5.0%      150         65      43.3%      14.3%        2.9
                               10.0%      300        115      38.3%      25.4%        2.5
                               20.0%      600        182      30.3%      40.2%          2
                               30.0%      900        238      26.4%      52.5%        1.8
                               40.0%     1200        279      23.2%      61.6%        1.5
                               50.0%     1500        320      21.3%      70.6%        1.4
                               60.0%     1800        361      20.1%      79.7%        1.3
                               70.0%     2100        392      18.7%      86.5%        1.2
                               80.1%     2403        417      17.4%      92.1%        1.1
                               90.0%     2700        435      16.1%      96.0%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:18  ------------------------- 流水线：pipeline2 -------------------------
20220316-18:30:18  train_X: (1806, 161)
20220316-18:30:47  转换完毕，进入模型(X+Y)：(3000, 146)

20220316-18:30:47  训练测试 LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0
20220316-18:30:48  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         20      66.7%       4.4%        4.4
                                5.0%      150         85      56.7%      18.8%        3.8
                               10.0%      300        138      46.0%      30.5%          3
                               20.0%      600        218      36.3%      48.1%        2.4
                               30.0%      900        267      29.7%      58.9%          2
                               40.0%     1200        300      25.0%      66.2%        1.7
                               50.0%     1500        343      22.9%      75.7%        1.5
                               60.0%     1800        375      20.8%      82.8%        1.4
                               70.0%     2100        401      19.1%      88.5%        1.3
                               80.0%     2400        424      17.7%      93.6%        1.2
                               90.0%     2700        439      16.3%      96.9%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:48  训练测试 LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20
20220316-18:30:48  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         18      60.0%       4.0%          4
                                5.0%      150         77      51.3%      17.0%        3.4
                               10.0%      300        130      43.3%      28.7%        2.9
                               20.0%      600        215      35.8%      47.5%        2.4
                               30.0%      900        269      29.9%      59.4%          2
                               40.0%     1200        315      26.2%      69.5%        1.7
                               50.0%     1500        349      23.3%      77.0%        1.5
                               60.0%     1800        384      21.3%      84.8%        1.4
                               70.0%     2100        410      19.5%      90.5%        1.3
                               80.0%     2400        426      17.8%      94.0%        1.2
                               90.0%     2700        444      16.4%      98.0%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:48  训练测试 XGBClassifier_DF - 默认参数
20220316-18:30:49  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         25      83.3%       5.5%        5.5
                                5.0%      150         79      52.7%      17.4%        3.5
                               10.0%      300        141      47.0%      31.1%        3.1
                               20.0%      600        225      37.5%      49.7%        2.5
                               30.0%      900        280      31.1%      61.8%        2.1
                               40.0%     1200        335      27.9%      74.0%        1.8
                               50.0%     1500        368      24.5%      81.2%        1.6
                               60.0%     1800        393      21.8%      86.8%        1.4
                               70.0%     2100        413      19.7%      91.2%        1.3
                               80.0%     2400        429      17.9%      94.7%        1.2
                               90.0%     2700        443      16.4%      97.8%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:49  训练测试 RandomForestClassifier_DF - 默认参数
20220316-18:30:50  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.2%       36         28      77.8%       6.2%        5.2
                                5.8%      174         98      56.3%      21.6%        3.7
                               10.0%      300        153      51.0%      33.8%        3.4
                               20.9%      628        253      40.3%      55.8%        2.7
                               32.3%      968        325      33.6%      71.7%        2.2
                               42.0%     1260        362      28.7%      79.9%        1.9
                               50.9%     1528        389      25.5%      85.9%        1.7
                               60.2%     1805        412      22.8%      90.9%        1.5
                               72.5%     2174        432      19.9%      95.4%        1.3
                               81.8%     2455        443      18.0%      97.8%        1.2
                               90.4%     2713        451      16.6%      99.6%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:50  训练测试 RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220316-18:30:51  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:51  训练测试 RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000
20220316-18:30:51  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                              100.0%     3000        453      15.1%     100.0%          1
                                0.0%        0          0       nan%       0.0%        NaN
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:51  训练测试 LogisticRegression_DF - solver='liblinear'
20220316-18:30:52  data_timeout测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.0%       30         15      50.0%       3.3%        3.3
                                5.0%      150         76      50.7%      16.8%        3.4
                               10.0%      300        117      39.0%      25.8%        2.6
                               20.0%      600        187      31.2%      41.3%        2.1
                               30.0%      900        230      25.6%      50.8%        1.7
                               40.0%     1200        272      22.7%      60.0%        1.5
                               50.0%     1500        320      21.3%      70.6%        1.4
                               60.0%     1800        362      20.1%      79.9%        1.3
                               70.0%     2100        389      18.5%      85.9%        1.2
                               80.0%     2400        424      17.7%      93.6%        1.2
                               90.0%     2700        434      16.1%      95.8%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:52  确定最佳模型
20220316-18:30:52  剔除无效模型 11 个：ratio_1_1 | pipeline1 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0            [查准率非递减, 分数区分度弱]
                   ratio_1_1 | pipeline1 | LGBMClassifier_DF - boosting_type='dart', objective='binary', num_leaves=511, learning_rate=0.1, colsample_bytree=0.8, subsample=0.6, subsample_freq=20                                                                                                                                                                                                                                                                                                                  [查准率非递减]
                   ratio_1_1 | pipeline1 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                                              [查准率非递减]
                   ratio_1_1 | pipeline1 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                   ratio_1_1 | pipeline1 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                       [分数取值集中(唯一值), 分数区分度弱]
                   ratio_1_1 | pipeline1 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                               [查准率非递减]
                   ratio_1_1 | pipeline2 | LGBMClassifier_DF - boosting_type='gbdt', colsample_bytree=0.9916168768550919, importance_type='split', is_unbalance=False, learning_rate=0.02269504678452342, max_depth=-1, min_child_samples=165, min_child_weight=0.001, min_split_gain=0.0, n_estimators=169, n_jobs=-1, num_leaves=22, reg_alpha=0.36607148130872236, reg_lambda=0.10119960284131346, silent=True, subsample=0.9304256141925331, subsample_for_bin=40000, subsample_freq=0                          [查准率非递减]
                   ratio_1_1 | pipeline2 | XGBClassifier_DF - 默认参数                                                                                                                                                                                                                                                                                                                                                                                                                                              [分数区分度弱]
                   ratio_1_1 | pipeline2 | RandomForestClassifier_DF - n_estimators=500, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                                     [分数取值集中(唯一值)]
                   ratio_1_1 | pipeline2 | RandomForestClassifier_DF - n_estimators=100, max_features=0.06, max_depth=10, min_samples_split=1000, min_samples_leaf=1000                                                                                                                                                                                                                                                                                                                       [分数取值集中(唯一值), 分数区分度弱]
                   ratio_1_1 | pipeline2 | LogisticRegression_DF - solver='liblinear'                                                                                                                                                                                                                                                                                                                                                                                                                               [查准率非递减]
                   Name: if_weak, dtype: object
20220316-18:30:52  最佳模型是：ratio_1_1 | pipeline2 | RandomForestClassifier_DF - 默认参数

20220316-18:30:52  data_train的测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.4%       26         26     100.0%       2.9%          2
                                6.4%      115        115     100.0%      12.7%          2
                               11.7%      212        212     100.0%      23.5%          2
                               21.2%      382        382     100.0%      42.3%          2
                               31.7%      572        572     100.0%      63.3%          2
                               40.5%      731        731     100.0%      81.0%          2
                               50.0%      903        903     100.0%     100.0%          2
                               62.2%     1124        903      80.3%     100.0%        1.6
                               73.2%     1322        903      68.3%     100.0%        1.4
                               82.9%     1497        903      60.3%     100.0%        1.2
                               91.5%     1653        903      54.6%     100.0%        1.1
                              100.0%     1806        903      50.0%     100.0%          1

20220316-18:30:52  data_timein的测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.6%       32         18      56.2%       6.8%        4.3
                                5.3%      106         57      53.8%      21.6%        4.1
                               10.2%      203         88      43.3%      33.3%        3.3
                               20.4%      408        138      33.8%      52.3%        2.6
                               30.6%      611        164      26.8%      62.1%          2
                               41.6%      832        184      22.1%      69.7%        1.7
                               50.2%     1005        203      20.2%      76.9%        1.5
                               61.4%     1228        218      17.8%      82.6%        1.3
                               70.3%     1407        234      16.6%      88.6%        1.3
                               80.6%     1612        242      15.0%      91.7%        1.1
                               90.2%     1805        256      14.2%      97.0%        1.1
                              100.0%     2000        264      13.2%     100.0%          1

20220316-18:30:52  data_timeout的测试效果：
                        累计人数占比 累计人数 累计人数_1 累计查准率 累计查全率 累计提升度
                                1.2%       36         28      77.8%       6.2%        5.2
                                5.8%      174         98      56.3%      21.6%        3.7
                               10.0%      300        153      51.0%      33.8%        3.4
                               20.9%      628        253      40.3%      55.8%        2.7
                               32.3%      968        325      33.6%      71.7%        2.2
                               42.0%     1260        362      28.7%      79.9%        1.9
                               50.9%     1528        389      25.5%      85.9%        1.7
                               60.2%     1805        412      22.8%      90.9%        1.5
                               72.5%     2174        432      19.9%      95.4%        1.3
                               81.8%     2455        443      18.0%      97.8%        1.2
                               90.4%     2713        451      16.6%      99.6%        1.1
                              100.0%     3000        453      15.1%     100.0%          1

20220316-18:30:52  分数稳定度：0.05096

20220316-18:30:52  特征重要性：
                                                  field_name                            comment  importance
                       40                avg__gprs_flow_busy          gprs-忙时-流量：近3月均值    0.035577
                       106               min__gprs_flow_busy        gprs-忙时-流量：近3月最小值    0.026442
                       122               std__gprs_flow_busy        gprs-忙时-流量：近3月标准差    0.024581
                       12                     gprs_flow_busy                     gprs-忙时-流量    0.021696
                       52                sep__gprs_flow_busy      gprs-忙时-流量：近3月离散系数    0.020040
                       8                        acct_balance                           账户余额    0.017508
                       0                        innet_months                           入网时长    0.017456
                       31                  avg__acct_balance                账户余额：近3月均值    0.017221
                       1                                 age                               年龄    0.016299
                       82               max__gprs_flow_commu        通信类应用流量：近3月最大值    0.015288
                       66                         grow__arpu              当月arpu：近3月成长率    0.014979
                       39   avg__monthsremain_last_stop_date  最后停机时间：剩余时长：近3月均值    0.014745
                       15                      days_call_p_4                     通话天数占比_4    0.014713
                       80                 max__days_call_p_4        通话天数占比_4：近3月最大值    0.014374
                       4                       gprs_resource                   gprs国内资源总量    0.013624
                       115               std__gprs_flow_roam    gprs-国内漫游-流量：近3月标准差    0.013521
                       78                          max__arpu              当月arpu：近3月最大值    0.013053
                       23                          avg__arpu                当月arpu：近3月均值    0.012895
                       57                wave__gprs_now_rest      当月gprs资源余量：近3月波动性    0.012161
                       7                                arpu                           当月arpu    0.012014

20220316-18:30:52  保存训练结果至：./binaryclassify/eg/traintest~202011~202012/train_result~202011~202012.pkl

20220316-18:30:52  最优模型的流水线不是pipeline1,若欲在预测时匹配topn原因需要使用pipeline1，从model_flows挑选一个基于pipeline1的保存至./binaryclassify/eg/traintest~202011~202012/train_model_flows~202011~202012.pkl: ratio_1_1 | pipeline1 | XGBClassifier_DF - 默认参数
20220316-18:30:52  保存模型测试效果集合至：./binaryclassify/eg/traintest~202011~202012/train_pre_results~202011~202012.pkl
20220316-18:30:52  结束时间：2022-03-16 18:30:52
20220316-18:30:52  耗时：{time_cost} s


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeaturePrefilter_DF unique_limit(5000)小于X行数(1806), 添加unique_limit_actual：len(X)*0.99=1787
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，25个字段稳定性>=psi_limit（0.1）：
grow__gprs_last_defer            3.260305
min__gprs_now_rest               0.467092
grow__gprs_now_rest              0.403672
sep__gprs_resource               0.293498
grow__calling_diff_dura          0.251390
wave__gprs_now_rest              0.210519
wave__gprs_now_defer             0.207252
moreq25cnt__arpu                 0.207049
sep__gprs_now_rest               0.206664
wave__gprs_flow_commu            0.182499
min__gprs_last_defer             0.152571
moreq25cnt__gprs_last_defer      0.152500
wave__gprs_flow_music            0.152397
grow__calling_diff_cnt           0.146938
moreq25cnt__gprs_flow_busy       0.134262
sep__gprs_flow_music             0.124131
moreq25cnt__calling_diff_dura    0.121003
sep__nos_calling_diff            0.120252
grow__arpu                       0.116352
wave__gprs_last_defer            0.112544
sep__nos_calling                 0.110956
wave__gprs_flow_video            0.107611
moreq25cnt__call_use             0.102052
grow__nos_calling_diff           0.101697
min__calling_diff_cnt            0.101690
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline1 PsiTransformer data_timeout 计算稳定性(区分正负例) ，36个字段稳定性>=psi_limit（0.1）：
grow__gprs_last_defer            3.539706
min__gprs_now_rest               0.490721
grow__gprs_now_rest              0.413506
moreq25cnt__arpu                 0.322824
grow__calling_diff_dura          0.313097
wave__gprs_now_defer             0.293180
sep__gprs_resource               0.292626
wave__gprs_flow_music            0.256331
wave__gprs_now_rest              0.254705
moreq25cnt__gprs_flow_busy       0.239313
sep__gprs_now_rest               0.218568
moreq25cnt__calling_diff_dura    0.196738
moreq25cnt__call_use             0.180678
wave__gprs_flow_commu            0.177965
min__gprs_last_defer             0.174535
sep__gprs_flow_music             0.174081
moreq25cnt__gprs_last_defer      0.170505
moreq25cnt__nos_calling          0.164607
wave__gprs_flow_video            0.163942
grow__calling_diff_cnt           0.160537
sep__gprs_last_defer             0.155091
min__arpu                        0.151882
sep__nos_calling_diff            0.139089
grow__arpu                       0.138156
wave__gprs_last_defer            0.137770
min__calling_diff_cnt            0.136819
moreq25cnt__nos_calling_diff     0.133905
grow__nos_calling_diff           0.127445
std__nos_calling_diff            0.119479
acct_balance                     0.115195
grow__gprs_flow_commu            0.110860
valuecnt__sex~女                 0.109432
wave__call_use                   0.107328
min__dinner_fee                  0.105759
sep__nos_calling                 0.104558
min__calling_dura                0.103078
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     FeatureUnion 下列字段重复，仅保留前一列 157列 => 155列：['greatest_gprs_app~video', 'greatest_gprs_app~commu']
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer timedata_timeout 计算稳定性(不区分正负例)，24个字段稳定性>=psi_limit（0.1）：
grow__gprs_last_defer            3.260305
min__gprs_now_rest               0.459568
sep__gprs_resource               0.293498
grow__calling_diff_dura          0.251390
wave__gprs_now_rest              0.210519
wave__gprs_now_defer             0.207252
moreq25cnt__arpu                 0.207049
sep__gprs_now_rest               0.206664
wave__gprs_flow_commu            0.182499
min__gprs_last_defer             0.152571
moreq25cnt__gprs_last_defer      0.152500
wave__gprs_flow_music            0.152397
grow__calling_diff_cnt           0.146938
moreq25cnt__gprs_flow_busy       0.134262
sep__gprs_flow_music             0.124131
moreq25cnt__calling_diff_dura    0.121003
sep__nos_calling_diff            0.120252
grow__arpu                       0.116352
wave__gprs_last_defer            0.112544
sep__nos_calling                 0.110956
wave__gprs_flow_video            0.107611
moreq25cnt__call_use             0.102052
grow__nos_calling_diff           0.101697
min__calling_diff_cnt            0.101690
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)


D:\installdir_xj\Anaconda3\lib\site-packages\pandas\core\series.py:3848: UserWarning:     pipeline2 PsiTransformer data_timeout 计算稳定性(区分正负例) ，35个字段稳定性>=psi_limit（0.1）：
grow__gprs_last_defer            3.539706
min__gprs_now_rest               0.485437
moreq25cnt__arpu                 0.322824
grow__calling_diff_dura          0.313097
wave__gprs_now_defer             0.293180
sep__gprs_resource               0.292626
wave__gprs_flow_music            0.256331
wave__gprs_now_rest              0.254705
moreq25cnt__gprs_flow_busy       0.239313
sep__gprs_now_rest               0.218568
moreq25cnt__calling_diff_dura    0.196738
moreq25cnt__call_use             0.180678
wave__gprs_flow_commu            0.177965
min__gprs_last_defer             0.174535
sep__gprs_flow_music             0.174081
moreq25cnt__gprs_last_defer      0.170505
moreq25cnt__nos_calling          0.164607
wave__gprs_flow_video            0.163942
grow__calling_diff_cnt           0.160537
sep__gprs_last_defer             0.155091
min__arpu                        0.151882
sep__nos_calling_diff            0.139089
grow__arpu                       0.138156
wave__gprs_last_defer            0.137770
min__calling_diff_cnt            0.136819
moreq25cnt__nos_calling_diff     0.133905
grow__nos_calling_diff           0.127445
std__nos_calling_diff            0.119479
acct_balance                     0.115195
grow__gprs_flow_commu            0.110860
valuecnt__sex~女                 0.109432
wave__call_use                   0.107328
min__dinner_fee                  0.105759
sep__nos_calling                 0.104558
min__calling_dura                0.103078
dtype: float64
  mapped = lib.map_infer(values, f, convert=convert_dtype)
